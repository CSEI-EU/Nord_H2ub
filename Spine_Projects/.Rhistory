select(all_of(c(X1, selected_columns)))
energy_subset <- data_subset %>%
select(all_of(c(Identifier, selected_columns)))
energy_subset <- data_subset %>%
select(all_of(c("Identifier", selected_columns)))
data_subset <- base_case[4:nrow(base_case), ]
X1 <- colnames(data_subset)[1]
energy_subset <- data_subset %>%
select(all_of(c(X1, selected_columns)))
View(energy_subset)
energy_subset[, selected_columns] <- lapply(energy_subset[, selected_columns, drop = FALSE], as.numeric)
summed_data <- rowSums(energy_subset[, selected_columns, drop = FALSE], na.rm = TRUE)
data_subset[, selected_columns] <- lapply(data_subset[, selected_columns, drop = FALSE], as.numeric)
summed_data <- rowSums(data_subset[, selected_columns, drop = FALSE], na.rm = TRUE)
# Assuming the first column is the identifier
identifier <- data_subset[, 1, drop = FALSE]
# Combine the identifier column with the summed data
result <- cbind(identifier, Summed_Unit_Flow = summed_data)
View(result)
cat("\014")
rm(list = ls())
graphics.off()
setwd("C:/Users/djh.eco/OneDrive - CBS - Copenhagen Business School/Documents/GitHub/Nord_H2ub/Spine_Projects/03_output_data/02_runs_EURO")
### Libraries
library(readr)
library(dplyr)
library(stringr)
library(openxlsx)
library(purrr)
######################
###  IMPORT DATA   ###
######################
base_case <- read.xlsx("Output_exported_base_case.xlsx")
cat("\014")
rm(list = ls())
graphics.off()
setwd("C:/Users/djh.eco/OneDrive - CBS - Copenhagen Business School/Documents/GitHub/Nord_H2ub/Spine_Projects/03_output_data/02_runs_EURO")
### Libraries
library(readr)
library(dplyr)
library(stringr)
library(openxlsx)
library(purrr)
######################
###  IMPORT DATA   ###
######################
base_case <- read.xlsx("Output_exported_base_case.xlsx")
constant_case <- read.xlsx("Output_exported_fix_efficiency.xlsx")
######################
### DATA WRANGLING ###
######################
#electricity flows
colnames(base_case) <- make.unique(colnames(base_case))
column_names <- colnames(base_case)
unit_flow_columns <- grep("^unit_flow\\.\\d+$", column_names, value = TRUE)
power_kasso_columns <- sapply(unit_flow_columns, function(col) {
base_case[3, col] == "Power_Kasso"
})
selected_columns <- unit_flow_columns[power_kasso_columns]
data_subset <- base_case[4:nrow(base_case), ]
data_subset[, selected_columns] <- lapply(data_subset[, selected_columns, drop = FALSE], as.numeric)
summed_data <- rowSums(data_subset[, selected_columns, drop = FALSE], na.rm = TRUE)
# Assuming the first column is the identifier
identifier <- data_subset[, 1, drop = FALSE]
# Combine the identifier column with the summed data
result <- cbind(identifier, Summed_Power_Flow = summed_data)
View(result)
setwd("C:/Users/djh.eco/OneDrive - CBS - Copenhagen Business School/Documents/GitHub/Nord_H2ub/Spine_Projects")
power_price <- read.xlsx("01_input_data01_input_raw/Day_ahead_prices_2019")
power_price <- read.xlsx("01_input_data/01_input_raw/Day_ahead_prices_2019")
cat("\014")
rm(list = ls())
graphics.off()
setwd("C:/Users/djh.eco/OneDrive - CBS - Copenhagen Business School/Documents/GitHub/Nord_H2ub/Spine_Projects")
### Libraries
library(readr)
library(dplyr)
library(stringr)
library(openxlsx)
library(purrr)
######################
###  IMPORT DATA   ###
######################
base_case <- read.xlsx("03_output_data/02_runs_EURO/Output_exported_base_case.xlsx")
constant_case <- read.xlsx("03_output_data/02_runs_EURO/Output_exported_fix_efficiency.xlsx")
power_price <- read.xlsx("01_input_data/01_input_raw/Day_ahead_prices_2019")
power_price <- read.xlsx("01_input_data/01_input_raw/Day_ahead_prices_2019.xlsx")
######################
### DATA WRANGLING ###
######################
#electricity flows
colnames(base_case) <- make.unique(colnames(base_case))
column_names <- colnames(base_case)
unit_flow_columns <- grep("^unit_flow\\.\\d+$", column_names, value = TRUE)
power_kasso_columns <- sapply(unit_flow_columns, function(col) {
base_case[3, col] == "Power_Kasso"
})
selected_columns <- unit_flow_columns[power_kasso_columns]
data_subset <- base_case[4:nrow(base_case), ]
data_subset[, selected_columns] <- lapply(data_subset[, selected_columns, drop = FALSE], as.numeric)
summed_data <- rowSums(data_subset[, selected_columns, drop = FALSE], na.rm = TRUE)
# Assuming the first column is the identifier
identifier <- data_subset[, 1, drop = FALSE]
# Combine the identifier column with the summed data
result <- cbind(identifier, Summed_Power_Flow = summed_data)
View(result)
View(power_price)
power_price %>%
filter("PriceArea" == "DK1")
View(power_price)
power_price_dk <- power_price %>%
filter("PriceArea" == "DK1")
View(power_price_dk)
power_price_dk <- power_price %>%
filter(PriceArea == "DK1")
View(power_price_dk)
power_price_dk$HourDK <- as.POSIXct(power_price_dk$HourDK, origin = "1970-01-01")
result$Power_Price <- power_price_dk$SpotPriceEUR
result$Total_power_costs <- result$Summed_Power_Flow * result$Power_Price
end_products <- sapply(unit_flow_columns, function(col) {
base_case[2, col] == "to_node"
base_case[3, col] == "Hydrogen_Kasso" OR "E-Methanol_Kasso"
end_products <- sapply(unit_flow_columns, function(col) {
base_case[2, col] == "to_node" &
base_case[3, col] == "Hydrogen_Kasso" | "E-Methanol_Kasso"
})
end_products <- sapply(unit_flow_columns, function(col) {
base_case[2, col] == "to_node" &&
base_case[3, col] == "Hydrogen_Kasso" || "E-Methanol_Kasso"
})
end_products <- sapply(unit_flow_columns, function(col) {
base_case[2, col] == "to_node" &&
base_case[3, col] == "Hydrogen_Kasso" || base_case[3, col] == "E-Methanol_Kasso"
})
end_products_columns <- sapply(unit_flow_columns, function(col) {
base_case[2, col] == "to_node" &&
base_case[3, col] == "Hydrogen_Kasso" || base_case[3, col] == "E-Methanol_Kasso"
})
end_products_filter <- sapply(unit_flow_columns, function(col) {
base_case[2, col] == "to_node" &&
base_case[3, col] == "Hydrogen_Kasso" || base_case[3, col] == "E-Methanol_Kasso"
})
end_products_columns <- unit_flow_columns[end_products_columns]
data_subset[, end_products_columns] <- lapply(data_subset[, end_products_columns, drop = FALSE], as.numeric)
result$Hydrogen <- data_subset$end_products_columns[1]
View(result)
result$Hydrogen <- data_subset$end_products_columns[1]
result$Hydrogen <- mean(data_subset[1, end_products_columns], na.rm = TRUE)
for (col in end_products_columns) {
result[[col]] <- data_subset[, col]
}
View(result)
View(data_subset)
View(data_subset)
View(base_case)
col_names_to_assign <- base_case[3, end_products_columns]
View(col_names_to_assign)
names(results)[end_products_columns] <- col_names_to_assign
# Rename columns in data_subset using values from base_case
names(result)[end_products_columns] <- col_names_to_assign
View(result)
names(result) <- as.character(names(result))
# Rename columns in result based on end_products_columns and col_names_to_assign
names(result)[end_products_columns] <- col_names_to_assign
names(result)[end_products_columns]
col_names_to_assign
names(result)[end_products_columns] <- col_names_to_assign
names(result)
end_products_columns
names(result)[end_products_columns]
columns_to_rename <- intersect(names(result), end_products_columns)
names(result)[columns_to_rename] <- col_names_to_assign
names(result)[columns_to_rename]
num_cols_to_rename <- length(end_products_columns)
start_index <- ncol(result) - num_cols_to_rename + 1
end_index <- ncol(result)
# Rename the identified columns in result
names(result)[start_index:end_index] <- col_names_to_assign
View(result)
storage_state_columns <- grep("^node_state", column_names, value = TRUE)
columns_comb <- unit_flow_columns[columns_comb, storage_state_columns]
end_products_filter <- sapply(unit_flow_columns, function(col) {
base_case[2, col] == "to_node" &&
base_case[3, col] == "Hydrogen_Kasso" || base_case[3, col] == "E-Methanol_Kasso"
})
storage_state_columns <- grep("^node_state", column_names, value = TRUE)
end_products_columns <- unit_flow_columns[end_products_columns]
data_subset[, end_products_columns] <- lapply(data_subset[, end_products_columns, drop = FALSE], as.numeric)
end_products_columns <- unit_flow_columns[end_products_filter]
data_subset[, end_products_columns] <- lapply(data_subset[, end_products_columns, drop = FALSE], as.numeric)
col_names_to_assign <- base_case[3, end_products_columns]
for (col in end_products_columns) {
result[[col]] <- data_subset[, col]
}
num_cols_to_rename <- length(end_products_columns)
start_index <- ncol(result) - num_cols_to_rename + 1
end_index <- ncol(result)
names(result)[start_index:end_index] <- col_names_to_assign
end_products_columns <- unit_flow_columns[end_products_filter, storage_state_columns]
end_products_columns <- unit_flow_columns[end_products_filter]
storage_state_columns <- grep("^node_state", column_names, value = TRUE)
columns_comb <- intersect(end_products_columns, storage_state_columns)
columns_comb <- union(end_products_columns, storage_state_columns)
data_subset[, columns_comb] <- lapply(data_subset[, columns_comb, drop = FALSE], as.numeric)
col_names_to_assign <- base_case[3, columns_comb]
for (col in columns_comb) {
result[[col]] <- data_subset[, col]
}
num_cols_to_rename <- length(columns_comb)
start_index <- ncol(result) - num_cols_to_rename + 1
end_index <- ncol(result)
names(result)[start_index:end_index] <- col_names_to_assign
View(result)
cat("\014")
rm(list = ls())
graphics.off()
setwd("C:/Users/djh.eco/OneDrive - CBS - Copenhagen Business School/Documents/GitHub/Nord_H2ub/Spine_Projects")
### Libraries
library(readr)
library(dplyr)
library(stringr)
library(openxlsx)
library(purrr)
######################
###  IMPORT DATA   ###
######################
base_case <- read.xlsx("03_output_data/02_runs_EURO/Output_exported_base_case.xlsx")
other_case <- read.xlsx("03_output_data/02_runs_EURO/Output_exported_fix_efficiency.xlsx")
power_price <- read.xlsx("01_input_data/01_input_raw/Day_ahead_prices_2019.xlsx")
cat("\014")
rm(list = ls())
graphics.off()
setwd("C:/Users/djh.eco/OneDrive - CBS - Copenhagen Business School/Documents/GitHub/Nord_H2ub/Spine_Projects")
### Libraries
library(readr)
library(dplyr)
library(stringr)
library(openxlsx)
library(purrr)
######################
###  IMPORT DATA   ###
######################
base_case <- read.xlsx("03_output_data/02_runs_EURO/Output_exported_base_case.xlsx")
other_case <- read.xlsx("03_output_data/02_runs_EURO/Output_exported_fix_efficiency.xlsx")
power_price <- read.xlsx("01_input_data/01_input_raw/Day_ahead_prices_2019.xlsx")
######################
### DATA WRANGLING ###
######################
### Calculate electricity flows
colnames(base_case) <- make.unique(colnames(base_case))
column_names <- colnames(base_case)
unit_flow_columns <- grep("^unit_flow\\.\\d+$", column_names, value = TRUE)
power_kasso_columns <- sapply(unit_flow_columns, function(col) {
base_case[3, col] == "Power_Kasso"
})
selected_columns <- unit_flow_columns[power_kasso_columns]
data_subset <- base_case[4:nrow(base_case), ]
data_subset[, selected_columns] <- lapply(data_subset[, selected_columns, drop = FALSE], as.numeric)
summed_data <- rowSums(data_subset[, selected_columns, drop = FALSE], na.rm = TRUE)
identifier <- data_subset[, 1, drop = FALSE]
result <- cbind(identifier, Summed_Power_Flow = summed_data)
### Add danish power prices to table
power_price_dk <- power_price %>%
filter(PriceArea == "DK1")
result$Power_Price <- power_price_dk$SpotPriceEUR
result$Total_power_costs <- result$Summed_Power_Flow * result$Power_Price
### Add units produced and storages
end_products_filter <- sapply(unit_flow_columns, function(col) {
base_case[2, col] == "to_node" &&
base_case[3, col] == "Hydrogen_Kasso" || base_case[3, col] == "E-Methanol_Kasso"
})
end_products_columns <- unit_flow_columns[end_products_filter]
storage_state_columns <- grep("^node_state", column_names, value = TRUE)
columns_comb <- union(end_products_columns, storage_state_columns)
data_subset[, columns_comb] <- lapply(data_subset[, columns_comb, drop = FALSE], as.numeric)
col_names_to_assign <- base_case[3, columns_comb]
for (col in columns_comb) {
result[[col]] <- data_subset[, col]
}
num_cols_to_rename <- length(columns_comb)
start_index <- ncol(result) - num_cols_to_rename + 1
end_index <- ncol(result)
names(result)[start_index:end_index] <- col_names_to_assign
View(result)
View(result)
View(result)
View(base_case)
names(result)
colnames(result) <- make.unique(colnames(result))
names(result)
data <- c(variable, "_case")
variable <- "base"
data <- c(variable, "_case")
data
# Choose base or other
variable <- "base"
if (variable == "base") {
data <- base_case
} else if (variable == "other") {
data <- other_case
} else {
stop("Unknown variable value. Please set variable to 'base' or 'other'.")
}
rename(result, result&"_"&variable)
result <- result %>%
rename_with(~ paste0(.x, "_", variable))
new_df_name <- paste0("result_", variable)
assign(new_df_name, result)
View(result_base)
cat("\014")
rm(list = ls())
graphics.off()
setwd("C:/Users/djh.eco/OneDrive - CBS - Copenhagen Business School/Documents/GitHub/Nord_H2ub/Spine_Projects")
### Libraries
library(readr)
library(dplyr)
library(stringr)
library(openxlsx)
library(purrr)
######################
###  IMPORT DATA   ###
######################
base_case <- read.xlsx("03_output_data/02_runs_EURO/Output_exported_base_case.xlsx")
other_case <- read.xlsx("03_output_data/02_runs_EURO/Output_exported_fix_efficiency.xlsx")
power_price <- read.xlsx("01_input_data/01_input_raw/Day_ahead_prices_2019.xlsx")
# Choose base or other
variable <- "base"
if (variable == "base") {
data <- base_case
} else if (variable == "other") {
data <- other_case
} else {
stop("Unknown variable value. Please set variable to 'base' or 'other'.")
}
######################
### DATA WRANGLING ###
######################
### Calculate electricity flows
colnames(data) <- make.unique(colnames(data))
column_names <- colnames(data)
unit_flow_columns <- grep("^unit_flow\\.\\d+$", column_names, value = TRUE)
power_kasso_columns <- sapply(unit_flow_columns, function(col) {
data[3, col] == "Power_Kasso"
})
selected_columns <- unit_flow_columns[power_kasso_columns]
data_subset <- data[4:nrow(data), ]
data_subset[, selected_columns] <- lapply(data_subset[, selected_columns, drop = FALSE], as.numeric)
summed_data <- rowSums(data_subset[, selected_columns, drop = FALSE], na.rm = TRUE)
identifier <- data_subset[, 1, drop = FALSE]
result <- cbind(identifier, Summed_Power_Flow = summed_data)
### Add danish power prices to table
power_price_dk <- power_price %>%
filter(PriceArea == "DK1")
result$Power_Price <- power_price_dk$SpotPriceEUR
result$Total_power_costs <- result$Summed_Power_Flow * result$Power_Price
### Add units produced and storages
end_products_filter <- sapply(unit_flow_columns, function(col) {
base_case[2, col] == "to_node" &&
base_case[3, col] == "Hydrogen_Kasso" || base_case[3, col] == "E-Methanol_Kasso"
})
end_products_columns <- unit_flow_columns[end_products_filter]
storage_state_columns <- grep("^node_state", column_names, value = TRUE)
columns_comb <- union(end_products_columns, storage_state_columns)
data_subset[, columns_comb] <- lapply(data_subset[, columns_comb, drop = FALSE], as.numeric)
setwd("C:/Users/djh.eco/OneDrive - CBS - Copenhagen Business School/Documents/GitHub/Nord_H2ub/Spine_Projects")
### Libraries
library(readr)
library(dplyr)
library(stringr)
library(openxlsx)
library(purrr)
######################
###  IMPORT DATA   ###
######################
base_case <- read.xlsx("03_output_data/02_runs_EURO/Output_exported_base_case.xlsx")
other_case <- read.xlsx("03_output_data/02_runs_EURO/Output_exported_fix_efficiency.xlsx")
power_price <- read.xlsx("01_input_data/01_input_raw/Day_ahead_prices_2019.xlsx")
# Choose base or other
variable <- "base"
if (variable == "base") {
data <- base_case
} else if (variable == "other") {
data <- other_case
} else {
stop("Unknown variable value. Please set variable to 'base' or 'other'.")
}
cat("\014")
rm(list = ls())
graphics.off()
setwd("C:/Users/djh.eco/OneDrive - CBS - Copenhagen Business School/Documents/GitHub/Nord_H2ub/Spine_Projects")
### Libraries
library(readr)
library(dplyr)
library(stringr)
library(openxlsx)
library(purrr)
######################
###  IMPORT DATA   ###
######################
base_case <- read.xlsx("03_output_data/02_runs_EURO/Output_exported_base_case.xlsx")
other_case <- read.xlsx("03_output_data/02_runs_EURO/Output_exported_fix_efficiency.xlsx")
power_price <- read.xlsx("01_input_data/01_input_raw/Day_ahead_prices_2019.xlsx")
# Choose base or other
variable <- "base"
if (variable == "base") {
data <- base_case
} else if (variable == "other") {
data <- other_case
} else {
stop("Unknown variable value. Please set variable to 'base' or 'other'.")
}
######################
### DATA WRANGLING ###
######################
### Calculate electricity flows
colnames(data) <- make.unique(colnames(data))
column_names <- colnames(data)
unit_flow_columns <- grep("^unit_flow\\.\\d+$", column_names, value = TRUE)
power_kasso_columns <- sapply(unit_flow_columns, function(col) {
data[3, col] == "Power_Kasso"
})
selected_columns <- unit_flow_columns[power_kasso_columns]
data_subset <- data[4:nrow(data), ]
data_subset[, selected_columns] <- lapply(data_subset[, selected_columns, drop = FALSE], as.numeric)
summed_data <- rowSums(data_subset[, selected_columns, drop = FALSE], na.rm = TRUE)
identifier <- data_subset[, 1, drop = FALSE]
result <- cbind(identifier, Summed_Power_Flow = summed_data)
### Add danish power prices to table
power_price_dk <- power_price %>%
filter(PriceArea == "DK1")
result$Power_Price <- power_price_dk$SpotPriceEUR
result$Total_power_costs <- result$Summed_Power_Flow * result$Power_Price
### Add units produced and storages
end_products_filter <- sapply(unit_flow_columns, function(col) {
base_case[2, col] == "to_node" &&
base_case[3, col] == "Hydrogen_Kasso" || base_case[3, col] == "E-Methanol_Kasso"
})
end_products_columns <- unit_flow_columns[end_products_filter]
storage_state_columns <- grep("^node_state", column_names, value = TRUE)
columns_comb <- union(end_products_columns, storage_state_columns)
data_subset[, columns_comb] <- lapply(data_subset[, columns_comb, drop = FALSE], as.numeric)
View(data_subset)
end_products_filter
end_products_filter <- sapply(unit_flow_columns, function(col) {
data[2, col] == "to_node" &&
data[3, col] == "Hydrogen_Kasso" || data[3, col] == "E-Methanol_Kasso"
})
end_products_columns <- unit_flow_columns[end_products_filter]
storage_state_columns <- grep("^node_state", column_names, value = TRUE)
columns_comb <- union(end_products_columns, storage_state_columns)
data_subset[, columns_comb] <- lapply(data_subset[, columns_comb, drop = FALSE], as.numeric)
col_names_to_assign <- data[3, columns_comb]
for (col in columns_comb) {
result[[col]] <- data_subset[, col]
}
num_cols_to_rename <- length(columns_comb)
start_index <- ncol(result) - num_cols_to_rename + 1
end_index <- ncol(result)
names(result)[start_index:end_index] <- col_names_to_assign
colnames(result) <- make.unique(colnames(result))
new_df_name <- paste0("result_", variable)
assign(new_df_name, result)
# Choose base or other
variable <- "other"
if (variable == "base") {
data <- base_case
} else if (variable == "other") {
data <- other_case
} else {
stop("Unknown variable value. Please set variable to 'base' or 'other'.")
}
######################
### DATA WRANGLING ###
######################
### Calculate electricity flows
colnames(data) <- make.unique(colnames(data))
column_names <- colnames(data)
unit_flow_columns <- grep("^unit_flow\\.\\d+$", column_names, value = TRUE)
power_kasso_columns <- sapply(unit_flow_columns, function(col) {
data[3, col] == "Power_Kasso"
})
selected_columns <- unit_flow_columns[power_kasso_columns]
data_subset <- data[4:nrow(data), ]
data_subset[, selected_columns] <- lapply(data_subset[, selected_columns, drop = FALSE], as.numeric)
summed_data <- rowSums(data_subset[, selected_columns, drop = FALSE], na.rm = TRUE)
identifier <- data_subset[, 1, drop = FALSE]
result <- cbind(identifier, Summed_Power_Flow = summed_data)
### Add danish power prices to table
power_price_dk <- power_price %>%
filter(PriceArea == "DK1")
result$Power_Price <- power_price_dk$SpotPriceEUR
result$Total_power_costs <- result$Summed_Power_Flow * result$Power_Price
### Add units produced and storages
end_products_filter <- sapply(unit_flow_columns, function(col) {
data[2, col] == "to_node" &&
data[3, col] == "Hydrogen_Kasso" || data[3, col] == "E-Methanol_Kasso"
})
end_products_columns <- unit_flow_columns[end_products_filter]
storage_state_columns <- grep("^node_state", column_names, value = TRUE)
columns_comb <- union(end_products_columns, storage_state_columns)
data_subset[, columns_comb] <- lapply(data_subset[, columns_comb, drop = FALSE], as.numeric)
col_names_to_assign <- data[3, columns_comb]
for (col in columns_comb) {
result[[col]] <- data_subset[, col]
}
num_cols_to_rename <- length(columns_comb)
start_index <- ncol(result) - num_cols_to_rename + 1
end_index <- ncol(result)
names(result)[start_index:end_index] <- col_names_to_assign
colnames(result) <- make.unique(colnames(result))
new_df_name <- paste0("result_", variable)
assign(new_df_name, result)
