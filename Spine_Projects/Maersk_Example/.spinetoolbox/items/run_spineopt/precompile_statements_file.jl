precompile(Tuple{typeof(Base.copy), Base.Dict{Base.PkgId, Module}})
precompile(Tuple{typeof(Base.first), Array{Any, 1}})
precompile(Tuple{typeof(Requires.loadpkg), Base.PkgId})
precompile(Tuple{typeof(Base.:(==)), Int32, Int64})
precompile(Tuple{typeof(Requires.listenpkg), Any, Base.PkgId})
precompile(Tuple{typeof(Requires.loaded), Base.PkgId})
precompile(Tuple{typeof(Requires.callbacks), Base.PkgId})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:throw_error,), Tuple{Bool}}, typeof(Base.Libc.Libdl.dlopen), String})
precompile(Tuple{typeof(Base.convert), Type{Union{Nothing, String}}, String})
precompile(Tuple{typeof(Base.invokelatest), Any})
precompile(Tuple{typeof(JLLWrappers.get_julia_libpaths)})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Base.PkgId, Array{Function, 1}}, Base.PkgId})
precompile(Tuple{typeof(Base.foreach), typeof(Base.invokelatest), Array{Function, 1}})
precompile(Tuple{SpineInterface.var"#371#374"})
precompile(Tuple{typeof(Requires.withpath), Any, String})
precompile(Tuple{typeof(Base.task_local_storage)})
precompile(Tuple{typeof(Base.haskey), Base.IdDict{Any, Any}, Symbol})
precompile(Tuple{typeof(Base.something), String, String, Vararg{String}})
precompile(Tuple{SpineInterface.var"#372#375"})
precompile(Tuple{typeof(Requires.err), Any, Module, String, String, Any})
precompile(Tuple{SpineInterface.var"#373#376"})
precompile(Tuple{typeof(Requires._include_path), String})
precompile(Tuple{typeof(Base.source_path), Nothing})
precompile(Tuple{Type{LineNumberNode}, Int64})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{LineNumberNode, 1}}})
precompile(Tuple{DocStringExtensions.var"#35#36"{typeof(DocStringExtensions.template_hook)}, LineNumberNode, Vararg{Any}})
precompile(Tuple{typeof(DocStringExtensions.template_hook), LineNumberNode, Module, String, Expr})
precompile(Tuple{typeof(Base.getindex), Base.RefValue{Base.CoreLogging.LogLevel}})
precompile(Tuple{typeof(Base.:(>=)), Base.CoreLogging.LogLevel, Base.CoreLogging.LogLevel})
precompile(Tuple{typeof(Base.isassigned), Base.RefValue{Symbol}})
precompile(Tuple{typeof(Base.setindex!), Base.RefValue{Symbol}, Symbol})
precompile(Tuple{typeof(Base.delete!), Base.IdDict{Any, Any}, Any})
precompile(Tuple{typeof(Requires.withnotifications), Any, Vararg{Any}})
precompile(Tuple{typeof(Base.iterate), Array{Base.PkgId, 1}})
precompile(Tuple{typeof(Base.iterate), Array{Base.PkgId, 1}, Int64})
precompile(Tuple{typeof(TimeZones.__init__)})
precompile(Tuple{typeof(Base.:(==)), Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{Base.var"##read#711", Bool, typeof(Base.read), Base.IOStream, Int64})
precompile(Tuple{typeof(Base.:(==)), Array{UInt8, 1}, Base.CodeUnits{UInt8, String}})
precompile(Tuple{typeof(Base.getproperty), TimeZones.TZJFile.TZJTransition, Symbol})
precompile(Tuple{typeof(TimeZones.TZFile.get_designation), Array{UInt8, 1}, UInt8})
precompile(Tuple{Type{TimeZones.FixedTimeZone}, String, Int32, Int16})
precompile(Tuple{TimeZones.TZJFile.var"#2#4"{Dates.DateTime, Array{TimeZones.Transition, 1}, TimeZones.Class}, String})
precompile(Tuple{TimeZones.TZJFile.var"#2#4"{Nothing, Array{TimeZones.Transition, 1}, TimeZones.Class}, String})
precompile(Tuple{Type{Dates.DateFormat{Symbol("yyyy-mm-ddTHH:MM:SS.ssszzz"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}, Dates.DatePart{Char(0x7a000000)}}}}, Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}, Dates.DatePart{Char(0x7a000000)}}, Dates.DateLocale})
precompile(Tuple{typeof(Distributions.TestUtils.__init__)})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{String, String}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{String, String}, Int64, Int64})
precompile(Tuple{typeof(URIs._length_assert)})
precompile(Tuple{typeof(Base.:(+)), Int64, Float64})
precompile(Tuple{typeof(Base.Broadcast._getindex), Tuple{UInt8}, Int64})
precompile(Tuple{Type{NamedTuple{(:upgrade,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{Type{Ptr{UInt16}}, Int64})
precompile(Tuple{typeof(Base.cconvert), Type, Ptr{UInt16}})
precompile(Tuple{typeof(Base.convert), Type{Base.Cwstring}, Ptr{UInt16}})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Base.Cwstring}, Base.Cwstring})
precompile(Tuple{Type{NamedTuple{(:grow, :shared), T} where T<:Tuple}, Tuple{Bool, Bool}})
precompile(Tuple{Type{NamedTuple{(:by, :rev), T} where T<:Tuple}, Tuple{typeof(Base.last), Bool}})
precompile(Tuple{Type{NamedTuple{(:_compact,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:_compact,), Tuple{Bool}}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{Symbol, DataType}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{Symbol, DataType}, Int64, Int64})
precompile(Tuple{typeof(Base.axes), Base.HasLength})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{Symbol, Symbol}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{Symbol, Symbol}, Int64, Int64})
precompile(Tuple{Type{NamedTuple{(:connection_type,), T} where T<:Tuple}, Tuple{Symbol}})
precompile(Tuple{Type{NamedTuple{(:init,), T} where T<:Tuple}, Tuple{Float64}})
precompile(Tuple{Type{DataStructures.Tokens.IntSemiToken}, Int64})
precompile(Tuple{typeof(Base.map), Type{Int64}, Tuple{Int64}})
precompile(Tuple{Type{NamedTuple{(:_strict,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{Type{NamedTuple{(:has_ptdf,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{Type{NamedTuple{(:commodity_physics,), T} where T<:Tuple}, Tuple{Symbol}})
precompile(Tuple{Type{NamedTuple{(:has_state,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{Type{NamedTuple{(:model_type,), T} where T<:Tuple}, Tuple{Symbol}})
precompile(Tuple{Core.Compiler.var"#360#361", Any})
precompile(Tuple{Type{Pair{A, B} where B where A}, String, Bool})
precompile(Tuple{Type{Pair{A, B} where B where A}, String, Float64})
precompile(Tuple{typeof(MathOptInterface._to_param), Pair{String, String}})
precompile(Tuple{Base.var"#51#52", Type, Type})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Pair{Symbol, typeof(SpineOpt.rerun_spineopt_standard!)}, Int64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Pair{Symbol, typeof(SpineOpt.rerun_spineopt_standard!)}, Int64}, Int64, Int64})
precompile(Tuple{typeof(SpineOpt.run_spineopt), String, String})
precompile(Tuple{typeof(Sockets.uv_getaddrinfocb), Ptr{Nothing}, Int32, Ptr{Nothing}})
precompile(Tuple{SpineOpt.var"##_run_spineopt#76", Bool, Nothing, Nothing, Function, Function, Int64, Bool, Bool, String, Int64, Bool, Base.Dict{String, String}, Nothing, typeof(SpineOpt._run_spineopt), String, String})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Dates.DateTime})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:bold, :underline, :blink, :reverse, :hidden, :color), Tuple{Bool, Bool, Bool, Bool, Bool, Symbol}}, typeof(Base.printstyled), Base.PipeEndpoint, String, Vararg{String}})
precompile(Tuple{Base.var"##printstyled#964", Bool, Bool, Bool, Bool, Bool, Symbol, typeof(Base.printstyled), Base.PipeEndpoint, String, Vararg{String}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:bold, :underline, :blink, :reverse, :hidden), NTuple{5, Bool}}, typeof(Base.with_output_color), Function, Symbol, Base.PipeEndpoint, String, Vararg{String}})
precompile(Tuple{Base.var"##with_output_color#963", Bool, Bool, Bool, Bool, Bool, typeof(Base.with_output_color), Function, Symbol, Base.PipeEndpoint, String, Vararg{String}})
precompile(Tuple{typeof(Base.setproperty!), Sockets.TCPSocket, Symbol, Int64})
precompile(Tuple{typeof(JSON.Writer.show_json), Base.GenericIOBuffer{Array{UInt8, 1}}, SpineInterface._TailSerialization, Array{Any, 1}})
precompile(Tuple{typeof(JSON.Writer.show_element), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, SpineInterface._TailSerialization, String})
precompile(Tuple{typeof(JSON.Writer.show_element), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, SpineInterface._TailSerialization, Tuple{}})
precompile(Tuple{typeof(Base.alloc_buf_hook), Sockets.TCPSocket, UInt64})
precompile(Tuple{Base.var"#readcb_specialized#712", Sockets.TCPSocket, Int64, UInt64})
precompile(Tuple{typeof(Base._uv_hook_close), Sockets.TCPSocket})
precompile(Tuple{typeof(SpineInterface._expand_addresses!), String, Array{UInt8, 1}})
precompile(Tuple{typeof(SpineInterface._process_db_answer), String})
precompile(Tuple{typeof(SpineInterface._parse_spinedb_api_version), String})
precompile(Tuple{typeof(JSON.Writer.show_element), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, SpineInterface._TailSerialization, Base.Dict{Any, Any}})
precompile(Tuple{typeof(JSON.Writer.show_element), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, SpineInterface._TailSerialization, Int64})
precompile(Tuple{typeof(JSON.Writer.show_element), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, SpineInterface._TailSerialization, Tuple{String}})
precompile(Tuple{typeof(SpineInterface._expand_addresses!), Base.Dict{String, Any}, Array{UInt8, 1}})
precompile(Tuple{typeof(SpineInterface._expand_addresses!), Array{Any, 1}, Array{UInt8, 1}})
precompile(Tuple{typeof(SpineInterface._expand_addresses!), Int64, Array{UInt8, 1}})
precompile(Tuple{typeof(SpineInterface._process_db_answer), Base.Dict{String, Any}})
precompile(Tuple{typeof(SpineInterface._process_db_answer), Base.Dict{String, Any}, Nothing})
precompile(Tuple{typeof(Base.findnext), SpineOpt.var"#326#330", Array{Any, 1}, Int64})
precompile(Tuple{SpineOpt.var"#326#330", Base.Dict{String, Any}})
precompile(Tuple{typeof(SpineInterface._expand_addresses!), Nothing, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.findnext), SpineOpt.var"#328#332", Array{Any, 1}, Int64})
precompile(Tuple{SpineOpt.var"#328#332", Base.Dict{String, Any}})
precompile(Tuple{typeof(SpineInterface.parse_db_value), Array{UInt8, 1}, Nothing})
precompile(Tuple{typeof(SpineInterface._parse_db_value), Int64, Nothing})
precompile(Tuple{typeof(Base.length), Array{Function, 1}})
precompile(Tuple{typeof(SpineInterface.using_spinedb), Base.Dict{String, Any}, Module})
precompile(Tuple{typeof(Base.vcat), Array{Any, 1}, Array{Any, 1}})
precompile(Tuple{typeof(SpineInterface._members_per_group), Array{Any, 1}})
precompile(Tuple{typeof(SpineInterface._groups_per_member), Array{Any, 1}})
precompile(Tuple{typeof(SpineInterface._full_objects_per_id), Array{Any, 1}, Base.Dict{Any, Any}, Base.Dict{Any, Any}})
precompile(Tuple{SpineInterface.var"#99#102", Array{Any, 1}})
precompile(Tuple{Type{SpineInterface.Object}, String, String})
precompile(Tuple{Type{Pair{A, B} where B where A}, Tuple{String, String}, SpineInterface.Object})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{Tuple{String, String}}, Type{SpineInterface.Object}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Tuple{String, String}, SpineInterface.Object}, SpineInterface.Object, Tuple{String, String}})
precompile(Tuple{Mmap.var"#3#5"{Ptr{Nothing}, Ptr{Nothing}}, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.uvfinalize), Sockets.TCPSocket})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Tuple{String, String}, SpineInterface.Object}, Base.Generator{Array{Any, 1}, SpineInterface.var"#99#102"}, Int64})
precompile(Tuple{typeof(Base._iterate), Base.Dict{Tuple{String, String}, SpineInterface.Object}, Int64})
precompile(Tuple{typeof(Base.get), Base.Dict{Any, Any}, Tuple{String, String}, Tuple{}})
precompile(Tuple{typeof(Base.vect), SpineInterface.Object})
precompile(Tuple{typeof(Base.getproperty), SpineInterface.Object, Symbol})
precompile(Tuple{typeof(Base.append!), Array{SpineInterface.Object, 1}, Array{SpineInterface.Object, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineInterface.var"#101#104"{Base.Dict{Tuple{String, String}, SpineInterface.Object}}, Tuple{}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{}, SpineInterface.var"#101#104"{Base.Dict{Tuple{String, String}, SpineInterface.Object}}}})
precompile(Tuple{typeof(Base.append!), Array{SpineInterface.Object, 1}, Array{Union{}, 1}})
precompile(Tuple{typeof(SpineInterface._entities_per_class), Array{Any, 1}})
precompile(Tuple{typeof(Base.get!), Base.Dict{Any, Any}, String, Array{Any, 1}})
precompile(Tuple{typeof(SpineInterface._parameter_definitions_per_class), Array{Any, 1}})
precompile(Tuple{typeof(SpineInterface._parameter_values_per_entity), Array{Any, 1}})
precompile(Tuple{typeof(SpineInterface._obj_args_per_class), Array{Any, 1}, Base.Dict{Any, Any}, Base.Dict{Tuple{String, String}, SpineInterface.Object}, Base.Dict{Any, Any}, Base.Dict{Any, Any}})
precompile(Tuple{SpineInterface.var"#127#128"{Base.Dict{Any, Any}, Base.Dict{Tuple{String, String}, SpineInterface.Object}, Base.Dict{Any, Any}, Base.Dict{Any, Any}}, Array{Any, 1}})
precompile(Tuple{typeof(Base.get), Base.Dict{Any, Any}, String, Tuple{}})
precompile(Tuple{typeof(SpineInterface._obj_and_vals), Tuple{}, Base.Dict{Tuple{String, String}, SpineInterface.Object}, Array{Any, 1}, Base.Dict{Any, Any}})
precompile(Tuple{typeof(SpineInterface._default_parameter_values), Array{Any, 1}})
precompile(Tuple{SpineInterface.var"#107#108", Array{Any, 1}})
precompile(Tuple{typeof(SpineInterface._try_parameter_value_from_db), Float64, String})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, SpineInterface.ParameterValue{Float64}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{Symbol}, Type{SpineInterface.ParameterValue{Float64}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, SpineInterface.ParameterValue{Float64}}, SpineInterface.ParameterValue{Float64}, Symbol})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, SpineInterface.ParameterValue{Float64}}, Base.Generator{Array{Any, 1}, SpineInterface.var"#107#108"}, Int64})
precompile(Tuple{typeof(SpineInterface._try_parameter_value_from_db), String, String})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, SpineInterface.ParameterValue{Symbol}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Symbol, SpineInterface.ParameterValue{Float64}}, Type{Symbol}, Type{SpineInterface.ParameterValue{T} where T}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Symbol, SpineInterface.ParameterValue{T} where T}, Base.Dict{Symbol, SpineInterface.ParameterValue{Float64}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, SpineInterface.ParameterValue{T} where T}, SpineInterface.ParameterValue{Symbol}, Symbol})
precompile(Tuple{typeof(Base._promote_typesubtract), Any})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, SpineInterface.ParameterValue{T} where T}, Base.Generator{Array{Any, 1}, SpineInterface.var"#107#108"}, Int64})
precompile(Tuple{typeof(SpineInterface._try_parameter_value_from_db), Nothing, String})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, SpineInterface.ParameterValue{Nothing}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, SpineInterface.ParameterValue{T} where T}, SpineInterface.ParameterValue{Nothing}, Symbol})
precompile(Tuple{typeof(SpineInterface._try_parameter_value_from_db), Bool, String})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, SpineInterface.ParameterValue{Bool}})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, Tuple{Array{Union{}, 1}, Base.Dict{Any, Any}, Base.Dict{Symbol, SpineInterface.ParameterValue{T} where T}}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{Symbol}, Type{Tuple{Array{Union{}, 1}, Base.Dict{Any, Any}, Base.Dict{Symbol, SpineInterface.ParameterValue{T} where T}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Tuple{Array{Union{}, 1}, Base.Dict{Any, Any}, Base.Dict{Symbol, SpineInterface.ParameterValue{T} where T}}}, Tuple{Array{Union{}, 1}, Base.Dict{Any, Any}, Base.Dict{Symbol, SpineInterface.ParameterValue{T} where T}}, Symbol})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Tuple{Array{Union{}, 1}, Base.Dict{Any, Any}, Base.Dict{Symbol, SpineInterface.ParameterValue{T} where T}}}, Base.Generator{Array{Any, 1}, SpineInterface.var"#127#128"{Base.Dict{Any, Any}, Base.Dict{Tuple{String, String}, SpineInterface.Object}, Base.Dict{Any, Any}, Base.Dict{Any, Any}}}, Int64})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{Symbol}, Type{SpineInterface.ParameterValue{Nothing}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, SpineInterface.ParameterValue{Nothing}}, SpineInterface.ParameterValue{Nothing}, Symbol})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, SpineInterface.ParameterValue{Nothing}}, Base.Generator{Array{Any, 1}, SpineInterface.var"#107#108"}, Int64})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, SpineInterface.ParameterValue{Int64}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Symbol, SpineInterface.ParameterValue{Nothing}}, Type{Symbol}, Type{SpineInterface.ParameterValue{T} where T}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Symbol, SpineInterface.ParameterValue{T} where T}, Base.Dict{Symbol, SpineInterface.ParameterValue{Nothing}}})
precompile(Tuple{typeof(SpineInterface._try_parameter_value_from_db), Int64, String})
precompile(Tuple{typeof(SpineInterface._obj_and_vals), Tuple{}, Base.Dict{Tuple{String, String}, SpineInterface.Object}, Tuple{}, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Base._iterator_upper_bound), Base.Generator{Tuple{}, SpineInterface.var"#107#108"}})
precompile(Tuple{typeof(SpineInterface._default_parameter_values), Tuple{}})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, Tuple{Array{Union{}, 1}, Base.Dict{Any, Any}, Base.Dict{Any, Any}}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Symbol, Tuple{Array{Union{}, 1}, Base.Dict{Any, Any}, Base.Dict{Symbol, SpineInterface.ParameterValue{T} where T}}}, Type{Symbol}, Type{Tuple{Array{Union{}, 1}, Base.Dict{Any, Any}, Base.Dict{K, V} where V where K}}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Symbol, Tuple{Array{Union{}, 1}, Base.Dict{Any, Any}, Base.Dict{K, V} where V where K}}, Base.Dict{Symbol, Tuple{Array{Union{}, 1}, Base.Dict{Any, Any}, Base.Dict{Symbol, SpineInterface.ParameterValue{T} where T}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Tuple{Array{Union{}, 1}, Base.Dict{Any, Any}, Base.Dict{K, V} where V where K}}, Tuple{Array{Union{}, 1}, Base.Dict{Any, Any}, Base.Dict{Any, Any}}, Symbol})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Tuple{Array{Union{}, 1}, Base.Dict{Any, Any}, Base.Dict{K, V} where V where K}}, Base.Generator{Array{Any, 1}, SpineInterface.var"#127#128"{Base.Dict{Any, Any}, Base.Dict{Tuple{String, String}, SpineInterface.Object}, Base.Dict{Any, Any}, Base.Dict{Any, Any}}}, Int64})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{Symbol}, Type{SpineInterface.ParameterValue{Symbol}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, SpineInterface.ParameterValue{Symbol}}, SpineInterface.ParameterValue{Symbol}, Symbol})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, SpineInterface.ParameterValue{Symbol}}, Base.Generator{Array{Any, 1}, SpineInterface.var"#107#108"}, Int64})
precompile(Tuple{typeof(Base.empty), Base.Dict{Symbol, SpineInterface.ParameterValue{Symbol}}, Type{Symbol}, Type{SpineInterface.ParameterValue{T} where T}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Symbol, SpineInterface.ParameterValue{T} where T}, Base.Dict{Symbol, SpineInterface.ParameterValue{Symbol}}})
precompile(Tuple{typeof(SpineInterface._try_parameter_value_from_db), Base.Dict{String, Any}, String})
precompile(Tuple{typeof(SpineInterface._parse_db_value), Base.Dict{String, Any}, String})
precompile(Tuple{Dates.var"##s971#36", Vararg{Any, 8}})
precompile(Tuple{typeof(Dates.character_codes), Type{Dates.DateFormat{Symbol("yyyy-mm-ddTHH:MM:SS.s"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}}}}})
precompile(Tuple{typeof(Base.first), Core.SimpleVector})
precompile(Tuple{typeof(Base.push!), Array{Char, 1}, Char})
precompile(Tuple{typeof(Base._array_for), Type{Symbol}, NTuple{8, DataType}, Base.HasLength})
precompile(Tuple{Type{Base.LinearIndices{N, R} where R<:Tuple{Vararg{Base.AbstractUnitRange{Int64}, N}} where N}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.setindex!), Array{Symbol, 1}, Symbol, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Dates.var"#37#38", NTuple{8, DataType}})
precompile(Tuple{Type{Tuple}, Base.Generator{NTuple{8, DataType}, Dates.var"#37#38"}})
precompile(Tuple{typeof(Base._array_for), Type{Int64}, Base.HasLength, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{NTuple{8, DataType}, Dates.var"#37#38"}, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Int64, 1}, Dates.AMPM, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Any, 1}, Base.Generator{NTuple{8, DataType}, Dates.var"#37#38"}, Int64, Int64})
precompile(Tuple{typeof(Base.Iterators.zip), Array{Symbol, 1}, Vararg{Any}})
precompile(Tuple{Type{Base.Iterators.Zip{Is} where Is<:Tuple}, Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Int64, Dates.AMPM}}})
precompile(Tuple{Base.Iterators.var"#5#6"{Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Int64, Dates.AMPM}}}, Int64})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Base.HasShape{1}, 1}}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Base.IteratorSize, 1}}})
precompile(Tuple{Type{Base.IteratorSize}, Base.Iterators.Zip{Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Int64, Dates.AMPM}}}})
precompile(Tuple{typeof(Base._array_for), Type{Expr}, Base.Iterators.Zip{Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Int64, Dates.AMPM}}}, Base.HasLength})
precompile(Tuple{Type{Base.LinearIndices{N, R} where R<:Tuple{Vararg{Base.AbstractUnitRange{Int64}, N}} where N}, Array{Expr, 1}})
precompile(Tuple{typeof(Base.map), Base.Iterators.var"#3#4", Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Int64, Dates.AMPM}}})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Int64, Dates.AMPM}}, Tuple{Tuple{}, Tuple{}}})
precompile(Tuple{typeof(Base.setindex!), Array{Expr, 1}, Expr, Int64})
precompile(Tuple{typeof(Base.map), typeof(tuple), Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Int64, Dates.AMPM}}, Tuple{Tuple{Int64}, Tuple{Int64}}})
precompile(Tuple{Dates.var"##s972#33", Vararg{Any, 6}})
precompile(Tuple{typeof(Dates._directives), Type{Dates.DateFormat{Symbol("yyyy-mm-ddTHH:MM:SS.s"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}}}}})
precompile(Tuple{typeof(Base._array_for), Type{Int64}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Array{Type, 1}, Dates.var"#34#35"}, Int64})
precompile(Tuple{Type{Base.Iterators.Zip{Is} where Is<:Tuple}, Tuple{Array{Symbol, 1}, NTuple{7, Int64}}})
precompile(Tuple{typeof(Base.map), Base.Iterators.var"#3#4", Tuple{Array{Symbol, 1}, NTuple{7, Int64}}})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Array{Symbol, 1}, NTuple{7, Int64}}, Tuple{Tuple{}, Tuple{}}})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Array{Symbol, 1}, NTuple{7, Int64}}, Tuple{Tuple{Int64}, Tuple{Int64}}})
precompile(Tuple{typeof(Base.length), Core.SimpleVector})
precompile(Tuple{typeof(Dates.character_codes), Type{Dates.DateFormat{Symbol("yyyy-mm-dd HH:MM:SS.s"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}}}}})
precompile(Tuple{typeof(Dates._directives), Type{Dates.DateFormat{Symbol("yyyy-mm-dd HH:MM:SS.s"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}}}}})
precompile(Tuple{typeof(SpineInterface._parse_db_value), Base.Dict{String, Any}, Base.Val{:date_time}})
precompile(Tuple{typeof(SpineInterface.parameter_value), Dates.DateTime})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, SpineInterface.ParameterValue{Dates.DateTime}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, SpineInterface.ParameterValue{T} where T}, SpineInterface.ParameterValue{Dates.DateTime}, Symbol})
precompile(Tuple{Base.var"##s92#239", Vararg{Any, 5}})
precompile(Tuple{typeof(Base.getproperty), Pair{Symbol, String}, Symbol})
precompile(Tuple{Type{NamedTuple{(:unsafe,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(SpineInterface._parse_db_value), Base.Dict{String, Any}, Base.Val{:map}})
precompile(Tuple{typeof(SpineInterface._map_inds_and_vals), Array{Any, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.Generator{Array{Any, 1}, SpineInterface.var"#299#301"}, Base.Val{:str}})
precompile(Tuple{SpineInterface.var"#299#301", Array{Any, 1}})
precompile(Tuple{typeof(Base._array_for), Type{String}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{String, 1}, String, Base.Generator{Array{Any, 1}, SpineInterface.var"#299#301"}, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(SpineInterface._parse_inner_value), Tuple{Array{String, 1}, Base.RefValue{Base.Val{:str}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(SpineInterface._parse_inner_value), Tuple{Array{String, 1}, Base.RefValue{Base.Val{:str}}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.Generator{Array{Any, 1}, SpineInterface.var"#300#302"}})
precompile(Tuple{SpineInterface.var"#300#302", Array{Any, 1}})
precompile(Tuple{typeof(Base._array_for), Type{Base.Dict{String, Any}}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Dict{String, Any}, 1}, Base.Dict{String, Any}, Base.Generator{Array{Any, 1}, SpineInterface.var"#300#302"}, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(SpineInterface._parse_db_value), Tuple{Array{Base.Dict{String, Any}, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(SpineInterface._parse_db_value), Tuple{Array{Base.Dict{String, Any}, 1}}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{String, 1}, String, Base.Generator{Array{Any, 1}, SpineInterface.var"#300#302"}, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{String, 1}, Float64, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Any, 1}, Base.Generator{Array{Any, 1}, SpineInterface.var"#300#302"}, Int64, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(SpineInterface._parse_db_value), Tuple{Array{Any, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(SpineInterface._parse_db_value), Tuple{Array{Any, 1}}}})
precompile(Tuple{typeof(SpineInterface._parse_db_value), String})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SpineInterface._parse_db_value), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{String}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{String, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SpineInterface._parse_db_value), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(SpineInterface._parse_db_value), Float64})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SpineInterface._parse_db_value), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{Any}})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{Any, 1}, Array{String, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SpineInterface._parse_db_value), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Float64, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{Type{SpineInterface.Map{K, V} where V where K}, Array{String, 1}, Array{Any, 1}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SpineInterface._parse_db_value), Tuple{Base.Broadcast.Extruded{Array{Base.Dict{String, Any}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{SpineInterface.Map{Symbol, Any}}})
precompile(Tuple{typeof(Base.setindex!), Array{SpineInterface.Map{Symbol, Any}, 1}, SpineInterface.Map{Symbol, Any}, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{SpineInterface.Map{Symbol, Any}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SpineInterface._parse_db_value), Tuple{Base.Broadcast.Extruded{Array{Base.Dict{String, Any}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base._array_for), Type{Float64}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 1}, Float64, Base.Generator{Array{Any, 1}, SpineInterface.var"#300#302"}, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(SpineInterface._parse_db_value), Tuple{Array{Float64, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(SpineInterface._parse_db_value), Tuple{Array{Float64, 1}}}})
precompile(Tuple{Type{SpineInterface.Map{K, V} where V where K}, Array{String, 1}, Array{Real, 1}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SpineInterface._parse_db_value), Tuple{Base.Broadcast.Extruded{Array{Base.Dict{String, Any}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{SpineInterface.Map{Symbol, V} where V}})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{SpineInterface.Map{Symbol, V} where V, 1}, Array{SpineInterface.Map{Symbol, Any}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SpineInterface._parse_db_value), Tuple{Base.Broadcast.Extruded{Array{Base.Dict{String, Any}, 1}, Tuple{Bool}, Tuple{Int64}}}}, SpineInterface.Map{Symbol, Real}, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{SpineInterface.Map{Symbol, V} where V, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SpineInterface._parse_db_value), Tuple{Base.Broadcast.Extruded{Array{Base.Dict{String, Any}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{Type{SpineInterface.Map{K, V} where V where K}, Array{String, 1}, Array{Float64, 1}})
precompile(Tuple{Type{SpineInterface.Map{K, V} where V where K}, Array{String, 1}, Array{SpineInterface.Map{Symbol, V} where V, 1}})
precompile(Tuple{typeof(SpineInterface.parameter_value), SpineInterface.Map{Symbol, SpineInterface.Map{Symbol, V} where V}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(SpineInterface.parameter_value), Tuple{Array{SpineInterface.Map{Symbol, V} where V, 1}}}})
precompile(Tuple{typeof(SpineInterface.parameter_value), SpineInterface.Map{Symbol, Float64}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SpineInterface.parameter_value), Tuple{Base.Broadcast.Extruded{Array{SpineInterface.Map{Symbol, V} where V, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{SpineInterface.ParameterValue{SpineInterface.Map{Symbol, SpineInterface.ParameterValue{Float64}}}}})
precompile(Tuple{typeof(Base.setindex!), Array{SpineInterface.ParameterValue{SpineInterface.Map{Symbol, SpineInterface.ParameterValue{Float64}}}, 1}, SpineInterface.ParameterValue{SpineInterface.Map{Symbol, SpineInterface.ParameterValue{Float64}}}, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{SpineInterface.ParameterValue{SpineInterface.Map{Symbol, SpineInterface.ParameterValue{Float64}}}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SpineInterface.parameter_value), Tuple{Base.Broadcast.Extruded{Array{SpineInterface.Map{Symbol, V} where V, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.promote_typejoin), Any, Any})
precompile(Tuple{typeof(SpineInterface.parameter_value), SpineInterface.Map{Symbol, Real}})
precompile(Tuple{typeof(SpineInterface.parameter_value), Int64})
precompile(Tuple{typeof(Base.setindex!), Array{SpineInterface.ParameterValue{Int64}, 1}, SpineInterface.ParameterValue{Int64}, Int64})
precompile(Tuple{typeof(SpineInterface.parameter_value), Float64})
precompile(Tuple{Type{SpineInterface.Map{K, V} where V where K}, Array{Symbol, 1}, Array{SpineInterface.ParameterValue{T} where T, 1}})
precompile(Tuple{Type{SpineInterface.ParameterValue{T} where T}, SpineInterface.Map{Symbol, SpineInterface.ParameterValue{T} where T}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SpineInterface.parameter_value), Tuple{Base.Broadcast.Extruded{Array{SpineInterface.Map{Symbol, V} where V, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{SpineInterface.ParameterValue{T} where T}})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{SpineInterface.ParameterValue{T} where T, 1}, Array{SpineInterface.ParameterValue{SpineInterface.Map{Symbol, SpineInterface.ParameterValue{Float64}}}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SpineInterface.parameter_value), Tuple{Base.Broadcast.Extruded{Array{SpineInterface.Map{Symbol, V} where V, 1}, Tuple{Bool}, Tuple{Int64}}}}, SpineInterface.ParameterValue{SpineInterface.Map{Symbol, SpineInterface.ParameterValue{T} where T}}, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(SpineInterface.parameter_value), SpineInterface.Map{Symbol, Any}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SpineInterface.parameter_value), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{SpineInterface.ParameterValue{Float64}}})
precompile(Tuple{typeof(Base.setindex!), Array{SpineInterface.ParameterValue{Float64}, 1}, SpineInterface.ParameterValue{Float64}, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{SpineInterface.ParameterValue{Float64}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SpineInterface.parameter_value), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(SpineInterface.parameter_value), String})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SpineInterface.parameter_value), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{SpineInterface.ParameterValue{T} where T}})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{SpineInterface.ParameterValue{T} where T, 1}, Array{SpineInterface.ParameterValue{Float64}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SpineInterface.parameter_value), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, SpineInterface.ParameterValue{Symbol}, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{SpineInterface.ParameterValue{T} where T, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SpineInterface.parameter_value), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, SpineInterface.ParameterValue{SpineInterface.Map{Symbol, SpineInterface.ParameterValue{T} where T}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, SpineInterface.ParameterValue{T} where T}, SpineInterface.ParameterValue{SpineInterface.Map{Symbol, SpineInterface.ParameterValue{T} where T}}, Symbol})
precompile(Tuple{Type{SpineInterface.Map{K, V} where V where K}, Array{String, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{SpineInterface.Map{Symbol, V} where V, 1}, Array{SpineInterface.Map{Symbol, Any}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SpineInterface._parse_db_value), Tuple{Base.Broadcast.Extruded{Array{Base.Dict{String, Any}, 1}, Tuple{Bool}, Tuple{Int64}}}}, SpineInterface.Map{Symbol, Int64}, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(SpineInterface.parameter_value), SpineInterface.Map{Symbol, Int64}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SpineInterface.parameter_value), Tuple{Base.Broadcast.Extruded{Array{SpineInterface.Map{Symbol, V} where V, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{SpineInterface.ParameterValue{SpineInterface.Map{Symbol, SpineInterface.ParameterValue{Int64}}}}})
precompile(Tuple{typeof(Base.setindex!), Array{SpineInterface.ParameterValue{SpineInterface.Map{Symbol, SpineInterface.ParameterValue{Int64}}}, 1}, SpineInterface.ParameterValue{SpineInterface.Map{Symbol, SpineInterface.ParameterValue{Int64}}}, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{SpineInterface.ParameterValue{SpineInterface.Map{Symbol, SpineInterface.ParameterValue{Int64}}}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SpineInterface.parameter_value), Tuple{Base.Broadcast.Extruded{Array{SpineInterface.Map{Symbol, V} where V, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SpineInterface.parameter_value), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{SpineInterface.ParameterValue{Symbol}}})
precompile(Tuple{typeof(Base.setindex!), Array{SpineInterface.ParameterValue{Symbol}, 1}, SpineInterface.ParameterValue{Symbol}, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{SpineInterface.ParameterValue{Symbol}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SpineInterface.parameter_value), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{SpineInterface.ParameterValue{T} where T, 1}, Array{SpineInterface.ParameterValue{Symbol}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SpineInterface.parameter_value), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, SpineInterface.ParameterValue{Float64}, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{SpineInterface.ParameterValue{T} where T, 1}, Array{SpineInterface.ParameterValue{SpineInterface.Map{Symbol, SpineInterface.ParameterValue{Int64}}}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SpineInterface.parameter_value), Tuple{Base.Broadcast.Extruded{Array{SpineInterface.Map{Symbol, V} where V, 1}, Tuple{Bool}, Tuple{Int64}}}}, SpineInterface.ParameterValue{SpineInterface.Map{Symbol, SpineInterface.ParameterValue{T} where T}}, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(SpineInterface._obj_and_vals), Array{Any, 1}, Base.Dict{Tuple{String, String}, SpineInterface.Object}, Array{Any, 1}, Base.Dict{Any, Any}})
precompile(Tuple{SpineInterface.var"#115#117"{Base.Dict{Tuple{String, String}, SpineInterface.Object}}, Array{Any, 1}})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Tuple{String, String}, SpineInterface.Object}, String, String})
precompile(Tuple{SpineInterface.var"#111#114"{String, Base.Dict{Any, Any}}, Array{Any, 1}})
precompile(Tuple{typeof(Base.get), Base.Dict{Any, Any}, Tuple{String, String, String}, Nothing})
precompile(Tuple{Type{Pair{A, B} where B where A}, SpineInterface.Object, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{SpineInterface.Object}, Type{Base.Dict{Any, Any}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{SpineInterface.Object, Base.Dict{Any, Any}}, Base.Generator{Array{SpineInterface.Object, 1}, SpineInterface.var"#116#118"{Array{Any, 1}, Base.Dict{Any, Any}}}, Int64})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{Symbol}, Type{SpineInterface.ParameterValue{Bool}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, SpineInterface.ParameterValue{Bool}}, Base.Generator{Array{Any, 1}, SpineInterface.var"#107#108"}, Int64})
precompile(Tuple{typeof(Base.empty), Base.Dict{Symbol, SpineInterface.ParameterValue{Bool}}, Type{Symbol}, Type{SpineInterface.ParameterValue{T} where T}})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, Tuple{Array{SpineInterface.Object, 1}, Base.Dict{SpineInterface.Object, Base.Dict{Any, Any}}, Base.Dict{Symbol, SpineInterface.ParameterValue{T} where T}}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Symbol, Tuple{Array{Union{}, 1}, Base.Dict{Any, Any}, Base.Dict{K, V} where V where K}}, Type{Symbol}, Type{Tuple{Array{T, 1} where T, Base.Dict{K, V} where V where K, Base.Dict{K, V} where V where K}}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Symbol, Tuple{Array{T, 1} where T, Base.Dict{K, V} where V where K, Base.Dict{K, V} where V where K}}, Base.Dict{Symbol, Tuple{Array{Union{}, 1}, Base.Dict{Any, Any}, Base.Dict{K, V} where V where K}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Tuple{Array{T, 1} where T, Base.Dict{K, V} where V where K, Base.Dict{K, V} where V where K}}, Tuple{Array{Union{}, 1}, Base.Dict{Any, Any}, Base.Dict{Symbol, SpineInterface.ParameterValue{T} where T}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Tuple{Array{T, 1} where T, Base.Dict{K, V} where V where K, Base.Dict{K, V} where V where K}}, Tuple{Array{Union{}, 1}, Base.Dict{Any, Any}, Base.Dict{Any, Any}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Tuple{Array{T, 1} where T, Base.Dict{K, V} where V where K, Base.Dict{K, V} where V where K}}, Tuple{Array{SpineInterface.Object, 1}, Base.Dict{SpineInterface.Object, Base.Dict{Any, Any}}, Base.Dict{Symbol, SpineInterface.ParameterValue{T} where T}}, Symbol})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Tuple{Array{T, 1} where T, Base.Dict{K, V} where V where K, Base.Dict{K, V} where V where K}}, Base.Generator{Array{Any, 1}, SpineInterface.var"#127#128"{Base.Dict{Any, Any}, Base.Dict{Tuple{String, String}, SpineInterface.Object}, Base.Dict{Any, Any}, Base.Dict{Any, Any}}}, Int64})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{Symbol}, Type{SpineInterface.ParameterValue{Int64}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, SpineInterface.ParameterValue{Int64}}, Base.Generator{Array{Any, 1}, SpineInterface.var"#107#108"}, Int64})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, Tuple{Array{Union{}, 1}, Base.Dict{Any, Any}, Base.Dict{Symbol, SpineInterface.ParameterValue{Int64}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Tuple{Array{T, 1} where T, Base.Dict{K, V} where V where K, Base.Dict{K, V} where V where K}}, Tuple{Array{Union{}, 1}, Base.Dict{Any, Any}, Base.Dict{Symbol, SpineInterface.ParameterValue{Int64}}}, Symbol})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, Tuple{Array{Union{}, 1}, Base.Dict{Any, Any}, Base.Dict{Symbol, SpineInterface.ParameterValue{Bool}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Tuple{Array{T, 1} where T, Base.Dict{K, V} where V where K, Base.Dict{K, V} where V where K}}, Tuple{Array{Union{}, 1}, Base.Dict{Any, Any}, Base.Dict{Symbol, SpineInterface.ParameterValue{Bool}}}, Symbol})
precompile(Tuple{typeof(SpineInterface._parse_db_value), Base.Dict{String, Any}, Base.Val{:duration}})
precompile(Tuple{typeof(SpineInterface.parameter_value), Dates.Hour})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, SpineInterface.ParameterValue{Dates.Hour}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, SpineInterface.ParameterValue{T} where T}, SpineInterface.ParameterValue{Dates.Hour}, Symbol})
precompile(Tuple{typeof(SpineInterface._rel_args_per_class), Array{Any, 1}, Base.Dict{Any, Any}, Base.Dict{Tuple{String, String}, SpineInterface.Object}, Base.Dict{Any, Any}, Base.Dict{Any, Any}})
precompile(Tuple{SpineInterface.var"#129#130"{Base.Dict{Any, Any}, Base.Dict{Tuple{String, String}, SpineInterface.Object}, Base.Dict{Any, Any}, Base.Dict{Any, Any}}, Array{Any, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Type, Array{Any, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, Type{Symbol}, Tuple{Array{Any, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{Symbol}, Tuple{Array{Any, 1}}}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, Type{Symbol}, Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{Symbol}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Symbol, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, Type{Symbol}, Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(SpineInterface._rels_and_vals), Array{Any, 1}, Tuple{}, Base.Dict{Tuple{String, String}, SpineInterface.Object}, Array{Any, 1}, Base.Dict{Any, Any}})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, Tuple{Array{Symbol, 1}, Array{Union{}, 1}, Base.Dict{Any, Any}, Base.Dict{Symbol, SpineInterface.ParameterValue{T} where T}}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{Symbol}, Type{Tuple{Array{Symbol, 1}, Array{Union{}, 1}, Base.Dict{Any, Any}, Base.Dict{Symbol, SpineInterface.ParameterValue{T} where T}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Tuple{Array{Symbol, 1}, Array{Union{}, 1}, Base.Dict{Any, Any}, Base.Dict{Symbol, SpineInterface.ParameterValue{T} where T}}}, Tuple{Array{Symbol, 1}, Array{Union{}, 1}, Base.Dict{Any, Any}, Base.Dict{Symbol, SpineInterface.ParameterValue{T} where T}}, Symbol})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Tuple{Array{Symbol, 1}, Array{Union{}, 1}, Base.Dict{Any, Any}, Base.Dict{Symbol, SpineInterface.ParameterValue{T} where T}}}, Base.Generator{Array{Any, 1}, SpineInterface.var"#129#130"{Base.Dict{Any, Any}, Base.Dict{Tuple{String, String}, SpineInterface.Object}, Base.Dict{Any, Any}, Base.Dict{Any, Any}}}, Int64})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, Tuple{Array{Symbol, 1}, Array{Union{}, 1}, Base.Dict{Any, Any}, Base.Dict{Symbol, SpineInterface.ParameterValue{Int64}}}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Symbol, Tuple{Array{Symbol, 1}, Array{Union{}, 1}, Base.Dict{Any, Any}, Base.Dict{Symbol, SpineInterface.ParameterValue{T} where T}}}, Type{Symbol}, Type{Tuple{Array{Symbol, 1}, Array{Union{}, 1}, Base.Dict{Any, Any}, Base.Dict{Symbol, V} where V}}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Symbol, Tuple{Array{Symbol, 1}, Array{Union{}, 1}, Base.Dict{Any, Any}, Base.Dict{Symbol, V} where V}}, Base.Dict{Symbol, Tuple{Array{Symbol, 1}, Array{Union{}, 1}, Base.Dict{Any, Any}, Base.Dict{Symbol, SpineInterface.ParameterValue{T} where T}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Tuple{Array{Symbol, 1}, Array{Union{}, 1}, Base.Dict{Any, Any}, Base.Dict{Symbol, V} where V}}, Tuple{Array{Symbol, 1}, Array{Union{}, 1}, Base.Dict{Any, Any}, Base.Dict{Symbol, SpineInterface.ParameterValue{Int64}}}, Symbol})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Tuple{Array{Symbol, 1}, Array{Union{}, 1}, Base.Dict{Any, Any}, Base.Dict{Symbol, V} where V}}, Base.Generator{Array{Any, 1}, SpineInterface.var"#129#130"{Base.Dict{Any, Any}, Base.Dict{Tuple{String, String}, SpineInterface.Object}, Base.Dict{Any, Any}, Base.Dict{Any, Any}}}, Int64})
precompile(Tuple{typeof(SpineInterface._rels_and_vals), Array{Any, 1}, Tuple{}, Base.Dict{Tuple{String, String}, SpineInterface.Object}, Tuple{}, Base.Dict{Any, Any}})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, Tuple{Array{Symbol, 1}, Array{Union{}, 1}, Base.Dict{Any, Any}, Base.Dict{Any, Any}}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Symbol, Tuple{Array{Symbol, 1}, Array{Union{}, 1}, Base.Dict{Any, Any}, Base.Dict{Symbol, V} where V}}, Type{Symbol}, Type{Tuple{Array{Symbol, 1}, Array{Union{}, 1}, Base.Dict{Any, Any}, Base.Dict{K, V} where V where K}}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Symbol, Tuple{Array{Symbol, 1}, Array{Union{}, 1}, Base.Dict{Any, Any}, Base.Dict{K, V} where V where K}}, Base.Dict{Symbol, Tuple{Array{Symbol, 1}, Array{Union{}, 1}, Base.Dict{Any, Any}, Base.Dict{Symbol, V} where V}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Tuple{Array{Symbol, 1}, Array{Union{}, 1}, Base.Dict{Any, Any}, Base.Dict{K, V} where V where K}}, Tuple{Array{Symbol, 1}, Array{Union{}, 1}, Base.Dict{Any, Any}, Base.Dict{Symbol, SpineInterface.ParameterValue{T} where T}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Tuple{Array{Symbol, 1}, Array{Union{}, 1}, Base.Dict{Any, Any}, Base.Dict{K, V} where V where K}}, Tuple{Array{Symbol, 1}, Array{Union{}, 1}, Base.Dict{Any, Any}, Base.Dict{Symbol, SpineInterface.ParameterValue{Int64}}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Tuple{Array{Symbol, 1}, Array{Union{}, 1}, Base.Dict{Any, Any}, Base.Dict{K, V} where V where K}}, Tuple{Array{Symbol, 1}, Array{Union{}, 1}, Base.Dict{Any, Any}, Base.Dict{Any, Any}}, Symbol})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Tuple{Array{Symbol, 1}, Array{Union{}, 1}, Base.Dict{Any, Any}, Base.Dict{K, V} where V where K}}, Base.Generator{Array{Any, 1}, SpineInterface.var"#129#130"{Base.Dict{Any, Any}, Base.Dict{Tuple{String, String}, SpineInterface.Object}, Base.Dict{Any, Any}, Base.Dict{Any, Any}}}, Int64})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{Symbol}, Type{SpineInterface.ParameterValue{Dates.Hour}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, SpineInterface.ParameterValue{Dates.Hour}}, SpineInterface.ParameterValue{Dates.Hour}, Symbol})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, SpineInterface.ParameterValue{Dates.Hour}}, Base.Generator{Array{Any, 1}, SpineInterface.var"#107#108"}, Int64})
precompile(Tuple{typeof(Base.empty), Base.Dict{Symbol, SpineInterface.ParameterValue{Dates.Hour}}, Type{Symbol}, Type{SpineInterface.ParameterValue{T} where T}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Symbol, SpineInterface.ParameterValue{T} where T}, Base.Dict{Symbol, SpineInterface.ParameterValue{Dates.Hour}}})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, Tuple{Array{Symbol, 1}, Array{Union{}, 1}, Base.Dict{Any, Any}, Base.Dict{Symbol, SpineInterface.ParameterValue{Bool}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Tuple{Array{Symbol, 1}, Array{Union{}, 1}, Base.Dict{Any, Any}, Base.Dict{K, V} where V where K}}, Tuple{Array{Symbol, 1}, Array{Union{}, 1}, Base.Dict{Any, Any}, Base.Dict{Symbol, SpineInterface.ParameterValue{Bool}}}, Symbol})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, Tuple{Array{Symbol, 1}, Array{Union{}, 1}, Base.Dict{Any, Any}, Base.Dict{Symbol, SpineInterface.ParameterValue{Nothing}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Tuple{Array{Symbol, 1}, Array{Union{}, 1}, Base.Dict{Any, Any}, Base.Dict{K, V} where V where K}}, Tuple{Array{Symbol, 1}, Array{Union{}, 1}, Base.Dict{Any, Any}, Base.Dict{Symbol, SpineInterface.ParameterValue{Nothing}}}, Symbol})
precompile(Tuple{typeof(SpineInterface._class_names_per_parameter), Array{Any, 1}, Array{Any, 1}, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Base.get!), Base.Dict{Any, Any}, Symbol, Array{Tuple{Symbol, Int64}, 1}})
precompile(Tuple{typeof(Base.push!), Array{Tuple{Symbol, Int64}, 1}, Tuple{Symbol, Int64}})
precompile(Tuple{typeof(Base.hashindex), Symbol, Int64})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:scratch,), Tuple{Array{Tuple{Symbol, Int64}, 1}}}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:by, :rev), Tuple{typeof(Base.last), Bool}}, typeof(Base.sort), Array{Tuple{Symbol, Int64}, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Tuple{Symbol, Int64}, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.first), Tuple{Array{Tuple{Symbol, Int64}, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.first), Tuple{Array{Tuple{Symbol, Int64}, 1}}}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{Symbol}, Type{Array{Symbol, 1}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Array{Symbol, 1}}, Base.Generator{Base.Dict{Any, Any}, SpineInterface.var"#131#132"}, Int64})
precompile(Tuple{typeof(Base.keys), Base.Dict{Any, Any}})
precompile(Tuple{typeof(Base.keys), Base.Dict{Symbol, Tuple{Array{T, 1} where T, Base.Dict{K, V} where V where K, Base.Dict{K, V} where V where K}}})
precompile(Tuple{typeof(Base.setdiff), Base.KeySet{Any, Base.Dict{Any, Any}}, Base.KeySet{Symbol, Base.Dict{Symbol, Tuple{Array{T, 1} where T, Base.Dict{K, V} where V where K, Base.Dict{K, V} where V where K}}}})
precompile(Tuple{typeof(Base.iterate), Base.Set{Any}})
precompile(Tuple{typeof(Base.keys), Base.Dict{Symbol, Tuple{Array{Symbol, 1}, Array{Union{}, 1}, Base.Dict{Any, Any}, Base.Dict{K, V} where V where K}}})
precompile(Tuple{typeof(Base.setdiff), Base.KeySet{Any, Base.Dict{Any, Any}}, Base.KeySet{Symbol, Base.Dict{Symbol, Tuple{Array{Symbol, 1}, Array{Union{}, 1}, Base.Dict{Any, Any}, Base.Dict{K, V} where V where K}}}})
precompile(Tuple{typeof(Base.keys), Base.Dict{Symbol, Array{Symbol, 1}}})
precompile(Tuple{typeof(Base.setdiff), Base.KeySet{Any, Base.Dict{Any, Any}}, Base.KeySet{Symbol, Base.Dict{Symbol, Array{Symbol, 1}}}})
precompile(Tuple{typeof(Base._iterate), Base.Dict{Symbol, Tuple{Array{T, 1} where T, Base.Dict{K, V} where V where K, Base.Dict{K, V} where V where K}}, Int64})
precompile(Tuple{Type{SpineInterface.ObjectClass}, Symbol, Array{Union{}, 1}, Base.Dict{Any, Any}, Base.Dict{Symbol, SpineInterface.ParameterValue{Bool}}})
precompile(Tuple{Type{SpineInterface.ObjectClass}, Symbol, Array{Union{}, 1}, Base.Dict{Any, Any}, Base.Dict{Symbol, SpineInterface.ParameterValue{T} where T}})
precompile(Tuple{Type{SpineInterface.ObjectClass}, Symbol, Array{SpineInterface.Object, 1}, Base.Dict{SpineInterface.Object, Base.Dict{Any, Any}}, Base.Dict{Symbol, SpineInterface.ParameterValue{T} where T}})
precompile(Tuple{Type{SpineInterface.ObjectClass}, Symbol, Array{Union{}, 1}, Base.Dict{Any, Any}, Base.Dict{Symbol, SpineInterface.ParameterValue{Int64}}})
precompile(Tuple{Type{SpineInterface.ObjectClass}, Symbol, Array{Union{}, 1}, Base.Dict{Any, Any}, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Base._iterate), Base.Dict{Symbol, Tuple{Array{Symbol, 1}, Array{Union{}, 1}, Base.Dict{Any, Any}, Base.Dict{K, V} where V where K}}, Int64})
precompile(Tuple{Type{SpineInterface.RelationshipClass}, Symbol, Array{Symbol, 1}, Array{Union{}, 1}, Base.Dict{Any, Any}, Base.Dict{Any, Any}})
precompile(Tuple{Type{SpineInterface.RelationshipClass}, Symbol, Array{Symbol, 1}, Array{Union{}, 1}, Base.Dict{Any, Any}, Base.Dict{Symbol, SpineInterface.ParameterValue{Int64}}})
precompile(Tuple{Type{SpineInterface.RelationshipClass}, Symbol, Array{Symbol, 1}, Array{Union{}, 1}, Base.Dict{Any, Any}, Base.Dict{Symbol, SpineInterface.ParameterValue{T} where T}})
precompile(Tuple{Type{SpineInterface.RelationshipClass}, Symbol, Array{Symbol, 1}, Array{Union{}, 1}, Base.Dict{Any, Any}, Base.Dict{Symbol, SpineInterface.ParameterValue{Bool}}})
precompile(Tuple{Type{SpineInterface.RelationshipClass}, Symbol, Array{Symbol, 1}, Array{Union{}, 1}, Base.Dict{Any, Any}, Base.Dict{Symbol, SpineInterface.ParameterValue{Nothing}}})
precompile(Tuple{typeof(Base._iterate), Base.Dict{Symbol, Array{Symbol, 1}}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineInterface.var"#134#135"{Module}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Symbol, 1}, SpineInterface.var"#134#135"{Module}}})
precompile(Tuple{typeof(Base._array_for), Type{SpineInterface.ObjectClass}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{SpineInterface.ObjectClass, 1}, SpineInterface.ObjectClass, Base.Generator{Array{Symbol, 1}, SpineInterface.var"#134#135"{Module}}, Int64})
precompile(Tuple{Type{SpineInterface.Parameter}, Symbol, Array{SpineInterface.ObjectClass, 1}})
precompile(Tuple{typeof(Base._array_for), Type{SpineInterface.RelationshipClass}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{SpineInterface.RelationshipClass, 1}, SpineInterface.RelationshipClass, Base.Generator{Array{Symbol, 1}, SpineInterface.var"#134#135"{Module}}, Int64})
precompile(Tuple{Type{SpineInterface.Parameter}, Symbol, Array{SpineInterface.RelationshipClass, 1}})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{SpineInterface.RelationshipClass, 1}, SpineInterface.ObjectClass, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Any, 1}, Base.Generator{Array{Symbol, 1}, SpineInterface.var"#134#135"{Module}}, Int64, Int64})
precompile(Tuple{Type{SpineInterface.Parameter}, Symbol, Array{Any, 1}})
precompile(Tuple{typeof(Base.setindex!), Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.RelationshipClass, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.ObjectClass, Int64})
precompile(Tuple{typeof(JSON.Writer.show_element), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, SpineInterface._TailSerialization, Tuple{Base.Dict{String, String}}})
precompile(Tuple{typeof(SpineInterface._expand_addresses!), Bool, Array{UInt8, 1}})
precompile(Tuple{typeof(SpineInterface._process_db_answer), Bool, Nothing})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:filters,), Tuple{Base.Dict{String, String}}}, typeof(SpineInterface._generate_convenience_functions), Base.Dict{String, Any}, Module})
precompile(Tuple{SpineInterface.var"#105#106", Array{Any, 1}})
precompile(Tuple{Type{Pair{A, B} where B where A}, Tuple{String, String, String}, Array{Any, 1}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{Tuple{String, String, String}}, Type{Array{Any, 1}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Tuple{String, String, String}, Array{Any, 1}}, Array{Any, 1}, Tuple{String, String, String}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Tuple{String, String, String}, Array{Any, 1}}, Base.Generator{Array{Any, 1}, SpineInterface.var"#105#106"}, Int64})
precompile(Tuple{Type{Pair{A, B} where B where A}, Tuple{String, Array{Any, 1}, String}, Array{Any, 1}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Tuple{String, String, String}, Array{Any, 1}}, Type{Tuple{String, Any, String}}, Type{Array{Any, 1}}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Tuple{String, Any, String}, Array{Any, 1}}, Base.Dict{Tuple{String, String, String}, Array{Any, 1}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Tuple{String, Any, String}, Array{Any, 1}}, Array{Any, 1}, Tuple{String, Array{Any, 1}, String}})
precompile(Tuple{typeof(Base.hash), String, UInt64})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Tuple{String, Any, String}, Array{Any, 1}}, Base.Generator{Array{Any, 1}, SpineInterface.var"#105#106"}, Int64})
precompile(Tuple{typeof(Base.hashindex), Tuple{String, Array{Any, 1}, String}, Int64})
precompile(Tuple{typeof(Base.hashindex), Tuple{String, String, String}, Int64})
precompile(Tuple{typeof(SpineInterface._obj_args_per_class), Array{Any, 1}, Base.Dict{Any, Any}, Base.Dict{Tuple{String, String}, SpineInterface.Object}, Base.Dict{Any, Any}, Base.Dict{Tuple{String, Any, String}, Array{Any, 1}}})
precompile(Tuple{SpineInterface.var"#127#128"{Base.Dict{Any, Any}, Base.Dict{Tuple{String, String}, SpineInterface.Object}, Base.Dict{Any, Any}, Base.Dict{Tuple{String, Any, String}, Array{Any, 1}}}, Array{Any, 1}})
precompile(Tuple{typeof(SpineInterface._obj_and_vals), Tuple{}, Base.Dict{Tuple{String, String}, SpineInterface.Object}, Array{Any, 1}, Base.Dict{Tuple{String, Any, String}, Array{Any, 1}}})
precompile(Tuple{typeof(SpineInterface._try_parameter_value_from_db), Array{Any, 1}, String})
precompile(Tuple{typeof(SpineInterface._parse_db_value), Float64, Nothing})
precompile(Tuple{typeof(SpineInterface._parse_db_value), String, Nothing})
precompile(Tuple{typeof(SpineInterface._parse_db_value), Bool, Nothing})
precompile(Tuple{typeof(SpineInterface.parameter_value), Bool})
precompile(Tuple{typeof(SpineInterface._parse_db_value), Nothing, Nothing})
precompile(Tuple{typeof(SpineInterface.parameter_value), Nothing})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Tuple{Array{Union{}, 1}, Base.Dict{Any, Any}, Base.Dict{Symbol, SpineInterface.ParameterValue{T} where T}}}, Base.Generator{Array{Any, 1}, SpineInterface.var"#127#128"{Base.Dict{Any, Any}, Base.Dict{Tuple{String, String}, SpineInterface.Object}, Base.Dict{Any, Any}, Base.Dict{Tuple{String, Any, String}, Array{Any, 1}}}}, Int64})
precompile(Tuple{typeof(SpineInterface._obj_and_vals), Array{Any, 1}, Base.Dict{Tuple{String, String}, SpineInterface.Object}, Array{Any, 1}, Base.Dict{Tuple{String, Any, String}, Array{Any, 1}}})
precompile(Tuple{SpineInterface.var"#111#114"{String, Base.Dict{Tuple{String, Any, String}, Array{Any, 1}}}, Array{Any, 1}})
precompile(Tuple{typeof(Base.get), Base.Dict{Tuple{String, Any, String}, Array{Any, 1}}, Tuple{String, String, String}, Nothing})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{SpineInterface.Object, Base.Dict{Any, Any}}, Base.Generator{Array{SpineInterface.Object, 1}, SpineInterface.var"#116#118"{Array{Any, 1}, Base.Dict{Tuple{String, Any, String}, Array{Any, 1}}}}, Int64})
precompile(Tuple{SpineInterface.var"#109#112"{String}, Tuple{String, Array{Any, 1}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, SpineInterface.ParameterValue{Symbol}}, Base.Generator{Base.Iterators.Filter{SpineInterface.var"#110#113", Base.Generator{Array{Any, 1}, SpineInterface.var"#111#114"{String, Base.Dict{Tuple{String, Any, String}, Array{Any, 1}}}}}, SpineInterface.var"#109#112"{String}}, Int64})
precompile(Tuple{Type{Pair{A, B} where B where A}, SpineInterface.Object, Base.Dict{Symbol, SpineInterface.ParameterValue{Symbol}}})
precompile(Tuple{typeof(Base.empty), Base.Dict{SpineInterface.Object, Base.Dict{Any, Any}}, Type{SpineInterface.Object}, Type{Base.Dict{K, V} where V where K}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{SpineInterface.Object, Base.Dict{K, V} where V where K}, Base.Dict{SpineInterface.Object, Base.Dict{Any, Any}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{SpineInterface.Object, Base.Dict{K, V} where V where K}, Base.Dict{Symbol, SpineInterface.ParameterValue{Symbol}}, SpineInterface.Object})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{SpineInterface.Object, Base.Dict{K, V} where V where K}, Base.Generator{Array{SpineInterface.Object, 1}, SpineInterface.var"#116#118"{Array{Any, 1}, Base.Dict{Tuple{String, Any, String}, Array{Any, 1}}}}, Int64})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, Tuple{Array{SpineInterface.Object, 1}, Base.Dict{SpineInterface.Object, Base.Dict{K, V} where V where K}, Base.Dict{Symbol, SpineInterface.ParameterValue{T} where T}}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Symbol, Tuple{Array{Union{}, 1}, Base.Dict{Any, Any}, Base.Dict{Symbol, SpineInterface.ParameterValue{T} where T}}}, Type{Symbol}, Type{Tuple{Array{T, 1} where T, Base.Dict{K, V} where V where K, Base.Dict{Symbol, SpineInterface.ParameterValue{T} where T}}}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Symbol, Tuple{Array{T, 1} where T, Base.Dict{K, V} where V where K, Base.Dict{Symbol, SpineInterface.ParameterValue{T} where T}}}, Base.Dict{Symbol, Tuple{Array{Union{}, 1}, Base.Dict{Any, Any}, Base.Dict{Symbol, SpineInterface.ParameterValue{T} where T}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Tuple{Array{T, 1} where T, Base.Dict{K, V} where V where K, Base.Dict{Symbol, SpineInterface.ParameterValue{T} where T}}}, Tuple{Array{SpineInterface.Object, 1}, Base.Dict{SpineInterface.Object, Base.Dict{K, V} where V where K}, Base.Dict{Symbol, SpineInterface.ParameterValue{T} where T}}, Symbol})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Tuple{Array{T, 1} where T, Base.Dict{K, V} where V where K, Base.Dict{Symbol, SpineInterface.ParameterValue{T} where T}}}, Base.Generator{Array{Any, 1}, SpineInterface.var"#127#128"{Base.Dict{Any, Any}, Base.Dict{Tuple{String, String}, SpineInterface.Object}, Base.Dict{Any, Any}, Base.Dict{Tuple{String, Any, String}, Array{Any, 1}}}}, Int64})
precompile(Tuple{typeof(SpineInterface._obj_and_vals), Tuple{}, Base.Dict{Tuple{String, String}, SpineInterface.Object}, Tuple{}, Base.Dict{Tuple{String, Any, String}, Array{Any, 1}}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Symbol, Tuple{Array{T, 1} where T, Base.Dict{K, V} where V where K, Base.Dict{Symbol, SpineInterface.ParameterValue{T} where T}}}, Type{Symbol}, Type{Tuple{Array{T, 1} where T, Base.Dict{K, V} where V where K, Base.Dict{K, V} where V where K}}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Symbol, Tuple{Array{T, 1} where T, Base.Dict{K, V} where V where K, Base.Dict{K, V} where V where K}}, Base.Dict{Symbol, Tuple{Array{T, 1} where T, Base.Dict{K, V} where V where K, Base.Dict{Symbol, SpineInterface.ParameterValue{T} where T}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Tuple{Array{T, 1} where T, Base.Dict{K, V} where V where K, Base.Dict{K, V} where V where K}}, Tuple{Array{SpineInterface.Object, 1}, Base.Dict{SpineInterface.Object, Base.Dict{K, V} where V where K}, Base.Dict{Symbol, SpineInterface.ParameterValue{T} where T}}, Symbol})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Tuple{Array{T, 1} where T, Base.Dict{K, V} where V where K, Base.Dict{K, V} where V where K}}, Base.Generator{Array{Any, 1}, SpineInterface.var"#127#128"{Base.Dict{Any, Any}, Base.Dict{Tuple{String, String}, SpineInterface.Object}, Base.Dict{Any, Any}, Base.Dict{Tuple{String, Any, String}, Array{Any, 1}}}}, Int64})
precompile(Tuple{typeof(SpineInterface.parse_db_value), Array{UInt8, 1}, String})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{Symbol}, Type{SpineInterface.ParameterValue{Dates.DateTime}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, SpineInterface.ParameterValue{Dates.DateTime}}, SpineInterface.ParameterValue{Dates.DateTime}, Symbol})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, SpineInterface.ParameterValue{Dates.DateTime}}, Base.Generator{Base.Iterators.Filter{SpineInterface.var"#110#113", Base.Generator{Array{Any, 1}, SpineInterface.var"#111#114"{String, Base.Dict{Tuple{String, Any, String}, Array{Any, 1}}}}}, SpineInterface.var"#109#112"{String}}, Int64})
precompile(Tuple{typeof(Base.empty), Base.Dict{Symbol, SpineInterface.ParameterValue{Dates.DateTime}}, Type{Symbol}, Type{SpineInterface.ParameterValue{T} where T}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Symbol, SpineInterface.ParameterValue{T} where T}, Base.Dict{Symbol, SpineInterface.ParameterValue{Dates.DateTime}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, SpineInterface.ParameterValue{T} where T}, Base.Generator{Base.Iterators.Filter{SpineInterface.var"#110#113", Base.Generator{Array{Any, 1}, SpineInterface.var"#111#114"{String, Base.Dict{Tuple{String, Any, String}, Array{Any, 1}}}}}, SpineInterface.var"#109#112"{String}}, Int64})
precompile(Tuple{Type{Pair{A, B} where B where A}, SpineInterface.Object, Base.Dict{Symbol, SpineInterface.ParameterValue{T} where T}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{SpineInterface.Object}, Type{Base.Dict{Symbol, SpineInterface.ParameterValue{T} where T}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{SpineInterface.Object, Base.Dict{Symbol, SpineInterface.ParameterValue{T} where T}}, Base.Dict{Symbol, SpineInterface.ParameterValue{T} where T}, SpineInterface.Object})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{SpineInterface.Object, Base.Dict{Symbol, SpineInterface.ParameterValue{T} where T}}, Base.Generator{Array{SpineInterface.Object, 1}, SpineInterface.var"#116#118"{Array{Any, 1}, Base.Dict{Tuple{String, Any, String}, Array{Any, 1}}}}, Int64})
precompile(Tuple{typeof(Base.empty), Base.Dict{Symbol, SpineInterface.ParameterValue{Int64}}, Type{Symbol}, Type{SpineInterface.ParameterValue{T} where T}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Symbol, SpineInterface.ParameterValue{T} where T}, Base.Dict{Symbol, SpineInterface.ParameterValue{Int64}}})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, Tuple{Array{SpineInterface.Object, 1}, Base.Dict{SpineInterface.Object, Base.Dict{Symbol, SpineInterface.ParameterValue{T} where T}}, Base.Dict{Symbol, SpineInterface.ParameterValue{T} where T}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Tuple{Array{T, 1} where T, Base.Dict{K, V} where V where K, Base.Dict{K, V} where V where K}}, Tuple{Array{SpineInterface.Object, 1}, Base.Dict{SpineInterface.Object, Base.Dict{Symbol, SpineInterface.ParameterValue{T} where T}}, Base.Dict{Symbol, SpineInterface.ParameterValue{T} where T}}, Symbol})
precompile(Tuple{typeof(Base.empty), Base.Dict{SpineInterface.Object, Base.Dict{Symbol, SpineInterface.ParameterValue{T} where T}}, Type{SpineInterface.Object}, Type{Base.Dict{Symbol, V} where V}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{SpineInterface.Object, Base.Dict{Symbol, V} where V}, Base.Dict{SpineInterface.Object, Base.Dict{Symbol, SpineInterface.ParameterValue{T} where T}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{SpineInterface.Object, Base.Dict{Symbol, V} where V}, Base.Dict{Symbol, SpineInterface.ParameterValue{Symbol}}, SpineInterface.Object})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{SpineInterface.Object, Base.Dict{Symbol, V} where V}, Base.Generator{Array{SpineInterface.Object, 1}, SpineInterface.var"#116#118"{Array{Any, 1}, Base.Dict{Tuple{String, Any, String}, Array{Any, 1}}}}, Int64})
precompile(Tuple{typeof(SpineInterface._parse_db_value), Base.Dict{String, Any}, Base.Val{:time_series}})
precompile(Tuple{typeof(SpineInterface._parse_db_value), Base.Dict{Any, Any}, Base.Dict{String, Any}, Base.Val{:time_series}})
precompile(Tuple{typeof(SpineInterface._parse_float), Float64})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SpineInterface._parse_float), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{Float64}})
precompile(Tuple{typeof(Base.setindex!), Array{Float64, 1}, Float64, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Float64, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SpineInterface._parse_float), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{Type{NamedTuple{(:merge_ok,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{Type{SpineInterface.TimeSeries{V} where V}, Array{Dates.DateTime, 1}, Array{Float64, 1}, Bool, Bool})
precompile(Tuple{Type{Base.Fix1{F, T} where T where F}, Type{Base.FilteringRF{F, T} where T where F}, Function})
precompile(Tuple{typeof(Base.convert), Type{Base.Fix1{Type{Base.FilteringRF{F, T} where T where F}, Base.ComposedFunction{typeof(Base.:(!)), typeof(Base.isnan)}}}, Base.Fix1{Type{Base.FilteringRF{F, T} where T where F}, Base.ComposedFunction{typeof(Base.:(!)), typeof(Base.isnan)}}})
precompile(Tuple{typeof(SpineInterface.parameter_value), SpineInterface.TimeSeries{Float64}})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, SpineInterface.ParameterValue{SpineInterface.TimeSeries{Float64}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, SpineInterface.ParameterValue{T} where T}, SpineInterface.ParameterValue{SpineInterface.TimeSeries{Float64}}, Symbol})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{Symbol}, Type{SpineInterface.ParameterValue{SpineInterface.TimeSeries{Float64}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, SpineInterface.ParameterValue{SpineInterface.TimeSeries{Float64}}}, SpineInterface.ParameterValue{SpineInterface.TimeSeries{Float64}}, Symbol})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, SpineInterface.ParameterValue{SpineInterface.TimeSeries{Float64}}}, Base.Generator{Base.Iterators.Filter{SpineInterface.var"#110#113", Base.Generator{Array{Any, 1}, SpineInterface.var"#111#114"{String, Base.Dict{Tuple{String, Any, String}, Array{Any, 1}}}}}, SpineInterface.var"#109#112"{String}}, Int64})
precompile(Tuple{typeof(Base.empty), Base.Dict{Symbol, SpineInterface.ParameterValue{SpineInterface.TimeSeries{Float64}}}, Type{Symbol}, Type{SpineInterface.ParameterValue{T} where T}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Symbol, SpineInterface.ParameterValue{T} where T}, Base.Dict{Symbol, SpineInterface.ParameterValue{SpineInterface.TimeSeries{Float64}}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, SpineInterface.ParameterValue{Int64}}, Base.Generator{Base.Iterators.Filter{SpineInterface.var"#110#113", Base.Generator{Array{Any, 1}, SpineInterface.var"#111#114"{String, Base.Dict{Tuple{String, Any, String}, Array{Any, 1}}}}}, SpineInterface.var"#109#112"{String}}, Int64})
precompile(Tuple{Type{Pair{A, B} where B where A}, SpineInterface.Object, Base.Dict{Symbol, SpineInterface.ParameterValue{Int64}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{SpineInterface.Object, Base.Dict{Symbol, V} where V}, Base.Dict{Symbol, SpineInterface.ParameterValue{Int64}}, SpineInterface.Object})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, Tuple{Array{SpineInterface.Object, 1}, Base.Dict{SpineInterface.Object, Base.Dict{Symbol, V} where V}, Base.Dict{Symbol, SpineInterface.ParameterValue{T} where T}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Tuple{Array{T, 1} where T, Base.Dict{K, V} where V where K, Base.Dict{K, V} where V where K}}, Tuple{Array{SpineInterface.Object, 1}, Base.Dict{SpineInterface.Object, Base.Dict{Symbol, V} where V}, Base.Dict{Symbol, SpineInterface.ParameterValue{T} where T}}, Symbol})
precompile(Tuple{typeof(Base.isequal), Tuple{String, String, String}, Tuple{String, String, String}})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, Tuple{Array{SpineInterface.Object, 1}, Base.Dict{SpineInterface.Object, Base.Dict{Any, Any}}, Base.Dict{Symbol, SpineInterface.ParameterValue{Bool}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Tuple{Array{T, 1} where T, Base.Dict{K, V} where V where K, Base.Dict{K, V} where V where K}}, Tuple{Array{SpineInterface.Object, 1}, Base.Dict{SpineInterface.Object, Base.Dict{Any, Any}}, Base.Dict{Symbol, SpineInterface.ParameterValue{Bool}}}, Symbol})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, SpineInterface.ParameterValue{Dates.Hour}}, Base.Generator{Base.Iterators.Filter{SpineInterface.var"#110#113", Base.Generator{Array{Any, 1}, SpineInterface.var"#111#114"{String, Base.Dict{Tuple{String, Any, String}, Array{Any, 1}}}}}, SpineInterface.var"#109#112"{String}}, Int64})
precompile(Tuple{Type{Pair{A, B} where B where A}, SpineInterface.Object, Base.Dict{Symbol, SpineInterface.ParameterValue{Dates.Hour}}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{SpineInterface.Object}, Type{Base.Dict{Symbol, SpineInterface.ParameterValue{Dates.Hour}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{SpineInterface.Object, Base.Dict{Symbol, SpineInterface.ParameterValue{Dates.Hour}}}, Base.Dict{Symbol, SpineInterface.ParameterValue{Dates.Hour}}, SpineInterface.Object})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{SpineInterface.Object, Base.Dict{Symbol, SpineInterface.ParameterValue{Dates.Hour}}}, Base.Generator{Array{SpineInterface.Object, 1}, SpineInterface.var"#116#118"{Array{Any, 1}, Base.Dict{Tuple{String, Any, String}, Array{Any, 1}}}}, Int64})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, Tuple{Array{SpineInterface.Object, 1}, Base.Dict{SpineInterface.Object, Base.Dict{Symbol, SpineInterface.ParameterValue{Dates.Hour}}}, Base.Dict{Symbol, SpineInterface.ParameterValue{T} where T}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Tuple{Array{T, 1} where T, Base.Dict{K, V} where V where K, Base.Dict{K, V} where V where K}}, Tuple{Array{SpineInterface.Object, 1}, Base.Dict{SpineInterface.Object, Base.Dict{Symbol, SpineInterface.ParameterValue{Dates.Hour}}}, Base.Dict{Symbol, SpineInterface.ParameterValue{T} where T}}, Symbol})
precompile(Tuple{typeof(Base.isequal), Tuple{String, String, String}, Tuple{String, Array{Any, 1}, String}})
precompile(Tuple{Type{Pair{A, B} where B where A}, SpineInterface.Object, Base.Dict{Symbol, SpineInterface.ParameterValue{SpineInterface.TimeSeries{Float64}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{SpineInterface.Object, Base.Dict{K, V} where V where K}, Base.Dict{Symbol, SpineInterface.ParameterValue{SpineInterface.TimeSeries{Float64}}}, SpineInterface.Object})
precompile(Tuple{typeof(SpineInterface.parse_db_value), Nothing, Nothing})
precompile(Tuple{typeof(SpineInterface._rel_args_per_class), Array{Any, 1}, Base.Dict{Any, Any}, Base.Dict{Tuple{String, String}, SpineInterface.Object}, Base.Dict{Any, Any}, Base.Dict{Tuple{String, Any, String}, Array{Any, 1}}})
precompile(Tuple{SpineInterface.var"#129#130"{Base.Dict{Any, Any}, Base.Dict{Tuple{String, String}, SpineInterface.Object}, Base.Dict{Any, Any}, Base.Dict{Tuple{String, Any, String}, Array{Any, 1}}}, Array{Any, 1}})
precompile(Tuple{typeof(SpineInterface._rels_and_vals), Array{Any, 1}, Array{Any, 1}, Base.Dict{Tuple{String, String}, SpineInterface.Object}, Array{Any, 1}, Base.Dict{Tuple{String, Any, String}, Array{Any, 1}}})
precompile(Tuple{SpineInterface.var"#119#123"{Array{Any, 1}, Base.Dict{Tuple{String, String}, SpineInterface.Object}}, Array{Any, 1}})
precompile(Tuple{typeof(Base.Iterators.zip), Array{Any, 1}, Vararg{Array{Any, 1}}})
precompile(Tuple{Type{Base.Iterators.Zip{Is} where Is<:Tuple}, Tuple{Array{Any, 1}, Array{Any, 1}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineInterface.var"#120#124"{Base.Dict{Tuple{String, String}, SpineInterface.Object}}, Base.Iterators.Zip{Tuple{Array{Any, 1}, Array{Any, 1}}}})
precompile(Tuple{Base.Iterators.var"#5#6"{Tuple{Array{Any, 1}, Array{Any, 1}}}, Int64})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{SpineInterface.Object, 1}}})
precompile(Tuple{Type{Tuple}, Base.Generator{Base.Iterators.Zip{Tuple{Array{Any, 1}, Array{Any, 1}}}, SpineInterface.var"#120#124"{Base.Dict{Tuple{String, String}, SpineInterface.Object}}}})
precompile(Tuple{SpineInterface.var"#120#124"{Base.Dict{Tuple{String, String}, SpineInterface.Object}}, Tuple{String, String}})
precompile(Tuple{typeof(Base._array_for), Type{Tuple{SpineInterface.Object, SpineInterface.Object}}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{SpineInterface.Object, SpineInterface.Object}, 1}, Tuple{SpineInterface.Object, SpineInterface.Object}, Base.Generator{Array{Any, 1}, SpineInterface.var"#119#123"{Array{Any, 1}, Base.Dict{Tuple{String, String}, SpineInterface.Object}}}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineInterface.var"#121#125"{Array{Any, 1}, Base.Dict{Tuple{String, Any, String}, Array{Any, 1}}}, Array{Tuple{SpineInterface.Object, SpineInterface.Object}, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Array{Tuple{SpineInterface.Object, SpineInterface.Object}, 1}, SpineInterface.var"#121#125"{Array{Any, 1}, Base.Dict{Tuple{String, Any, String}, Array{Any, 1}}}}})
precompile(Tuple{SpineInterface.var"#111#114"{Array{String, 1}, Base.Dict{Tuple{String, Any, String}, Array{Any, 1}}}, Array{Any, 1}})
precompile(Tuple{typeof(Base.get), Base.Dict{Tuple{String, Any, String}, Array{Any, 1}}, Tuple{String, Array{String, 1}, String}, Nothing})
precompile(Tuple{typeof(Base.isequal), Tuple{String, Array{String, 1}, String}, Tuple{String, Array{Any, 1}, String}})
precompile(Tuple{SpineInterface.var"#109#112"{Array{String, 1}}, Tuple{String, Array{Any, 1}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, SpineInterface.ParameterValue{Int64}}, Base.Generator{Base.Iterators.Filter{SpineInterface.var"#110#113", Base.Generator{Array{Any, 1}, SpineInterface.var"#111#114"{Array{String, 1}, Base.Dict{Tuple{String, Any, String}, Array{Any, 1}}}}}, SpineInterface.var"#109#112"{Array{String, 1}}}, Int64})
precompile(Tuple{Type{Pair{A, B} where B where A}, Tuple{SpineInterface.Object, SpineInterface.Object}, Base.Dict{Symbol, SpineInterface.ParameterValue{Int64}}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{Tuple{SpineInterface.Object, SpineInterface.Object}}, Type{Base.Dict{Symbol, SpineInterface.ParameterValue{Int64}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Tuple{SpineInterface.Object, SpineInterface.Object}, Base.Dict{Symbol, SpineInterface.ParameterValue{Int64}}}, Base.Dict{Symbol, SpineInterface.ParameterValue{Int64}}, Tuple{SpineInterface.Object, SpineInterface.Object}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Tuple{SpineInterface.Object, SpineInterface.Object}, Base.Dict{Symbol, SpineInterface.ParameterValue{Int64}}}, Base.Generator{Array{Tuple{SpineInterface.Object, SpineInterface.Object}, 1}, SpineInterface.var"#121#125"{Array{Any, 1}, Base.Dict{Tuple{String, Any, String}, Array{Any, 1}}}}, Int64})
precompile(Tuple{Type{Pair{A, B} where B where A}, Tuple{SpineInterface.Object, SpineInterface.Object}, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Tuple{SpineInterface.Object, SpineInterface.Object}, Base.Dict{Symbol, SpineInterface.ParameterValue{Int64}}}, Type{Tuple{SpineInterface.Object, SpineInterface.Object}}, Type{Base.Dict{K, V} where V where K}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Tuple{SpineInterface.Object, SpineInterface.Object}, Base.Dict{K, V} where V where K}, Base.Dict{Tuple{SpineInterface.Object, SpineInterface.Object}, Base.Dict{Symbol, SpineInterface.ParameterValue{Int64}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Tuple{SpineInterface.Object, SpineInterface.Object}, Base.Dict{K, V} where V where K}, Base.Dict{Any, Any}, Tuple{SpineInterface.Object, SpineInterface.Object}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Tuple{SpineInterface.Object, SpineInterface.Object}, Base.Dict{K, V} where V where K}, Base.Generator{Array{Tuple{SpineInterface.Object, SpineInterface.Object}, 1}, SpineInterface.var"#121#125"{Array{Any, 1}, Base.Dict{Tuple{String, Any, String}, Array{Any, 1}}}}, Int64})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, Tuple{Array{Symbol, 1}, Array{Tuple{SpineInterface.Object, SpineInterface.Object}, 1}, Base.Dict{Tuple{SpineInterface.Object, SpineInterface.Object}, Base.Dict{K, V} where V where K}, Base.Dict{Symbol, SpineInterface.ParameterValue{T} where T}}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{Symbol}, Type{Tuple{Array{Symbol, 1}, Array{Tuple{SpineInterface.Object, SpineInterface.Object}, 1}, Base.Dict{Tuple{SpineInterface.Object, SpineInterface.Object}, Base.Dict{K, V} where V where K}, Base.Dict{Symbol, SpineInterface.ParameterValue{T} where T}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Tuple{Array{Symbol, 1}, Array{Tuple{SpineInterface.Object, SpineInterface.Object}, 1}, Base.Dict{Tuple{SpineInterface.Object, SpineInterface.Object}, Base.Dict{K, V} where V where K}, Base.Dict{Symbol, SpineInterface.ParameterValue{T} where T}}}, Tuple{Array{Symbol, 1}, Array{Tuple{SpineInterface.Object, SpineInterface.Object}, 1}, Base.Dict{Tuple{SpineInterface.Object, SpineInterface.Object}, Base.Dict{K, V} where V where K}, Base.Dict{Symbol, SpineInterface.ParameterValue{T} where T}}, Symbol})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Tuple{Array{Symbol, 1}, Array{Tuple{SpineInterface.Object, SpineInterface.Object}, 1}, Base.Dict{Tuple{SpineInterface.Object, SpineInterface.Object}, Base.Dict{K, V} where V where K}, Base.Dict{Symbol, SpineInterface.ParameterValue{T} where T}}}, Base.Generator{Array{Any, 1}, SpineInterface.var"#129#130"{Base.Dict{Any, Any}, Base.Dict{Tuple{String, String}, SpineInterface.Object}, Base.Dict{Any, Any}, Base.Dict{Tuple{String, Any, String}, Array{Any, 1}}}}, Int64})
precompile(Tuple{typeof(SpineInterface._rels_and_vals), Array{Any, 1}, Tuple{}, Base.Dict{Tuple{String, String}, SpineInterface.Object}, Array{Any, 1}, Base.Dict{Tuple{String, Any, String}, Array{Any, 1}}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Symbol, Tuple{Array{Symbol, 1}, Array{Tuple{SpineInterface.Object, SpineInterface.Object}, 1}, Base.Dict{Tuple{SpineInterface.Object, SpineInterface.Object}, Base.Dict{K, V} where V where K}, Base.Dict{Symbol, SpineInterface.ParameterValue{T} where T}}}, Type{Symbol}, Type{Tuple{Array{Symbol, 1}, Array{T, 1} where T, Base.Dict{K, V} where V where K, Base.Dict{Symbol, V} where V}}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Symbol, Tuple{Array{Symbol, 1}, Array{T, 1} where T, Base.Dict{K, V} where V where K, Base.Dict{Symbol, V} where V}}, Base.Dict{Symbol, Tuple{Array{Symbol, 1}, Array{Tuple{SpineInterface.Object, SpineInterface.Object}, 1}, Base.Dict{Tuple{SpineInterface.Object, SpineInterface.Object}, Base.Dict{K, V} where V where K}, Base.Dict{Symbol, SpineInterface.ParameterValue{T} where T}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Tuple{Array{Symbol, 1}, Array{T, 1} where T, Base.Dict{K, V} where V where K, Base.Dict{Symbol, V} where V}}, Tuple{Array{Symbol, 1}, Array{Union{}, 1}, Base.Dict{Any, Any}, Base.Dict{Symbol, SpineInterface.ParameterValue{Int64}}}, Symbol})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Tuple{Array{Symbol, 1}, Array{T, 1} where T, Base.Dict{K, V} where V where K, Base.Dict{Symbol, V} where V}}, Base.Generator{Array{Any, 1}, SpineInterface.var"#129#130"{Base.Dict{Any, Any}, Base.Dict{Tuple{String, String}, SpineInterface.Object}, Base.Dict{Any, Any}, Base.Dict{Tuple{String, Any, String}, Array{Any, 1}}}}, Int64})
precompile(Tuple{typeof(SpineInterface._rels_and_vals), Array{Any, 1}, Tuple{}, Base.Dict{Tuple{String, String}, SpineInterface.Object}, Tuple{}, Base.Dict{Tuple{String, Any, String}, Array{Any, 1}}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Symbol, Tuple{Array{Symbol, 1}, Array{T, 1} where T, Base.Dict{K, V} where V where K, Base.Dict{Symbol, V} where V}}, Type{Symbol}, Type{Tuple{Array{Symbol, 1}, Array{T, 1} where T, Base.Dict{K, V} where V where K, Base.Dict{K, V} where V where K}}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Symbol, Tuple{Array{Symbol, 1}, Array{T, 1} where T, Base.Dict{K, V} where V where K, Base.Dict{K, V} where V where K}}, Base.Dict{Symbol, Tuple{Array{Symbol, 1}, Array{T, 1} where T, Base.Dict{K, V} where V where K, Base.Dict{Symbol, V} where V}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Tuple{Array{Symbol, 1}, Array{T, 1} where T, Base.Dict{K, V} where V where K, Base.Dict{K, V} where V where K}}, Tuple{Array{Symbol, 1}, Array{Tuple{SpineInterface.Object, SpineInterface.Object}, 1}, Base.Dict{Tuple{SpineInterface.Object, SpineInterface.Object}, Base.Dict{K, V} where V where K}, Base.Dict{Symbol, SpineInterface.ParameterValue{T} where T}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Tuple{Array{Symbol, 1}, Array{T, 1} where T, Base.Dict{K, V} where V where K, Base.Dict{K, V} where V where K}}, Tuple{Array{Symbol, 1}, Array{Union{}, 1}, Base.Dict{Any, Any}, Base.Dict{Symbol, SpineInterface.ParameterValue{Int64}}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Tuple{Array{Symbol, 1}, Array{T, 1} where T, Base.Dict{K, V} where V where K, Base.Dict{K, V} where V where K}}, Tuple{Array{Symbol, 1}, Array{Union{}, 1}, Base.Dict{Any, Any}, Base.Dict{Any, Any}}, Symbol})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Tuple{Array{Symbol, 1}, Array{T, 1} where T, Base.Dict{K, V} where V where K, Base.Dict{K, V} where V where K}}, Base.Generator{Array{Any, 1}, SpineInterface.var"#129#130"{Base.Dict{Any, Any}, Base.Dict{Tuple{String, String}, SpineInterface.Object}, Base.Dict{Any, Any}, Base.Dict{Tuple{String, Any, String}, Array{Any, 1}}}}, Int64})
precompile(Tuple{typeof(Base._array_for), Type{Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}, 1}, Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}, Base.Generator{Array{Any, 1}, SpineInterface.var"#119#123"{Array{Any, 1}, Base.Dict{Tuple{String, String}, SpineInterface.Object}}}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineInterface.var"#121#125"{Array{Any, 1}, Base.Dict{Tuple{String, Any, String}, Array{Any, 1}}}, Array{Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Array{Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}, 1}, SpineInterface.var"#121#125"{Array{Any, 1}, Base.Dict{Tuple{String, Any, String}, Array{Any, 1}}}}})
precompile(Tuple{Type{Pair{A, B} where B where A}, Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}, Base.Dict{Symbol, SpineInterface.ParameterValue{Int64}}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}}, Type{Base.Dict{Symbol, SpineInterface.ParameterValue{Int64}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}, Base.Dict{Symbol, SpineInterface.ParameterValue{Int64}}}, Base.Dict{Symbol, SpineInterface.ParameterValue{Int64}}, Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}, Base.Dict{Symbol, SpineInterface.ParameterValue{Int64}}}, Base.Generator{Array{Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}, 1}, SpineInterface.var"#121#125"{Array{Any, 1}, Base.Dict{Tuple{String, Any, String}, Array{Any, 1}}}}, Int64})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, Tuple{Array{Symbol, 1}, Array{Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}, 1}, Base.Dict{Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}, Base.Dict{Symbol, SpineInterface.ParameterValue{Int64}}}, Base.Dict{Symbol, SpineInterface.ParameterValue{T} where T}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Tuple{Array{Symbol, 1}, Array{T, 1} where T, Base.Dict{K, V} where V where K, Base.Dict{K, V} where V where K}}, Tuple{Array{Symbol, 1}, Array{Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}, 1}, Base.Dict{Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}, Base.Dict{Symbol, SpineInterface.ParameterValue{Int64}}}, Base.Dict{Symbol, SpineInterface.ParameterValue{T} where T}}, Symbol})
precompile(Tuple{typeof(SpineInterface._rels_and_vals), Array{Any, 1}, Array{Any, 1}, Base.Dict{Tuple{String, String}, SpineInterface.Object}, Tuple{}, Base.Dict{Tuple{String, Any, String}, Array{Any, 1}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineInterface.var"#121#125"{Tuple{}, Base.Dict{Tuple{String, Any, String}, Array{Any, 1}}}, Array{Tuple{SpineInterface.Object, SpineInterface.Object}, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Array{Tuple{SpineInterface.Object, SpineInterface.Object}, 1}, SpineInterface.var"#121#125"{Tuple{}, Base.Dict{Tuple{String, Any, String}, Array{Any, 1}}}}})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, Tuple{Array{Symbol, 1}, Array{Tuple{SpineInterface.Object, SpineInterface.Object}, 1}, Base.Dict{Tuple{SpineInterface.Object, SpineInterface.Object}, Base.Dict{Any, Any}}, Base.Dict{Any, Any}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Tuple{Array{Symbol, 1}, Array{T, 1} where T, Base.Dict{K, V} where V where K, Base.Dict{K, V} where V where K}}, Tuple{Array{Symbol, 1}, Array{Tuple{SpineInterface.Object, SpineInterface.Object}, 1}, Base.Dict{Tuple{SpineInterface.Object, SpineInterface.Object}, Base.Dict{Any, Any}}, Base.Dict{Any, Any}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Tuple{Array{Symbol, 1}, Array{T, 1} where T, Base.Dict{K, V} where V where K, Base.Dict{K, V} where V where K}}, Tuple{Array{Symbol, 1}, Array{Union{}, 1}, Base.Dict{Any, Any}, Base.Dict{Symbol, SpineInterface.ParameterValue{Bool}}}, Symbol})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{Tuple{SpineInterface.Object, SpineInterface.Object}}, Type{Base.Dict{Any, Any}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Tuple{SpineInterface.Object, SpineInterface.Object}, Base.Dict{Any, Any}}, Base.Generator{Array{Tuple{SpineInterface.Object, SpineInterface.Object}, 1}, SpineInterface.var"#121#125"{Array{Any, 1}, Base.Dict{Tuple{String, Any, String}, Array{Any, 1}}}}, Int64})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, Tuple{Array{Symbol, 1}, Array{Tuple{SpineInterface.Object, SpineInterface.Object}, 1}, Base.Dict{Tuple{SpineInterface.Object, SpineInterface.Object}, Base.Dict{Any, Any}}, Base.Dict{Symbol, SpineInterface.ParameterValue{Bool}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Tuple{Array{Symbol, 1}, Array{T, 1} where T, Base.Dict{K, V} where V where K, Base.Dict{K, V} where V where K}}, Tuple{Array{Symbol, 1}, Array{Tuple{SpineInterface.Object, SpineInterface.Object}, 1}, Base.Dict{Tuple{SpineInterface.Object, SpineInterface.Object}, Base.Dict{Any, Any}}, Base.Dict{Symbol, SpineInterface.ParameterValue{Bool}}}, Symbol})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, Tuple{Array{Symbol, 1}, Array{Tuple{SpineInterface.Object, SpineInterface.Object}, 1}, Base.Dict{Tuple{SpineInterface.Object, SpineInterface.Object}, Base.Dict{Any, Any}}, Base.Dict{Symbol, SpineInterface.ParameterValue{T} where T}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Tuple{Array{Symbol, 1}, Array{T, 1} where T, Base.Dict{K, V} where V where K, Base.Dict{K, V} where V where K}}, Tuple{Array{Symbol, 1}, Array{Tuple{SpineInterface.Object, SpineInterface.Object}, 1}, Base.Dict{Tuple{SpineInterface.Object, SpineInterface.Object}, Base.Dict{Any, Any}}, Base.Dict{Symbol, SpineInterface.ParameterValue{T} where T}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Tuple{Array{Symbol, 1}, Array{T, 1} where T, Base.Dict{K, V} where V where K, Base.Dict{K, V} where V where K}}, Tuple{Array{Symbol, 1}, Array{Union{}, 1}, Base.Dict{Any, Any}, Base.Dict{Symbol, SpineInterface.ParameterValue{Nothing}}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Tuple{Array{Symbol, 1}, Array{T, 1} where T, Base.Dict{K, V} where V where K, Base.Dict{K, V} where V where K}}, Tuple{Array{Symbol, 1}, Array{Union{}, 1}, Base.Dict{Any, Any}, Base.Dict{Symbol, SpineInterface.ParameterValue{T} where T}}, Symbol})
precompile(Tuple{typeof(Base.isequal), Tuple{String, Array{String, 1}, String}, Tuple{String, String, String}})
precompile(Tuple{typeof(Base.keys), Base.Dict{Symbol, Tuple{Array{Symbol, 1}, Array{T, 1} where T, Base.Dict{K, V} where V where K, Base.Dict{K, V} where V where K}}})
precompile(Tuple{typeof(Base.setdiff), Base.KeySet{Any, Base.Dict{Any, Any}}, Base.KeySet{Symbol, Base.Dict{Symbol, Tuple{Array{Symbol, 1}, Array{T, 1} where T, Base.Dict{K, V} where V where K, Base.Dict{K, V} where V where K}}}})
precompile(Tuple{Type{SpineInterface.ObjectClass}, Symbol, Array{SpineInterface.Object, 1}, Base.Dict{SpineInterface.Object, Base.Dict{Any, Any}}, Base.Dict{Symbol, SpineInterface.ParameterValue{Bool}}})
precompile(Tuple{Type{SpineInterface.ObjectClass}, Symbol, Array{SpineInterface.Object, 1}, Base.Dict{SpineInterface.Object, Base.Dict{K, V} where V where K}, Base.Dict{Symbol, SpineInterface.ParameterValue{T} where T}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, Base.Dict{Symbol, SpineInterface.ParameterValue{T} where T}}, Base.Dict{Symbol, SpineInterface.ParameterValue{SpineInterface.TimeSeries{Float64}}}, SpineInterface.Object})
precompile(Tuple{Type{SpineInterface.ObjectClass}, Symbol, Array{SpineInterface.Object, 1}, Base.Dict{SpineInterface.Object, Base.Dict{Symbol, SpineInterface.ParameterValue{Dates.Hour}}}, Base.Dict{Symbol, SpineInterface.ParameterValue{T} where T}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, Base.Dict{Symbol, SpineInterface.ParameterValue{T} where T}}, Base.Dict{Symbol, SpineInterface.ParameterValue{Symbol}}, SpineInterface.Object})
precompile(Tuple{Type{SpineInterface.ObjectClass}, Symbol, Array{SpineInterface.Object, 1}, Base.Dict{SpineInterface.Object, Base.Dict{Symbol, SpineInterface.ParameterValue{T} where T}}, Base.Dict{Symbol, SpineInterface.ParameterValue{T} where T}})
precompile(Tuple{Type{SpineInterface.ObjectClass}, Symbol, Array{SpineInterface.Object, 1}, Base.Dict{SpineInterface.Object, Base.Dict{Symbol, V} where V}, Base.Dict{Symbol, SpineInterface.ParameterValue{T} where T}})
precompile(Tuple{typeof(Base._iterate), Base.Dict{Symbol, Tuple{Array{Symbol, 1}, Array{T, 1} where T, Base.Dict{K, V} where V where K, Base.Dict{K, V} where V where K}}, Int64})
precompile(Tuple{Type{SpineInterface.RelationshipClass}, Symbol, Array{Symbol, 1}, Array{Tuple{SpineInterface.Object, SpineInterface.Object}, 1}, Base.Dict{Tuple{SpineInterface.Object, SpineInterface.Object}, Base.Dict{Any, Any}}, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Base._array_for), Type{NamedTuple{(:model, :temporal_block), Tuple{SpineInterface.Object, SpineInterface.Object}}}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{NamedTuple{(:model, :temporal_block), Tuple{SpineInterface.Object, SpineInterface.Object}}, 1}, NamedTuple{(:model, :temporal_block), Tuple{SpineInterface.Object, SpineInterface.Object}}, Base.Generator{Array{Tuple{SpineInterface.Object, SpineInterface.Object}, 1}, SpineInterface.var"#1#2"{Array{Symbol, 1}}}, Int64})
precompile(Tuple{typeof(Base.convert), Type{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}}, Array{NamedTuple{(:model, :temporal_block), Tuple{SpineInterface.Object, SpineInterface.Object}}, 1}})
precompile(Tuple{Type{SpineInterface.RelationshipClass}, Symbol, Array{Symbol, 1}, Array{Tuple{SpineInterface.Object, SpineInterface.Object}, 1}, Base.Dict{Tuple{SpineInterface.Object, SpineInterface.Object}, Base.Dict{K, V} where V where K}, Base.Dict{Symbol, SpineInterface.ParameterValue{T} where T}})
precompile(Tuple{typeof(Base._array_for), Type{NamedTuple{(:unit, :node), Tuple{SpineInterface.Object, SpineInterface.Object}}}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{NamedTuple{(:unit, :node), Tuple{SpineInterface.Object, SpineInterface.Object}}, 1}, NamedTuple{(:unit, :node), Tuple{SpineInterface.Object, SpineInterface.Object}}, Base.Generator{Array{Tuple{SpineInterface.Object, SpineInterface.Object}, 1}, SpineInterface.var"#1#2"{Array{Symbol, 1}}}, Int64})
precompile(Tuple{typeof(Base.convert), Type{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}}, Array{NamedTuple{(:unit, :node), Tuple{SpineInterface.Object, SpineInterface.Object}}, 1}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}}, Base.Dict{Symbol, SpineInterface.ParameterValue{T} where T}}, Base.Dict{Symbol, SpineInterface.ParameterValue{Int64}}, Tuple{SpineInterface.Object, SpineInterface.Object}})
precompile(Tuple{Type{SpineInterface.RelationshipClass}, Symbol, Array{Symbol, 1}, Array{Tuple{SpineInterface.Object, SpineInterface.Object}, 1}, Base.Dict{Tuple{SpineInterface.Object, SpineInterface.Object}, Base.Dict{Any, Any}}, Base.Dict{Symbol, SpineInterface.ParameterValue{T} where T}})
precompile(Tuple{typeof(Base._array_for), Type{NamedTuple{(:stochastic_structure, :stochastic_scenario), Tuple{SpineInterface.Object, SpineInterface.Object}}}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{NamedTuple{(:stochastic_structure, :stochastic_scenario), Tuple{SpineInterface.Object, SpineInterface.Object}}, 1}, NamedTuple{(:stochastic_structure, :stochastic_scenario), Tuple{SpineInterface.Object, SpineInterface.Object}}, Base.Generator{Array{Tuple{SpineInterface.Object, SpineInterface.Object}, 1}, SpineInterface.var"#1#2"{Array{Symbol, 1}}}, Int64})
precompile(Tuple{typeof(Base.convert), Type{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}}, Array{NamedTuple{(:stochastic_structure, :stochastic_scenario), Tuple{SpineInterface.Object, SpineInterface.Object}}, 1}})
precompile(Tuple{typeof(Base._array_for), Type{NamedTuple{(:connection, :node), Tuple{SpineInterface.Object, SpineInterface.Object}}}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{NamedTuple{(:connection, :node), Tuple{SpineInterface.Object, SpineInterface.Object}}, 1}, NamedTuple{(:connection, :node), Tuple{SpineInterface.Object, SpineInterface.Object}}, Base.Generator{Array{Tuple{SpineInterface.Object, SpineInterface.Object}, 1}, SpineInterface.var"#1#2"{Array{Symbol, 1}}}, Int64})
precompile(Tuple{typeof(Base.convert), Type{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}}, Array{NamedTuple{(:connection, :node), Tuple{SpineInterface.Object, SpineInterface.Object}}, 1}})
precompile(Tuple{Type{SpineInterface.RelationshipClass}, Symbol, Array{Symbol, 1}, Array{Tuple{SpineInterface.Object, SpineInterface.Object}, 1}, Base.Dict{Tuple{SpineInterface.Object, SpineInterface.Object}, Base.Dict{Any, Any}}, Base.Dict{Symbol, SpineInterface.ParameterValue{Bool}}})
precompile(Tuple{typeof(Base._array_for), Type{NamedTuple{(:report, :output), Tuple{SpineInterface.Object, SpineInterface.Object}}}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{NamedTuple{(:report, :output), Tuple{SpineInterface.Object, SpineInterface.Object}}, 1}, NamedTuple{(:report, :output), Tuple{SpineInterface.Object, SpineInterface.Object}}, Base.Generator{Array{Tuple{SpineInterface.Object, SpineInterface.Object}, 1}, SpineInterface.var"#1#2"{Array{Symbol, 1}}}, Int64})
precompile(Tuple{typeof(Base.convert), Type{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}}, Array{NamedTuple{(:report, :output), Tuple{SpineInterface.Object, SpineInterface.Object}}, 1}})
precompile(Tuple{Type{SpineInterface.RelationshipClass}, Symbol, Array{Symbol, 1}, Array{Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}, 1}, Base.Dict{Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}, Base.Dict{Symbol, SpineInterface.ParameterValue{Int64}}}, Base.Dict{Symbol, SpineInterface.ParameterValue{T} where T}})
precompile(Tuple{typeof(Base._array_for), Type{NamedTuple{(:connection, :node1, :node2), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}}}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{NamedTuple{(:connection, :node1, :node2), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}}, 1}, NamedTuple{(:connection, :node1, :node2), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}}, Base.Generator{Array{Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}, 1}, SpineInterface.var"#1#2"{Array{Symbol, 1}}}, Int64})
precompile(Tuple{typeof(Base.convert), Type{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}}, Array{NamedTuple{(:connection, :node1, :node2), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}}, 1}})
precompile(Tuple{typeof(Base._array_for), Type{NamedTuple{(:model, :stochastic_structure), Tuple{SpineInterface.Object, SpineInterface.Object}}}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{NamedTuple{(:model, :stochastic_structure), Tuple{SpineInterface.Object, SpineInterface.Object}}, 1}, NamedTuple{(:model, :stochastic_structure), Tuple{SpineInterface.Object, SpineInterface.Object}}, Base.Generator{Array{Tuple{SpineInterface.Object, SpineInterface.Object}, 1}, SpineInterface.var"#1#2"{Array{Symbol, 1}}}, Int64})
precompile(Tuple{typeof(Base.convert), Type{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}}, Array{NamedTuple{(:model, :stochastic_structure), Tuple{SpineInterface.Object, SpineInterface.Object}}, 1}})
precompile(Tuple{typeof(Base._array_for), Type{NamedTuple{(:model, :report), Tuple{SpineInterface.Object, SpineInterface.Object}}}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{NamedTuple{(:model, :report), Tuple{SpineInterface.Object, SpineInterface.Object}}, 1}, NamedTuple{(:model, :report), Tuple{SpineInterface.Object, SpineInterface.Object}}, Base.Generator{Array{Tuple{SpineInterface.Object, SpineInterface.Object}, 1}, SpineInterface.var"#1#2"{Array{Symbol, 1}}}, Int64})
precompile(Tuple{typeof(Base.convert), Type{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}}, Array{NamedTuple{(:model, :report), Tuple{SpineInterface.Object, SpineInterface.Object}}, 1}})
precompile(Tuple{typeof(Base._array_for), Type{NamedTuple{(:unit, :node1, :node2), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}}}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{NamedTuple{(:unit, :node1, :node2), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}}, 1}, NamedTuple{(:unit, :node1, :node2), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}}, Base.Generator{Array{Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}, 1}, SpineInterface.var"#1#2"{Array{Symbol, 1}}}, Int64})
precompile(Tuple{typeof(Base.convert), Type{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}}, Array{NamedTuple{(:unit, :node1, :node2), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}}, 1}})
precompile(Tuple{typeof(Base.values), Base.Dict{Any, Any}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.ValueIterator{Base.Dict{Any, Any}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, SpineInterface.var"#_name#282", Tuple{Array{Any, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, SpineInterface.var"#_name#282", Tuple{Array{Any, 1}}}})
precompile(Tuple{SpineInterface.var"#_name#282", SpineInterface.ObjectClass})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, SpineInterface.var"#_name#282", Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{Symbol}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Symbol, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, SpineInterface.var"#_name#282", Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.setdiff), Array{Symbol, 1}, Array{Symbol, 1}})
precompile(Tuple{Type{Pair{A, B} where B where A}, String, Array{Symbol, 1}})
precompile(Tuple{SpineInterface.var"#_name#282", SpineInterface.RelationshipClass})
precompile(Tuple{SpineInterface.var"#_name#282", SpineInterface.Parameter})
precompile(Tuple{Type{OrderedCollections.OrderedDict{K, V} where V where K}, Pair{String, Array{Symbol, 1}}, Vararg{Pair{String, Array{Symbol, 1}}}})
precompile(Tuple{typeof(Base.keys), OrderedCollections.OrderedDict{String, Array{Symbol, 1}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineInterface.var"#280#283", Base.KeySet{String, OrderedCollections.OrderedDict{String, Array{Symbol, 1}}}})
precompile(Tuple{typeof(Base.convert), Type{Base.Fix1{Type{Base.MappingRF{F, T} where T where F}, SpineInterface.var"#280#283"}}, Base.Fix1{Type{Base.MappingRF{F, T} where T where F}, SpineInterface.var"#280#283"}})
precompile(Tuple{typeof(Base.reduce_empty), Base.MappingRF{SpineInterface.var"#280#283", Base.BottomRF{typeof(Base.max)}}, Type{String}})
precompile(Tuple{typeof(Base.maximum), Base.Generator{Base.KeySet{String, OrderedCollections.OrderedDict{String, Array{Symbol, 1}}}, SpineInterface.var"#280#283"}})
precompile(Tuple{typeof(Base.iterate), OrderedCollections.OrderedDict{String, Array{Symbol, 1}}})
precompile(Tuple{typeof(Base.isempty), Array{Symbol, 1}})
precompile(Tuple{typeof(Base.iterate), OrderedCollections.OrderedDict{String, Array{Symbol, 1}}, Int64})
precompile(Tuple{typeof(Base.prettyprint_getunits), Int64, Int64, Int64})
precompile(Tuple{typeof(Base.Ryu.writefixed), Float64, Int64})
precompile(Tuple{typeof(Base.println), Base.PipeEndpoint, String})
precompile(Tuple{typeof(Base.vect), SpineInterface.ObjectClass, Vararg{SpineInterface.ObjectClass}})
precompile(Tuple{SpineInterface.ParameterValue{Nothing}})
precompile(Tuple{SpineInterface.RelationshipClass})
precompile(Tuple{typeof(SpineInterface.add_relationships!), SpineInterface.RelationshipClass, Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}})
precompile(Tuple{typeof(Base.push!), Base.Set{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K}, NamedTuple{(:model, :temporal_block), Tuple{SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{typeof(Base.delete!), Base.Set{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K}, NamedTuple{(:model, :temporal_block), Tuple{SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{Base.var"#132#133"{Base.var"#130#131"{typeof(Base.in), typeof(Base.pop!), Base.Set{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K}}}, NamedTuple{(:model, :temporal_block), Tuple{SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{SpineInterface.ObjectClass})
precompile(Tuple{Type{NamedTuple{(:temporal_block,), T} where T<:Tuple}, Tuple{SpineInterface.Anything}})
precompile(Tuple{Type{Base.Pairs{Symbol, V, I, A} where A where I where V}, NamedTuple{(:temporal_block,), Tuple{SpineInterface.Anything}}, Tuple{Symbol}})
precompile(Tuple{typeof(Base.convert), Type{Nothing}, SpineInterface.Anything})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Nothing, 1}}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Union{Nothing, SpineInterface.Anything}, 1}}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{SpineInterface.Anything, 1}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:temporal_block,), Tuple{SpineInterface.Anything}}, SpineInterface.RelationshipClass})
precompile(Tuple{typeof(Base.argtail), SpineInterface.Anything})
precompile(Tuple{typeof(Base.get!), SpineInterface.var"#209#215"{Bool, Base.Pairs{Symbol, SpineInterface.Anything, Tuple{Symbol}, NamedTuple{(:temporal_block,), Tuple{SpineInterface.Anything}}}, SpineInterface.RelationshipClass}, Base.Dict{Any, Any}, Tuple{Nothing, SpineInterface.Anything}})
precompile(Tuple{typeof(Base.setdiff), Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, Array{Any, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#846#849", Array{Any, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{Any, 1}, SpineOpt.var"#846#849"}})
precompile(Tuple{typeof(Base.unique), Base.Iterators.Flatten{Base.Generator{Array{Any, 1}, SpineOpt.var"#846#849"}}})
precompile(Tuple{SpineOpt.var"#846#849", SpineInterface.Object})
precompile(Tuple{Type{NamedTuple{(:model,), T} where T<:Tuple}, Tuple{SpineInterface.Anything}})
precompile(Tuple{Type{Base.Pairs{Symbol, V, I, A} where A where I where V}, NamedTuple{(:model,), Tuple{SpineInterface.Anything}}, Tuple{Symbol}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:model,), Tuple{SpineInterface.Anything}}, SpineInterface.RelationshipClass})
precompile(Tuple{typeof(Base.get!), SpineInterface.var"#209#215"{Bool, Base.Pairs{Symbol, SpineInterface.Anything, Tuple{Symbol}, NamedTuple{(:model,), Tuple{SpineInterface.Anything}}}, SpineInterface.RelationshipClass}, Base.Dict{Any, Any}, Tuple{SpineInterface.Anything, Nothing}})
precompile(Tuple{SpineInterface.var"#cond#216"{Base.Pairs{Symbol, SpineInterface.Anything, Tuple{Symbol}, NamedTuple{(:model,), Tuple{SpineInterface.Anything}}}}, NamedTuple{(:model, :temporal_block), Tuple{SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{typeof(Base.getindex), Type{SpineInterface.Object}, SpineInterface.Object})
precompile(Tuple{Type{Base.Set{SpineInterface.Object}}, Tuple{SpineInterface.Object}})
precompile(Tuple{typeof(Base._unique_from), Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineInterface.var"#211#218"{Array{Symbol, 1}}}, Array{SpineInterface.Object, 1}, Base.Set{SpineInterface.Object}, Int64})
precompile(Tuple{typeof(Base.isempty), Array{SpineInterface.Object, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#845#850"{SpineInterface.Object}, Array{SpineInterface.Object, 1}})
precompile(Tuple{typeof(Base.iterate), Array{SpineInterface.Object, 1}})
precompile(Tuple{SpineOpt.var"#845#850"{SpineInterface.Object}, SpineInterface.Object})
precompile(Tuple{typeof(Base.getindex), Type{Tuple{SpineInterface.Object, SpineInterface.Object}}, Tuple{SpineInterface.Object, SpineInterface.Object}})
precompile(Tuple{Type{Base.Set{Tuple{SpineInterface.Object, SpineInterface.Object}}}, Tuple{Tuple{SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{typeof(Base._unique_from), Base.Iterators.Flatten{Base.Generator{Array{Any, 1}, SpineOpt.var"#846#849"}}, Array{Tuple{SpineInterface.Object, SpineInterface.Object}, 1}, Base.Set{Tuple{SpineInterface.Object, SpineInterface.Object}}, Tuple{Int64, Base.Generator{Array{SpineInterface.Object, 1}, SpineOpt.var"#845#850"{SpineInterface.Object}}, Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Flatten{Base.Generator{Array{Any, 1}, SpineOpt.var"#846#849"}}, Tuple{Int64, Base.Generator{Array{SpineInterface.Object, 1}, SpineOpt.var"#845#850"{SpineInterface.Object}}, Int64}})
precompile(Tuple{typeof(Base.in!), Tuple{SpineInterface.Object, SpineInterface.Object}, Base.Set{Tuple{SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{typeof(Base.push!), Array{Tuple{SpineInterface.Object, SpineInterface.Object}, 1}, Tuple{SpineInterface.Object, SpineInterface.Object}})
precompile(Tuple{typeof(SpineInterface.add_relationships!), SpineInterface.RelationshipClass, Array{Tuple{SpineInterface.Object, SpineInterface.Object}, 1}})
precompile(Tuple{typeof(Base._array_for), Type{NamedTuple{(:node, :temporal_block), Tuple{SpineInterface.Object, SpineInterface.Object}}}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{NamedTuple{(:node, :temporal_block), Tuple{SpineInterface.Object, SpineInterface.Object}}, 1}, NamedTuple{(:node, :temporal_block), Tuple{SpineInterface.Object, SpineInterface.Object}}, Base.Generator{Array{Tuple{SpineInterface.Object, SpineInterface.Object}, 1}, SpineInterface.var"#274#275"{SpineInterface.RelationshipClass}}, Int64})
precompile(Tuple{typeof(SpineInterface.add_relationships!), SpineInterface.RelationshipClass, Array{NamedTuple{(:node, :temporal_block), Tuple{SpineInterface.Object, SpineInterface.Object}}, 1}})
precompile(Tuple{SpineInterface.var"#276#277", NamedTuple{(:node, :temporal_block), Tuple{SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Tuple{SpineInterface.Object, SpineInterface.Object}, Base.Dict{Any, Any}}, Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineInterface.var"#276#277"}, Int64})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}}, Base.Dict{Symbol, SpineInterface.ParameterValue{T} where T}}, Base.Dict{Tuple{SpineInterface.Object, SpineInterface.Object}, Base.Dict{Any, Any}}})
precompile(Tuple{typeof(Base.empty!), Base.Dict{Any, Any}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#848#851", Array{Any, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{Any, 1}, SpineOpt.var"#848#851"}})
precompile(Tuple{typeof(Base.unique), Base.Iterators.Flatten{Base.Generator{Array{Any, 1}, SpineOpt.var"#848#851"}}})
precompile(Tuple{SpineOpt.var"#848#851", SpineInterface.Object})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#847#852"{SpineInterface.Object}, Array{SpineInterface.Object, 1}})
precompile(Tuple{SpineOpt.var"#847#852"{SpineInterface.Object}, SpineInterface.Object})
precompile(Tuple{typeof(Base._unique_from), Base.Iterators.Flatten{Base.Generator{Array{Any, 1}, SpineOpt.var"#848#851"}}, Array{Tuple{SpineInterface.Object, SpineInterface.Object}, 1}, Base.Set{Tuple{SpineInterface.Object, SpineInterface.Object}}, Tuple{Int64, Base.Generator{Array{SpineInterface.Object, 1}, SpineOpt.var"#847#852"{SpineInterface.Object}}, Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Flatten{Base.Generator{Array{Any, 1}, SpineOpt.var"#848#851"}}, Tuple{Int64, Base.Generator{Array{SpineInterface.Object, 1}, SpineOpt.var"#847#852"{SpineInterface.Object}}, Int64}})
precompile(Tuple{typeof(Base._array_for), Type{NamedTuple{(:unit, :temporal_block), Tuple{SpineInterface.Object, SpineInterface.Object}}}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{NamedTuple{(:unit, :temporal_block), Tuple{SpineInterface.Object, SpineInterface.Object}}, 1}, NamedTuple{(:unit, :temporal_block), Tuple{SpineInterface.Object, SpineInterface.Object}}, Base.Generator{Array{Tuple{SpineInterface.Object, SpineInterface.Object}, 1}, SpineInterface.var"#274#275"{SpineInterface.RelationshipClass}}, Int64})
precompile(Tuple{typeof(SpineInterface.add_relationships!), SpineInterface.RelationshipClass, Array{NamedTuple{(:unit, :temporal_block), Tuple{SpineInterface.Object, SpineInterface.Object}}, 1}})
precompile(Tuple{SpineInterface.var"#276#277", NamedTuple{(:unit, :temporal_block), Tuple{SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{typeof(Base.push!), Base.Set{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K}, NamedTuple{(:model, :stochastic_structure), Tuple{SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{typeof(Base.delete!), Base.Set{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K}, NamedTuple{(:model, :stochastic_structure), Tuple{SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{Base.var"#132#133"{Base.var"#130#131"{typeof(Base.in), typeof(Base.pop!), Base.Set{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K}}}, NamedTuple{(:model, :stochastic_structure), Tuple{SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{Type{NamedTuple{(:stochastic_structure,), T} where T<:Tuple}, Tuple{SpineInterface.Anything}})
precompile(Tuple{Type{Base.Pairs{Symbol, V, I, A} where A where I where V}, NamedTuple{(:stochastic_structure,), Tuple{SpineInterface.Anything}}, Tuple{Symbol}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:stochastic_structure,), Tuple{SpineInterface.Anything}}, SpineInterface.RelationshipClass})
precompile(Tuple{typeof(Base.get!), SpineInterface.var"#209#215"{Bool, Base.Pairs{Symbol, SpineInterface.Anything, Tuple{Symbol}, NamedTuple{(:stochastic_structure,), Tuple{SpineInterface.Anything}}}, SpineInterface.RelationshipClass}, Base.Dict{Any, Any}, Tuple{Nothing, SpineInterface.Anything}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#838#841", Array{Any, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{Any, 1}, SpineOpt.var"#838#841"}})
precompile(Tuple{typeof(Base.unique), Base.Iterators.Flatten{Base.Generator{Array{Any, 1}, SpineOpt.var"#838#841"}}})
precompile(Tuple{SpineOpt.var"#838#841", SpineInterface.Object})
precompile(Tuple{SpineInterface.var"#cond#216"{Base.Pairs{Symbol, SpineInterface.Anything, Tuple{Symbol}, NamedTuple{(:model,), Tuple{SpineInterface.Anything}}}}, NamedTuple{(:model, :stochastic_structure), Tuple{SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#837#842"{SpineInterface.Object}, Array{SpineInterface.Object, 1}})
precompile(Tuple{SpineOpt.var"#837#842"{SpineInterface.Object}, SpineInterface.Object})
precompile(Tuple{typeof(Base._unique_from), Base.Iterators.Flatten{Base.Generator{Array{Any, 1}, SpineOpt.var"#838#841"}}, Array{Tuple{SpineInterface.Object, SpineInterface.Object}, 1}, Base.Set{Tuple{SpineInterface.Object, SpineInterface.Object}}, Tuple{Int64, Base.Generator{Array{SpineInterface.Object, 1}, SpineOpt.var"#837#842"{SpineInterface.Object}}, Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Flatten{Base.Generator{Array{Any, 1}, SpineOpt.var"#838#841"}}, Tuple{Int64, Base.Generator{Array{SpineInterface.Object, 1}, SpineOpt.var"#837#842"{SpineInterface.Object}}, Int64}})
precompile(Tuple{typeof(Base._array_for), Type{NamedTuple{(:node, :stochastic_structure), Tuple{SpineInterface.Object, SpineInterface.Object}}}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{NamedTuple{(:node, :stochastic_structure), Tuple{SpineInterface.Object, SpineInterface.Object}}, 1}, NamedTuple{(:node, :stochastic_structure), Tuple{SpineInterface.Object, SpineInterface.Object}}, Base.Generator{Array{Tuple{SpineInterface.Object, SpineInterface.Object}, 1}, SpineInterface.var"#274#275"{SpineInterface.RelationshipClass}}, Int64})
precompile(Tuple{typeof(SpineInterface.add_relationships!), SpineInterface.RelationshipClass, Array{NamedTuple{(:node, :stochastic_structure), Tuple{SpineInterface.Object, SpineInterface.Object}}, 1}})
precompile(Tuple{SpineInterface.var"#276#277", NamedTuple{(:node, :stochastic_structure), Tuple{SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#840#843", Array{Any, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{Any, 1}, SpineOpt.var"#840#843"}})
precompile(Tuple{typeof(Base.unique), Base.Iterators.Flatten{Base.Generator{Array{Any, 1}, SpineOpt.var"#840#843"}}})
precompile(Tuple{SpineOpt.var"#840#843", SpineInterface.Object})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#839#844"{SpineInterface.Object}, Array{SpineInterface.Object, 1}})
precompile(Tuple{SpineOpt.var"#839#844"{SpineInterface.Object}, SpineInterface.Object})
precompile(Tuple{typeof(Base._unique_from), Base.Iterators.Flatten{Base.Generator{Array{Any, 1}, SpineOpt.var"#840#843"}}, Array{Tuple{SpineInterface.Object, SpineInterface.Object}, 1}, Base.Set{Tuple{SpineInterface.Object, SpineInterface.Object}}, Tuple{Int64, Base.Generator{Array{SpineInterface.Object, 1}, SpineOpt.var"#839#844"{SpineInterface.Object}}, Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Flatten{Base.Generator{Array{Any, 1}, SpineOpt.var"#840#843"}}, Tuple{Int64, Base.Generator{Array{SpineInterface.Object, 1}, SpineOpt.var"#839#844"{SpineInterface.Object}}, Int64}})
precompile(Tuple{typeof(Base._array_for), Type{NamedTuple{(:unit, :stochastic_structure), Tuple{SpineInterface.Object, SpineInterface.Object}}}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{NamedTuple{(:unit, :stochastic_structure), Tuple{SpineInterface.Object, SpineInterface.Object}}, 1}, NamedTuple{(:unit, :stochastic_structure), Tuple{SpineInterface.Object, SpineInterface.Object}}, Base.Generator{Array{Tuple{SpineInterface.Object, SpineInterface.Object}, 1}, SpineInterface.var"#274#275"{SpineInterface.RelationshipClass}}, Int64})
precompile(Tuple{typeof(SpineInterface.add_relationships!), SpineInterface.RelationshipClass, Array{NamedTuple{(:unit, :stochastic_structure), Tuple{SpineInterface.Object, SpineInterface.Object}}, 1}})
precompile(Tuple{SpineInterface.var"#276#277", NamedTuple{(:unit, :stochastic_structure), Tuple{SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{typeof(Base.setdiff), Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SpineInterface.Parameter}}}, Array{Any, 1}})
precompile(Tuple{typeof(SpineInterface.add_relationships!), SpineInterface.RelationshipClass, Array{Any, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#657#658", Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#657#658"}})
precompile(Tuple{typeof(Base.collect), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#657#658"}}})
precompile(Tuple{SpineOpt.var"#657#658", NamedTuple{(:node, :stochastic_structure), Tuple{SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{SpineOpt.var"#656#659"{SpineInterface.Object, SpineInterface.Object}, SpineInterface.Object})
precompile(Tuple{typeof(Base.empty), Array{Any, 1}, Type{Tuple{SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{typeof(Base.grow_to!), Array{Tuple{SpineInterface.Object, SpineInterface.Object}, 1}, Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#657#658"}}, Tuple{Int64, Base.Generator{Array{SpineInterface.Object, 1}, SpineOpt.var"#656#659"{SpineInterface.Object, SpineInterface.Object}}, Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#657#658"}}, Tuple{Int64, Base.Generator{Array{SpineInterface.Object, 1}, SpineOpt.var"#656#659"{SpineInterface.Object, SpineInterface.Object}}, Int64}})
precompile(Tuple{typeof(Base.delete!), Base.Set{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K}, NamedTuple{(:node, :stochastic_structure), Tuple{SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#661#662", Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#661#662"}})
precompile(Tuple{typeof(Base.collect), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#661#662"}}})
precompile(Tuple{SpineOpt.var"#661#662", NamedTuple{(:unit, :stochastic_structure), Tuple{SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{SpineOpt.var"#660#663"{SpineInterface.Object, SpineInterface.Object}, SpineInterface.Object})
precompile(Tuple{typeof(Base.grow_to!), Array{Tuple{SpineInterface.Object, SpineInterface.Object}, 1}, Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#661#662"}}, Tuple{Int64, Base.Generator{Array{SpineInterface.Object, 1}, SpineOpt.var"#660#663"{SpineInterface.Object, SpineInterface.Object}}, Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#661#662"}}, Tuple{Int64, Base.Generator{Array{SpineInterface.Object, 1}, SpineOpt.var"#660#663"{SpineInterface.Object, SpineInterface.Object}}, Int64}})
precompile(Tuple{typeof(Base.delete!), Base.Set{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K}, NamedTuple{(:unit, :stochastic_structure), Tuple{SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{typeof(Base.isempty), Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}})
precompile(Tuple{typeof(Base.isempty), Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#858#859", Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, SpineOpt.var"#858#859"}})
precompile(Tuple{typeof(Base.collect), Base.Iterators.Flatten{Base.Generator{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, SpineOpt.var"#858#859"}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#857#860"{SpineInterface.Object}, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}})
precompile(Tuple{typeof(Base.iterate), Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}})
precompile(Tuple{SpineOpt.var"#857#860"{SpineInterface.Object}, SpineInterface.Object})
precompile(Tuple{typeof(Base.grow_to!), Array{Tuple{SpineInterface.Object, SpineInterface.Object}, 1}, Base.Iterators.Flatten{Base.Generator{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, SpineOpt.var"#858#859"}}, Tuple{Int64, Base.Generator{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, SpineOpt.var"#857#860"{SpineInterface.Object}}, Int64}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{NamedTuple{(:model, :report), Tuple{SpineInterface.Object, SpineInterface.Object}}, 1}, NamedTuple{(:model, :report), Tuple{SpineInterface.Object, SpineInterface.Object}}, Base.Generator{Array{Tuple{SpineInterface.Object, SpineInterface.Object}, 1}, SpineInterface.var"#274#275"{SpineInterface.RelationshipClass}}, Int64})
precompile(Tuple{typeof(SpineInterface.add_relationships!), SpineInterface.RelationshipClass, Array{NamedTuple{(:model, :report), Tuple{SpineInterface.Object, SpineInterface.Object}}, 1}})
precompile(Tuple{SpineInterface.var"#276#277", NamedTuple{(:model, :report), Tuple{SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{Type{NamedTuple{(:report,), T} where T<:Tuple}, Tuple{SpineInterface.Object}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Union{Nothing, SpineInterface.Object}, 1}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:report,), Tuple{SpineInterface.Object}}, SpineInterface.RelationshipClass})
precompile(Tuple{typeof(Base.get!), SpineInterface.var"#209#215"{Bool, Base.Pairs{Symbol, SpineInterface.Object, Tuple{Symbol}, NamedTuple{(:report,), Tuple{SpineInterface.Object}}}, SpineInterface.RelationshipClass}, Base.Dict{Any, Any}, Tuple{SpineInterface.Object, Nothing}})
precompile(Tuple{SpineInterface.var"#cond#216"{Base.Pairs{Symbol, SpineInterface.Object, Tuple{Symbol}, NamedTuple{(:report,), Tuple{SpineInterface.Object}}}}, NamedTuple{(:report, :output), Tuple{SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#861#865"{Base.Dict{Symbol, Symbol}}, Array{SpineInterface.Object, 1}})
precompile(Tuple{Type{Base.Iterators.Filter{F, I} where I where F}, SpineOpt.var"#862#866", Base.Generator{Array{SpineInterface.Object, 1}, SpineOpt.var"#861#865"{Base.Dict{Symbol, Symbol}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.identity), Base.Iterators.Filter{SpineOpt.var"#862#866", Base.Generator{Array{SpineInterface.Object, 1}, SpineOpt.var"#861#865"{Base.Dict{Symbol, Symbol}}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Filter{SpineOpt.var"#862#866", Base.Generator{Array{SpineInterface.Object, 1}, SpineOpt.var"#861#865"{Base.Dict{Symbol, Symbol}}}}, typeof(Base.identity)}})
precompile(Tuple{typeof(Base.isempty), Array{Union{Nothing, Symbol}, 1}})
precompile(Tuple{typeof(Base.iterate), Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, Int64})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:connection_type,), Tuple{Symbol}}, SpineInterface.ObjectClass})
precompile(Tuple{SpineInterface.ParameterValue{Symbol}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#664#683", Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#665#684", Base.Generator{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, SpineOpt.var"#664#683"}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Generator{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, SpineOpt.var"#664#683"}, SpineOpt.var"#665#684"}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:connection,), Tuple{SpineInterface.Object}}, SpineInterface.RelationshipClass})
precompile(Tuple{typeof(Base.get!), SpineInterface.var"#209#215"{Bool, Base.Pairs{Symbol, SpineInterface.Object, Tuple{Symbol}, NamedTuple{(:connection,), Tuple{SpineInterface.Object}}}, SpineInterface.RelationshipClass}, Base.Dict{Any, Any}, Tuple{SpineInterface.Object, Nothing}})
precompile(Tuple{SpineInterface.var"#cond#216"{Base.Pairs{Symbol, SpineInterface.Object, Tuple{Symbol}, NamedTuple{(:connection,), Tuple{SpineInterface.Object}}}}, NamedTuple{(:connection, :node), Tuple{SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{typeof(Base.first), Array{SpineInterface.Object, 1}})
precompile(Tuple{SpineOpt.var"#665#684", Tuple{SpineInterface.Object, SpineInterface.Object}})
precompile(Tuple{Type{Base.Iterators.Filter{F, I} where I where F}, SpineOpt.var"#666#685"{SpineInterface.Object}, Array{SpineInterface.Object, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.identity), Base.Iterators.Filter{SpineOpt.var"#666#685"{SpineInterface.Object}, Array{SpineInterface.Object, 1}}})
precompile(Tuple{typeof(Base.first), Base.Generator{Base.Iterators.Filter{SpineOpt.var"#666#685"{SpineInterface.Object}, Array{SpineInterface.Object, 1}}, typeof(Base.identity)}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}, 1}, Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}, Base.Generator{Base.Generator{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, SpineOpt.var"#664#683"}, SpineOpt.var"#665#684"}, Int64})
precompile(Tuple{typeof(Base.isempty), Array{Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#668#686", Array{Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}, 1}, SpineOpt.var"#668#686"}})
precompile(Tuple{typeof(Base.collect), Base.Iterators.Flatten{Base.Generator{Array{Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}, 1}, SpineOpt.var"#668#686"}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#670#688", Array{Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}, 1}, SpineOpt.var"#670#688"}})
precompile(Tuple{typeof(Base.collect), Base.Iterators.Flatten{Base.Generator{Array{Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}, 1}, SpineOpt.var"#670#688"}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#672#690", Array{Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}, 1}, SpineOpt.var"#672#690"}})
precompile(Tuple{typeof(Base.collect), Base.Iterators.Flatten{Base.Generator{Array{Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}, 1}, SpineOpt.var"#672#690"}}})
precompile(Tuple{typeof(Base.Iterators.flatten), Tuple{Array{Tuple{SpineInterface.Object, SpineInterface.Object}, 1}, Array{Tuple{SpineInterface.Object, SpineInterface.Object}, 1}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#673#692", Base.Iterators.Flatten{Tuple{Array{Tuple{SpineInterface.Object, SpineInterface.Object}, 1}, Array{Tuple{SpineInterface.Object, SpineInterface.Object}, 1}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#674#693", Base.Iterators.Flatten{Tuple{Array{Tuple{SpineInterface.Object, SpineInterface.Object}, 1}, Array{Tuple{SpineInterface.Object, SpineInterface.Object}, 1}}}})
precompile(Tuple{Type{Base.Iterators.Filter{F, I} where I where F}, SpineOpt.var"#676#695", Base.Generator{Base.Iterators.Flatten{Tuple{Array{Tuple{SpineInterface.Object, SpineInterface.Object}, 1}, Array{Tuple{SpineInterface.Object, SpineInterface.Object}, 1}}}, SpineOpt.var"#673#692"}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#675#694", Base.Iterators.Filter{SpineOpt.var"#676#695", Base.Generator{Base.Iterators.Flatten{Tuple{Array{Tuple{SpineInterface.Object, SpineInterface.Object}, 1}, Array{Tuple{SpineInterface.Object, SpineInterface.Object}, 1}}}, SpineOpt.var"#673#692"}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Base.Iterators.Filter{SpineOpt.var"#676#695", Base.Generator{Base.Iterators.Flatten{Tuple{Array{Tuple{SpineInterface.Object, SpineInterface.Object}, 1}, Array{Tuple{SpineInterface.Object, SpineInterface.Object}, 1}}}, SpineOpt.var"#673#692"}}, SpineOpt.var"#675#694"}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:connection, :node, :_raw), Tuple{SpineInterface.Object, SpineInterface.Object, Bool}}}})
precompile(Tuple{Type{NamedTuple{(:by, :rev), T} where T<:Tuple}, Tuple{SpineInterface.var"#13#14", Bool}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.ForwardOrdering, Int64, Int64})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:scratch,), Tuple{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}}}}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.ReverseOrdering{Base.Order.ForwardOrdering}, Int64, Int64})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:by, :rev), Tuple{SpineInterface.var"#13#14", Bool}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:by, :rev), Tuple{SpineInterface.var"#13#14", Bool}}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:connection, :node, :_strict, :_raw), Tuple{SpineInterface.Object, SpineInterface.Object, Bool, Bool}}, SpineInterface.Parameter})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{Symbol, Any}, SpineInterface.Object, Symbol})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{Symbol, Any}, Bool, Symbol})
precompile(Tuple{typeof(Base._array_for), Type{SpineInterface.Object}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{SpineInterface.Object, 1}, SpineInterface.Object, Base.Generator{Array{Symbol, 1}, SpineInterface.var"#17#18"{OrderedCollections.OrderedDict{Symbol, Any}}}, Int64})
precompile(Tuple{Type{NamedTuple{(:_raw,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(SpineInterface._entity_pvals), Base.Dict{Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}}, Base.Dict{Symbol, SpineInterface.ParameterValue{T} where T}}, Tuple{SpineInterface.Object, SpineInterface.Object}})
precompile(Tuple{typeof(SpineInterface._get), Base.Dict{Symbol, SpineInterface.ParameterValue{T} where T}, Symbol, Base.Dict{Symbol, SpineInterface.ParameterValue{T} where T}, Nothing})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:_raw,), Tuple{Bool}}, SpineInterface.ParameterValue{Nothing}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:_raw,), Tuple{Bool}}, SpineInterface.ParameterValue{Int64}})
precompile(Tuple{SpineOpt.var"#675#694", Tuple{SpineInterface.Object, Int64}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{SpineInterface.Object}, Type{Int64}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{SpineInterface.Object, Int64}, Int64, SpineInterface.Object})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{SpineInterface.Object, Int64}, Base.Generator{Base.Iterators.Filter{SpineOpt.var"#676#695", Base.Generator{Base.Iterators.Flatten{Tuple{Array{Tuple{SpineInterface.Object, SpineInterface.Object}, 1}, Array{Tuple{SpineInterface.Object, SpineInterface.Object}, 1}}}, SpineOpt.var"#673#692"}}, SpineOpt.var"#675#694"}, Tuple{Int64, Array{Tuple{SpineInterface.Object, SpineInterface.Object}, 1}, Int64}})
precompile(Tuple{Type{Base.Iterators.Filter{F, I} where I where F}, SpineOpt.var"#678#697", Base.Generator{Base.Iterators.Flatten{Tuple{Array{Tuple{SpineInterface.Object, SpineInterface.Object}, 1}, Array{Tuple{SpineInterface.Object, SpineInterface.Object}, 1}}}, SpineOpt.var"#674#693"}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#677#696", Base.Iterators.Filter{SpineOpt.var"#678#697", Base.Generator{Base.Iterators.Flatten{Tuple{Array{Tuple{SpineInterface.Object, SpineInterface.Object}, 1}, Array{Tuple{SpineInterface.Object, SpineInterface.Object}, 1}}}, SpineOpt.var"#674#693"}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Base.Iterators.Filter{SpineOpt.var"#678#697", Base.Generator{Base.Iterators.Flatten{Tuple{Array{Tuple{SpineInterface.Object, SpineInterface.Object}, 1}, Array{Tuple{SpineInterface.Object, SpineInterface.Object}, 1}}}, SpineOpt.var"#674#693"}}, SpineOpt.var"#677#696"}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#679#698"{Base.Dict{Any, Any}, Base.Dict{SpineInterface.Object, Int64}, SpineOpt.var"#_connection_pvals#682"}, Array{Tuple{SpineInterface.Object, SpineInterface.Object}, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Array{Tuple{SpineInterface.Object, SpineInterface.Object}, 1}, SpineOpt.var"#679#698"{Base.Dict{Any, Any}, Base.Dict{SpineInterface.Object, Int64}, SpineOpt.var"#_connection_pvals#682"}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#680#699"{Base.Dict{Any, Any}, Base.Dict{SpineInterface.Object, Int64}, SpineOpt.var"#_connection_pvals#682"}, Array{Tuple{SpineInterface.Object, SpineInterface.Object}, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Array{Tuple{SpineInterface.Object, SpineInterface.Object}, 1}, SpineOpt.var"#680#699"{Base.Dict{Any, Any}, Base.Dict{SpineInterface.Object, Int64}, SpineOpt.var"#_connection_pvals#682"}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#681#700", Array{Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Array{Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}, 1}, SpineOpt.var"#681#700"}})
precompile(Tuple{typeof(SpineInterface.add_relationship_parameter_values!), SpineInterface.RelationshipClass, Base.Dict{Tuple{SpineInterface.Object, SpineInterface.Object}, Base.Dict{Symbol, Any}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{NamedTuple{(:connection, :node), Tuple{SpineInterface.Object, SpineInterface.Object}}, 1}, NamedTuple{(:connection, :node), Tuple{SpineInterface.Object, SpineInterface.Object}}, Base.Generator{Array{Tuple{SpineInterface.Object, SpineInterface.Object}, 1}, SpineInterface.var"#274#275"{SpineInterface.RelationshipClass}}, Int64})
precompile(Tuple{typeof(SpineInterface.add_relationships!), SpineInterface.RelationshipClass, Array{NamedTuple{(:connection, :node), Tuple{SpineInterface.Object, SpineInterface.Object}}, 1}})
precompile(Tuple{typeof(Base.delete!), Base.Set{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K}, NamedTuple{(:connection, :node), Tuple{SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{SpineInterface.var"#276#277", NamedTuple{(:connection, :node), Tuple{SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{typeof(SpineInterface.add_relationship_parameter_values!), SpineInterface.RelationshipClass, Base.Dict{Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}, Base.Dict{Symbol, SpineInterface.ParameterValue{Float64}}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{NamedTuple{(:connection, :node1, :node2), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}}, 1}, NamedTuple{(:connection, :node1, :node2), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}}, Base.Generator{Array{Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}, 1}, SpineInterface.var"#274#275"{SpineInterface.RelationshipClass}}, Int64})
precompile(Tuple{typeof(SpineInterface.add_relationships!), SpineInterface.RelationshipClass, Array{NamedTuple{(:connection, :node1, :node2), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}}, 1}})
precompile(Tuple{typeof(Base.delete!), Base.Set{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K}, NamedTuple{(:connection, :node1, :node2), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{SpineInterface.var"#276#277", NamedTuple{(:connection, :node1, :node2), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}}, Type{Base.Dict{Any, Any}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}, Base.Dict{Any, Any}}, Base.Dict{Any, Any}, Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}, Base.Dict{Any, Any}}, Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineInterface.var"#276#277"}, Int64})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}}, Base.Dict{Symbol, SpineInterface.ParameterValue{T} where T}}, Base.Dict{Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}, Base.Dict{Any, Any}}})
precompile(Tuple{Type{Pair{A, B} where B where A}, SpineInterface.RelationshipClass, SpineInterface.Object})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Pair{SpineInterface.RelationshipClass, SpineInterface.Object}, Vararg{Pair{SpineInterface.RelationshipClass, SpineInterface.Object}}})
precompile(Tuple{Type{Base.Dict{SpineInterface.RelationshipClass, SpineInterface.Object}}, NTuple{8, Pair{SpineInterface.RelationshipClass, SpineInterface.Object}}})
precompile(Tuple{typeof(Base.keys), Base.Dict{SpineInterface.RelationshipClass, SpineInterface.Object}})
precompile(Tuple{typeof(Base.iterate), Base.KeySet{SpineInterface.RelationshipClass, Base.Dict{SpineInterface.RelationshipClass, SpineInterface.Object}}})
precompile(Tuple{typeof(Base.getproperty), SpineInterface.RelationshipClass, Symbol})
precompile(Tuple{typeof(Base.push!), Array{Symbol, 1}, Symbol})
precompile(Tuple{typeof(Base.iterate), Base.KeySet{SpineInterface.RelationshipClass, Base.Dict{SpineInterface.RelationshipClass, SpineInterface.Object}}, Int64})
precompile(Tuple{typeof(Base._iterate), Base.Dict{SpineInterface.RelationshipClass, SpineInterface.Object}, Int64})
precompile(Tuple{typeof(Base.map!), SpineOpt.var"#701#703"{SpineInterface.Object}, Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}})
precompile(Tuple{typeof(Base.keys), Base.Dict{Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}}, Base.Dict{Symbol, SpineInterface.ParameterValue{T} where T}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#702#704"{SpineInterface.Object}, Base.KeySet{Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}}, Base.Dict{Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}}, Base.Dict{Symbol, SpineInterface.ParameterValue{T} where T}}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Base.KeySet{Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}}, Base.Dict{Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}}, Base.Dict{Symbol, SpineInterface.ParameterValue{T} where T}}}, SpineOpt.var"#702#704"{SpineInterface.Object}}})
precompile(Tuple{typeof(Base._iterate), Base.Dict{Any, Any}, Int64})
precompile(Tuple{SpineOpt.var"#701#703"{SpineInterface.Object}, NamedTuple{(:unit, :node), Tuple{SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{typeof(Base.setindex!), Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, NamedTuple{(:unit, :node, :direction), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}}, Int64})
precompile(Tuple{SpineOpt.var"#702#704"{SpineInterface.Object}, Tuple{SpineInterface.Object, SpineInterface.Object}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{Tuple{SpineInterface.Object, SpineInterface.Object}}, Type{Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Tuple{SpineInterface.Object, SpineInterface.Object}, Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}}, Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}, Tuple{SpineInterface.Object, SpineInterface.Object}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Tuple{SpineInterface.Object, SpineInterface.Object}, Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}}, Base.Generator{Base.KeySet{Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}}, Base.Dict{Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}}, Base.Dict{Symbol, SpineInterface.ParameterValue{T} where T}}}, SpineOpt.var"#702#704"{SpineInterface.Object}}, Int64})
precompile(Tuple{typeof(Base._iterate), Base.Dict{Tuple{SpineInterface.Object, SpineInterface.Object}, Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}}, Int64})
precompile(Tuple{typeof(Base.pop!), Base.Dict{Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}}, Base.Dict{Symbol, SpineInterface.ParameterValue{T} where T}}, Tuple{SpineInterface.Object, SpineInterface.Object}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}}, Base.Dict{Symbol, SpineInterface.ParameterValue{T} where T}}, Base.Dict{Symbol, SpineInterface.ParameterValue{T} where T}, Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}})
precompile(Tuple{SpineOpt.var"#701#703"{SpineInterface.Object}, NamedTuple{(:connection, :node), Tuple{SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{typeof(Base.setindex!), Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, NamedTuple{(:connection, :node, :direction), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#707#711"{SpineOpt.var"#_new_node_pvals#708"}, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, SpineOpt.var"#707#711"{SpineOpt.var"#_new_node_pvals#708"}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:node,), Tuple{SpineInterface.Object}}, SpineInterface.RelationshipClass})
precompile(Tuple{typeof(Base.get!), SpineInterface.var"#209#215"{Bool, Base.Pairs{Symbol, SpineInterface.Object, Tuple{Symbol}, NamedTuple{(:node,), Tuple{SpineInterface.Object}}}, SpineInterface.RelationshipClass}, Base.Dict{Any, Any}, Tuple{SpineInterface.Object, Nothing}})
precompile(Tuple{Type{Base.Iterators.Filter{F, I} where I where F}, SpineOpt.var"#705#709", Array{Any, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.identity), Base.Iterators.Filter{SpineOpt.var"#705#709", Array{Any, 1}}})
precompile(Tuple{Type{Tuple}, Base.Generator{Base.Iterators.Filter{SpineOpt.var"#705#709", Array{Any, 1}}, typeof(Base.identity)}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#706#710", Tuple{}})
precompile(Tuple{typeof(Base.convert), Type{Base.Fix1{Type{Base.MappingRF{F, T} where T where F}, SpineOpt.var"#706#710"}}, Base.Fix1{Type{Base.MappingRF{F, T} where T where F}, SpineOpt.var"#706#710"}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Tuple{}, Base.ComposedFunction{typeof(Base.identity), Base.Fix1{Type{Base.MappingRF{F, T} where T where F}, SpineOpt.var"#706#710"}}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Tuple{}, Base.ComposedFunction{typeof(Base.identity), Base.Fix1{Type{Base.MappingRF{F, T} where T where F}, SpineOpt.var"#706#710"}}}, Int64, Int64})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:init,), Tuple{Float64}}, typeof(Base.reduce), Function, Base.Generator{Tuple{}, SpineOpt.var"#706#710"}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.MappingRF{SpineOpt.var"#706#710", Base.BottomRF{typeof(Base.max)}}, Tuple{}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.MappingRF{SpineOpt.var"#706#710", Base.BottomRF{typeof(Base.max)}}, Tuple{}}, Int64, Int64})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Base.identity), typeof(Base.max), Float64, Base.Generator{Tuple{}, SpineOpt.var"#706#710"}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Pair{Symbol, SpineInterface.ParameterValue{Bool}}, Vararg{Pair{A, B} where B where A}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Pair{Symbol, SpineInterface.ParameterValue{Bool}}, Pair{Symbol, SpineInterface.ParameterValue{Float64}}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{SpineInterface.Object, Base.Dict{Symbol, SpineInterface.ParameterValue{T} where T}}, Base.Generator{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, SpineOpt.var"#707#711"{SpineOpt.var"#_new_node_pvals#708"}}, Int64})
precompile(Tuple{typeof(Base.hashindex), Tuple{SpineInterface.Object, Nothing}, Int64})
precompile(Tuple{typeof(SpineInterface.add_object_parameter_values!), SpineInterface.ObjectClass, Base.Dict{SpineInterface.Object, Base.Dict{Symbol, SpineInterface.ParameterValue{T} where T}}})
precompile(Tuple{typeof(Base.vect), SpineInterface.ObjectClass})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#713#716"{SpineOpt.var"#_new_connection_pvals#714"}, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, SpineOpt.var"#713#716"{SpineOpt.var"#_new_connection_pvals#714"}}})
precompile(Tuple{Type{NamedTuple{(:connection, :direction), T} where T<:Tuple}, Tuple{SpineInterface.Object, SpineInterface.Anything}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:connection, :direction), Tuple{SpineInterface.Object, SpineInterface.Anything}}, SpineInterface.RelationshipClass})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{SpineInterface.Object, 1}, SpineInterface.Object, Base.Generator{Array{Symbol, 1}, SpineInterface.var"#208#214"{Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:connection, :direction), Tuple{SpineInterface.Object, SpineInterface.Anything}}}}}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{SpineInterface.Object, 1}, Base.Generator{Array{Symbol, 1}, SpineInterface.var"#208#214"{Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:connection, :direction), Tuple{SpineInterface.Object, SpineInterface.Anything}}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Union{Nothing, SpineInterface.Object}, 1}, Base.Generator{Array{Symbol, 1}, SpineInterface.var"#208#214"{Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:connection, :direction), Tuple{SpineInterface.Object, SpineInterface.Anything}}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.get!), SpineInterface.var"#209#215"{Bool, Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:connection, :direction), Tuple{SpineInterface.Object, SpineInterface.Anything}}}, SpineInterface.RelationshipClass}, Base.Dict{Any, Any}, Tuple{SpineInterface.Object, Nothing, SpineInterface.Anything}})
precompile(Tuple{SpineInterface.var"#cond#216"{Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:connection, :direction), Tuple{SpineInterface.Object, SpineInterface.Anything}}}}, NamedTuple{(:connection, :node, :direction), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{typeof(Base.in), SpineInterface.Object, SpineInterface.Object})
precompile(Tuple{typeof(Base.length), Array{SpineInterface.Object, 1}})
precompile(Tuple{typeof(Base.symdiff), Array{SpineInterface.Object, 1}, Array{SpineInterface.Object, 1}})
precompile(Tuple{Type{Base.Iterators.Zip{Is} where Is<:Tuple}, Tuple{Tuple{Symbol, Symbol}, Array{SpineInterface.Object, 1}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:connection,), Tuple{SpineInterface.Object}}, Base.Iterators.Zip{Tuple{Tuple{Symbol, Symbol}, Array{SpineInterface.Object, 1}}}})
precompile(Tuple{Type{NamedTuple{(:node1, :node2), T} where T<:Tuple}, Array{SpineInterface.Object, 1}})
precompile(Tuple{Type{NamedTuple{(:node1, :node2), T} where T<:Tuple}, Tuple{SpineInterface.Object, SpineInterface.Object}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:node1, :node2), Tuple{SpineInterface.Object, SpineInterface.Object}}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:connection,), Tuple{SpineInterface.Object}}, NamedTuple{(:node1, :node2), Tuple{SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:connection, :node1, :node2), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}}, NamedTuple{(:_strict,), Tuple{Bool}}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:connection, :node1, :node2), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}}}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Base.Missing, 1}}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Union{Base.Missing, SpineInterface.Object}, 1}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:connection, :node1, :node2, :_strict), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, Bool}}, SpineInterface.Parameter})
precompile(Tuple{typeof(SpineInterface._entity_pvals), Base.Dict{Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}}, Base.Dict{Symbol, SpineInterface.ParameterValue{T} where T}}, Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}})
precompile(Tuple{SpineInterface.ParameterValue{Float64}})
precompile(Tuple{typeof(Base.:(==)), Float64, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#712#715", Array{SpineInterface.Object, 1}})
precompile(Tuple{typeof(Base.all), Base.Generator{Array{SpineInterface.Object, 1}, SpineOpt.var"#712#715"}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:node,), Tuple{SpineInterface.Object}}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:node,), Tuple{SpineInterface.Object}}, SpineInterface.Parameter})
precompile(Tuple{typeof(SpineInterface._entity_pvals), Base.Dict{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, Base.Dict{Symbol, SpineInterface.ParameterValue{T} where T}}, SpineInterface.Object})
precompile(Tuple{SpineInterface.ParameterValue{Bool}})
precompile(Tuple{typeof(SpineInterface.add_object_parameter_values!), SpineInterface.ObjectClass, Base.Dict{SpineInterface.Object, Base.Dict{Symbol, SpineInterface.ParameterValue{Bool}}}})
precompile(Tuple{typeof(Base.getproperty), SpineInterface.Parameter, Symbol})
precompile(Tuple{typeof(Base.push!), Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.ObjectClass})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:has_ptdf,), Tuple{Bool}}, SpineInterface.ObjectClass})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#719#723"{SpineOpt.var"#_new_connection_pvals#720"}, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, SpineOpt.var"#719#723"{SpineOpt.var"#_new_connection_pvals#720"}}})
precompile(Tuple{typeof(SpineInterface.add_object_parameter_values!), SpineInterface.ObjectClass, Base.Dict{Any, Any}})
precompile(Tuple{typeof(SpineOpt._filter_ptdf_values), Base.Dict{Any, Any}})
precompile(Tuple{typeof(Base.filter), SpineOpt.var"#736#739", Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}})
precompile(Tuple{Type{Base.Iterators.Filter{F, I} where I where F}, SpineOpt.var"#738#741"{Float64}, Base.Dict{Any, Any}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#737#740", Base.Iterators.Filter{SpineOpt.var"#738#741"{Float64}, Base.Dict{Any, Any}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Base.Iterators.Filter{SpineOpt.var"#738#741"{Float64}, Base.Dict{Any, Any}}, SpineOpt.var"#737#740"}})
precompile(Tuple{Type{SpineInterface.RelationshipClass}, Symbol, Array{Symbol, 1}, Base.KeySet{Any, Base.Dict{Any, Any}}, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Base.convert), Type{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}}, Array{Any, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#748#756"{SpineOpt.var"#_lodf_fn#749"}, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#747#752", Base.Generator{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, SpineOpt.var"#748#756"{SpineOpt.var"#_lodf_fn#749"}}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Base.Generator{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, SpineOpt.var"#748#756"{SpineOpt.var"#_lodf_fn#749"}}, SpineOpt.var"#747#752"}})
precompile(Tuple{Type{NamedTuple{(:atol,), T} where T<:Tuple}, Tuple{Float64}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Iterators.Flatten{Base.Generator{Base.Generator{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, SpineOpt.var"#748#756"{SpineOpt.var"#_lodf_fn#749"}}, SpineOpt.var"#747#752"}}})
precompile(Tuple{SpineInterface.ParameterValue{Int64}})
precompile(Tuple{typeof(Base.empty), Array{Any, 1}, Type{SpineInterface.Object}})
precompile(Tuple{typeof(Base.push!), Array{SpineInterface.Object, 1}, SpineInterface.Object})
precompile(Tuple{typeof(Base.grow_to!), Array{SpineInterface.Object, 1}, Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SpineInterface.Parameter}}}, Tuple{Int64, Base.Generator{Base.Iterators.Filter{SpineInterface.var"#243#246"{SpineInterface.ObjectClass, SpineInterface.Parameter}, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}}, typeof(Base.identity)}, Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.Iterators.Filter{SpineInterface.var"#243#246"{SpineInterface.ObjectClass, SpineInterface.Parameter}, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}}, typeof(Base.identity)}, Int64})
precompile(Tuple{typeof(Base.Iterators.flatten), Tuple{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#758#785", Base.Iterators.Flatten{Tuple{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}}}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Base.Iterators.Flatten{Tuple{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}}}, SpineOpt.var"#758#785"}})
precompile(Tuple{typeof(Base.unique), Base.Iterators.Flatten{Base.Generator{Base.Iterators.Flatten{Tuple{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}}}, SpineOpt.var"#758#785"}}})
precompile(Tuple{SpineOpt.var"#758#785", NamedTuple{(:unit, :node, :direction), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{SpineInterface.var"#cond#216"{Base.Pairs{Symbol, SpineInterface.Object, Tuple{Symbol}, NamedTuple{(:node,), Tuple{SpineInterface.Object}}}}, NamedTuple{(:node, :temporal_block), Tuple{SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#757#786"{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}, Array{SpineInterface.Object, 1}})
precompile(Tuple{SpineOpt.var"#757#786"{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}, SpineInterface.Object})
precompile(Tuple{typeof(Base.getindex), Type{NTuple{4, SpineInterface.Object}}, NTuple{4, SpineInterface.Object}})
precompile(Tuple{Type{Base.Set{NTuple{4, SpineInterface.Object}}}, Tuple{NTuple{4, SpineInterface.Object}}})
precompile(Tuple{typeof(Base._unique_from), Base.Iterators.Flatten{Base.Generator{Base.Iterators.Flatten{Tuple{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}}}, SpineOpt.var"#758#785"}}, Array{NTuple{4, SpineInterface.Object}, 1}, Base.Set{NTuple{4, SpineInterface.Object}}, Tuple{Tuple{Int64, Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, Int64}, Base.Generator{Array{SpineInterface.Object, 1}, SpineOpt.var"#757#786"{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}}, Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Flatten{Base.Generator{Base.Iterators.Flatten{Tuple{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}}}, SpineOpt.var"#758#785"}}, Tuple{Tuple{Int64, Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, Int64}, Base.Generator{Array{SpineInterface.Object, 1}, SpineOpt.var"#757#786"{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}}, Int64}})
precompile(Tuple{typeof(Base.in!), NTuple{4, SpineInterface.Object}, Base.Set{NTuple{4, SpineInterface.Object}}})
precompile(Tuple{typeof(Base.push!), Array{NTuple{4, SpineInterface.Object}, 1}, NTuple{4, SpineInterface.Object}})
precompile(Tuple{Type{SpineInterface.RelationshipClass}, Symbol, Array{Symbol, 1}, Array{NTuple{4, SpineInterface.Object}, 1}})
precompile(Tuple{typeof(Base._array_for), Type{NamedTuple{(:unit, :node, :direction, :temporal_block), NTuple{4, SpineInterface.Object}}}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{NamedTuple{(:unit, :node, :direction, :temporal_block), NTuple{4, SpineInterface.Object}}, 1}, NamedTuple{(:unit, :node, :direction, :temporal_block), NTuple{4, SpineInterface.Object}}, Base.Generator{Array{NTuple{4, SpineInterface.Object}, 1}, SpineInterface.var"#1#2"{Array{Symbol, 1}}}, Int64})
precompile(Tuple{typeof(Base.convert), Type{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}}, Array{NamedTuple{(:unit, :node, :direction, :temporal_block), NTuple{4, SpineInterface.Object}}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#760#787", Base.Iterators.Flatten{Tuple{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}}}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Base.Iterators.Flatten{Tuple{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}}}, SpineOpt.var"#760#787"}})
precompile(Tuple{typeof(Base.unique), Base.Iterators.Flatten{Base.Generator{Base.Iterators.Flatten{Tuple{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}}}, SpineOpt.var"#760#787"}}})
precompile(Tuple{SpineOpt.var"#760#787", NamedTuple{(:connection, :node, :direction), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#759#788"{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}, Array{SpineInterface.Object, 1}})
precompile(Tuple{SpineOpt.var"#759#788"{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}, SpineInterface.Object})
precompile(Tuple{typeof(Base._unique_from), Base.Iterators.Flatten{Base.Generator{Base.Iterators.Flatten{Tuple{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}}}, SpineOpt.var"#760#787"}}, Array{NTuple{4, SpineInterface.Object}, 1}, Base.Set{NTuple{4, SpineInterface.Object}}, Tuple{Tuple{Int64, Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, Int64}, Base.Generator{Array{SpineInterface.Object, 1}, SpineOpt.var"#759#788"{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}}, Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Flatten{Base.Generator{Base.Iterators.Flatten{Tuple{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}}}, SpineOpt.var"#760#787"}}, Tuple{Tuple{Int64, Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, Int64}, Base.Generator{Array{SpineInterface.Object, 1}, SpineOpt.var"#759#788"{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}}, Int64}})
precompile(Tuple{typeof(Base._array_for), Type{NamedTuple{(:connection, :node, :direction, :temporal_block), NTuple{4, SpineInterface.Object}}}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{NamedTuple{(:connection, :node, :direction, :temporal_block), NTuple{4, SpineInterface.Object}}, 1}, NamedTuple{(:connection, :node, :direction, :temporal_block), NTuple{4, SpineInterface.Object}}, Base.Generator{Array{NTuple{4, SpineInterface.Object}, 1}, SpineInterface.var"#1#2"{Array{Symbol, 1}}}, Int64})
precompile(Tuple{typeof(Base.convert), Type{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}}, Array{NamedTuple{(:connection, :node, :direction, :temporal_block), NTuple{4, SpineInterface.Object}}, 1}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:has_state,), Tuple{Bool}}, SpineInterface.ObjectClass})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#762#789", Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, SpineOpt.var"#762#789"}})
precompile(Tuple{typeof(Base.unique), Base.Iterators.Flatten{Base.Generator{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, SpineOpt.var"#762#789"}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#761#790"{SpineInterface.Object}, Array{SpineInterface.Object, 1}})
precompile(Tuple{SpineOpt.var"#761#790"{SpineInterface.Object}, SpineInterface.Object})
precompile(Tuple{typeof(Base.getindex), Type{NamedTuple{(:node, :temporal_block), Tuple{SpineInterface.Object, SpineInterface.Object}}}, NamedTuple{(:node, :temporal_block), Tuple{SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{Type{Base.Set{NamedTuple{(:node, :temporal_block), Tuple{SpineInterface.Object, SpineInterface.Object}}}}, Tuple{NamedTuple{(:node, :temporal_block), Tuple{SpineInterface.Object, SpineInterface.Object}}}})
precompile(Tuple{typeof(Base._unique_from), Base.Iterators.Flatten{Base.Generator{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, SpineOpt.var"#762#789"}}, Array{NamedTuple{(:node, :temporal_block), Tuple{SpineInterface.Object, SpineInterface.Object}}, 1}, Base.Set{NamedTuple{(:node, :temporal_block), Tuple{SpineInterface.Object, SpineInterface.Object}}}, Tuple{Int64, Base.Generator{Array{SpineInterface.Object, 1}, SpineOpt.var"#761#790"{SpineInterface.Object}}, Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Flatten{Base.Generator{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, SpineOpt.var"#762#789"}}, Tuple{Int64, Base.Generator{Array{SpineInterface.Object, 1}, SpineOpt.var"#761#790"{SpineInterface.Object}}, Int64}})
precompile(Tuple{Type{SpineInterface.RelationshipClass}, Symbol, Array{Symbol, 1}, Array{NamedTuple{(:node, :temporal_block), Tuple{SpineInterface.Object, SpineInterface.Object}}, 1}})
precompile(Tuple{Base.var"##s88#234", Any, Any, Any})
precompile(Tuple{typeof(Base._array_for), Type{Int64}, Base.UnitRange{Int64}, Base.HasShape{1}})
precompile(Tuple{Type{Base.LinearIndices{N, R} where R<:Tuple{Vararg{Base.AbstractUnitRange{Int64}, N}} where N}, Array{Int64, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Base.var"#235#237"{DataType, Array{Int64, 1}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.UnitRange{Int64}, Base.var"#235#237"{DataType, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.UnitRange{Int64}, Base.var"#235#237"{DataType, Array{Int64, 1}}}, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Int64, 1}, Int64})
precompile(Tuple{Type{NamedTuple{(:node, :temporal_block), T} where T<:Tuple}, NamedTuple{(:node, :temporal_block), Tuple{SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, NamedTuple{(:node, :temporal_block), Tuple{SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{NamedTuple{(:node, :temporal_block), Tuple{SpineInterface.Object, SpineInterface.Object}}, 1}, NamedTuple{(:node, :temporal_block), Tuple{SpineInterface.Object, SpineInterface.Object}}, Base.Generator{Array{NamedTuple{(:node, :temporal_block), Tuple{SpineInterface.Object, SpineInterface.Object}}, 1}, SpineInterface.var"#1#2"{Array{Symbol, 1}}}, Int64})
precompile(Tuple{typeof(Base.convert), Type{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}}, Array{NamedTuple{(:node, :temporal_block), Tuple{SpineInterface.Object, SpineInterface.Object}}, 1}})
precompile(Tuple{SpineInterface.var"#243#246"{SpineInterface.RelationshipClass, SpineInterface.Parameter}, NamedTuple{(:unit, :node, :direction), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{Type{SpineInterface.RelationshipClass}, Symbol, Array{Symbol, 1}, Array{Any, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#869#872", Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, SpineOpt.var"#869#872"}})
precompile(Tuple{SpineOpt.var"#869#872", SpineInterface.Object})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:model,), Tuple{SpineInterface.Object}}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:model,), Tuple{SpineInterface.Object}}, SpineInterface.Parameter})
precompile(Tuple{SpineInterface.ParameterValue{Dates.DateTime}})
precompile(Tuple{typeof(Base._array_for), Type{Dates.DateTime}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Dates.DateTime, 1}, Dates.DateTime, Base.Generator{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, SpineOpt.var"#869#872"}, Int64})
precompile(Tuple{typeof(Base.reduce_empty), Base.MappingRF{Base.var"#308#309"{typeof(Base.identity)}, Base.BottomRF{typeof(Base._rf_findmin)}}, Type{Pair{Int64, Dates.DateTime}}})
precompile(Tuple{typeof(Base.argmin), Array{Dates.DateTime, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, Int64})
precompile(Tuple{Type{NamedTuple{(:model,), T} where T<:Tuple}, Tuple{SpineInterface.Object}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:model, :_strict), Tuple{SpineInterface.Object, Bool}}, SpineInterface.Parameter})
precompile(Tuple{typeof(Base.get), Base.Dict{Symbol, DataType}, Symbol, Type})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#870#873"{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, DataType, Dates.DateTime, Symbol}, Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SpineInterface.Parameter}}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SpineInterface.Parameter}}}, SpineOpt.var"#870#873"{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, DataType, Dates.DateTime, Symbol}}})
precompile(Tuple{typeof(Base.vect), SpineInterface.RelationshipClass, Vararg{SpineInterface.RelationshipClass}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#876#882", Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}})
precompile(Tuple{typeof(Base.convert), Type{Base.Fix1{Type{Base.MappingRF{F, T} where T where F}, SpineOpt.var"#876#882"}}, Base.Fix1{Type{Base.MappingRF{F, T} where T where F}, SpineOpt.var"#876#882"}})
precompile(Tuple{typeof(Base.reduce_empty), Base.MappingRF{SpineOpt.var"#876#882", Base.BottomRF{typeof(Base.min)}}, Type{Union{Union{Int64, SpineInterface.Object}, SpineInterface.TimeSlice}}})
precompile(Tuple{typeof(Base.minimum), Base.Generator{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, SpineOpt.var"#876#882"}})
precompile(Tuple{Base.MappingRF{SpineOpt.var"#876#882", Base.BottomRF{typeof(Base.min)}}, Base._InitialValue, SpineInterface.Object})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#877#883", Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}})
precompile(Tuple{typeof(Base.convert), Type{Base.Fix1{Type{Base.MappingRF{F, T} where T where F}, SpineOpt.var"#877#883"}}, Base.Fix1{Type{Base.MappingRF{F, T} where T where F}, SpineOpt.var"#877#883"}})
precompile(Tuple{typeof(Base.reduce_empty), Base.MappingRF{SpineOpt.var"#877#883", Base.BottomRF{typeof(Base.max)}}, Type{Union{Union{Int64, SpineInterface.Object}, SpineInterface.TimeSlice}}})
precompile(Tuple{typeof(Base.maximum), Base.Generator{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, SpineOpt.var"#877#883"}})
precompile(Tuple{Base.MappingRF{SpineOpt.var"#877#883", Base.BottomRF{typeof(Base.max)}}, Base._InitialValue, SpineInterface.Object})
precompile(Tuple{SpineOpt.var"#_apply_forced_availability_factor#878", Dates.DateTime, Dates.DateTime, SpineInterface.ObjectClass, SpineInterface.Parameter})
precompile(Tuple{Type{NamedTuple{(:unit,), T} where T<:Tuple}, Tuple{SpineInterface.Object}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:unit,), Tuple{SpineInterface.Object}}, NamedTuple{(:_strict,), Tuple{Bool}}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:unit,), Tuple{SpineInterface.Object}}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:unit, :_strict), Tuple{SpineInterface.Object, Bool}}, SpineInterface.Parameter})
precompile(Tuple{typeof(SpineInterface._entity_pvals), Base.Dict{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, Base.Dict{Symbol, SpineInterface.ParameterValue{T} where T}}, Base.Missing})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{SpineInterface.Object, Base.Dict{Any, Any}}, Base.Generator{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, SpineOpt.var"#875#881"{SpineInterface.ObjectClass, SpineOpt.var"#_new_pvals#880"{SpineInterface.Parameter}}}, Int64})
precompile(Tuple{typeof(SpineInterface.add_object_parameter_values!), SpineInterface.ObjectClass, Base.Dict{SpineInterface.Object, Base.Dict{Any, Any}}})
precompile(Tuple{Type{NamedTuple{(:connection,), T} where T<:Tuple}, Tuple{SpineInterface.Object}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:connection,), Tuple{SpineInterface.Object}}, NamedTuple{(:_strict,), Tuple{Bool}}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:connection,), Tuple{SpineInterface.Object}}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:connection, :_strict), Tuple{SpineInterface.Object, Bool}}, SpineInterface.Parameter})
precompile(Tuple{typeof(Base.iterate), Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:model_type,), Tuple{Symbol}}, SpineInterface.ObjectClass})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#889#896", Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, SpineOpt.var"#889#896"}})
precompile(Tuple{typeof(Base.collect), Base.Iterators.Flatten{Base.Generator{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, SpineOpt.var"#889#896"}}})
precompile(Tuple{Type{Base.Iterators.Filter{F, I} where I where F}, SpineOpt.var"#888#898"{SpineInterface.Object}, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#887#897"{SpineInterface.Object}, Base.Iterators.Filter{SpineOpt.var"#888#898"{SpineInterface.Object}, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Filter{SpineOpt.var"#888#898"{SpineInterface.Object}, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}}})
precompile(Tuple{typeof(Base.join), Array{Any, 1}, String, String})
precompile(Tuple{typeof(Base.join), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{Any, 1}, String, String})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#892#899", Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, SpineOpt.var"#892#899"}})
precompile(Tuple{typeof(Base.collect), Base.Iterators.Flatten{Base.Generator{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, SpineOpt.var"#892#899"}}})
precompile(Tuple{Type{Base.Iterators.Filter{F, I} where I where F}, SpineOpt.var"#891#901"{SpineInterface.Object}, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#890#900"{SpineInterface.Object}, Base.Iterators.Filter{SpineOpt.var"#891#901"{SpineInterface.Object}, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Filter{SpineOpt.var"#891#901"{SpineInterface.Object}, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:node,), Tuple{Array{SpineInterface.Object, 1}}}, SpineInterface.RelationshipClass})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{SpineInterface.Object, 1}, SpineInterface.Object, Base.Generator{Array{Symbol, 1}, SpineInterface.var"#208#214"{Base.Pairs{Symbol, Array{SpineInterface.Object, 1}, Tuple{Symbol}, NamedTuple{(:node,), Tuple{Array{SpineInterface.Object, 1}}}}}}, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{SpineInterface.Object, 1}, Nothing, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Union{Nothing, SpineInterface.Object}, 1}, Base.Generator{Array{Symbol, 1}, SpineInterface.var"#208#214"{Base.Pairs{Symbol, Array{SpineInterface.Object, 1}, Tuple{Symbol}, NamedTuple{(:node,), Tuple{Array{SpineInterface.Object, 1}}}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.get!), SpineInterface.var"#209#215"{Bool, Base.Pairs{Symbol, Array{SpineInterface.Object, 1}, Tuple{Symbol}, NamedTuple{(:node,), Tuple{Array{SpineInterface.Object, 1}}}}, SpineInterface.RelationshipClass}, Base.Dict{Any, Any}, Tuple{SpineInterface.Object, Nothing}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:model,), Tuple{SpineInterface.Object}}, SpineInterface.RelationshipClass})
precompile(Tuple{typeof(Base.get!), SpineInterface.var"#209#215"{Bool, Base.Pairs{Symbol, SpineInterface.Object, Tuple{Symbol}, NamedTuple{(:model,), Tuple{SpineInterface.Object}}}, SpineInterface.RelationshipClass}, Base.Dict{Any, Any}, Tuple{SpineInterface.Object, Nothing}})
precompile(Tuple{SpineInterface.var"#cond#216"{Base.Pairs{Symbol, SpineInterface.Object, Tuple{Symbol}, NamedTuple{(:model,), Tuple{SpineInterface.Object}}}}, NamedTuple{(:model, :temporal_block), Tuple{SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{typeof(Base.intersect), Array{SpineInterface.Object, 1}, Array{SpineInterface.Object, 1}})
precompile(Tuple{typeof(Base.any), Function, Array{SpineInterface.Object, 1}})
precompile(Tuple{typeof(Base._any), typeof(Base.isempty), Array{SpineInterface.Object, 1}, Base.Colon})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#895#902", Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, SpineOpt.var"#895#902"}})
precompile(Tuple{typeof(Base.collect), Base.Iterators.Flatten{Base.Generator{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, SpineOpt.var"#895#902"}}})
precompile(Tuple{Type{Base.Iterators.Filter{F, I} where I where F}, SpineOpt.var"#894#904"{SpineInterface.Object}, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#893#903"{SpineInterface.Object}, Base.Iterators.Filter{SpineOpt.var"#894#904"{SpineInterface.Object}, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Filter{SpineOpt.var"#894#904"{SpineInterface.Object}, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}}})
precompile(Tuple{typeof(SpineOpt._check_warn), Bool, String, Vararg{String}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#907#915", Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, SpineOpt.var"#907#915"}})
precompile(Tuple{typeof(Base.collect), Base.Iterators.Flatten{Base.Generator{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, SpineOpt.var"#907#915"}}})
precompile(Tuple{Type{Base.Iterators.Filter{F, I} where I where F}, SpineOpt.var"#906#917"{SpineInterface.Object}, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#905#916"{SpineInterface.Object}, Base.Iterators.Filter{SpineOpt.var"#906#917"{SpineInterface.Object}, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Filter{SpineOpt.var"#906#917"{SpineInterface.Object}, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}}})
precompile(Tuple{SpineInterface.var"#cond#216"{Base.Pairs{Symbol, SpineInterface.Object, Tuple{Symbol}, NamedTuple{(:node,), Tuple{SpineInterface.Object}}}}, NamedTuple{(:node, :stochastic_structure), Tuple{SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{SpineInterface.var"#cond#216"{Base.Pairs{Symbol, SpineInterface.Object, Tuple{Symbol}, NamedTuple{(:model,), Tuple{SpineInterface.Object}}}}, NamedTuple{(:model, :stochastic_structure), Tuple{SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#911#918", Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, SpineOpt.var"#911#918"}})
precompile(Tuple{typeof(Base.collect), Base.Iterators.Flatten{Base.Generator{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, SpineOpt.var"#911#918"}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#910#919"{SpineInterface.Object}, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, SpineOpt.var"#910#919"{SpineInterface.Object}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Flatten{Base.Generator{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, SpineOpt.var"#910#919"{SpineInterface.Object}}}, Tuple{}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#914#922", Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, SpineOpt.var"#914#922"}})
precompile(Tuple{typeof(Base.collect), Base.Iterators.Flatten{Base.Generator{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, SpineOpt.var"#914#922"}}})
precompile(Tuple{Type{Base.Iterators.Filter{F, I} where I where F}, SpineOpt.var"#913#924"{SpineInterface.Object}, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#912#923"{SpineInterface.Object}, Base.Iterators.Filter{SpineOpt.var"#913#924"{SpineInterface.Object}, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Filter{SpineOpt.var"#913#924"{SpineInterface.Object}, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#928#929", Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, SpineOpt.var"#928#929"}})
precompile(Tuple{typeof(Base.collect), Base.Iterators.Flatten{Base.Generator{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, SpineOpt.var"#928#929"}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#927#930"{SpineInterface.Object}, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, SpineOpt.var"#927#930"{SpineInterface.Object}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Flatten{Base.Generator{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, SpineOpt.var"#927#930"{SpineInterface.Object}}}, Tuple{}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:unit,), Tuple{SpineInterface.Object}}, SpineInterface.RelationshipClass})
precompile(Tuple{typeof(Base.get!), SpineInterface.var"#209#215"{Bool, Base.Pairs{Symbol, SpineInterface.Object, Tuple{Symbol}, NamedTuple{(:unit,), Tuple{SpineInterface.Object}}}, SpineInterface.RelationshipClass}, Base.Dict{Any, Any}, Tuple{SpineInterface.Object, Nothing}})
precompile(Tuple{SpineInterface.var"#cond#216"{Base.Pairs{Symbol, SpineInterface.Object, Tuple{Symbol}, NamedTuple{(:unit,), Tuple{SpineInterface.Object}}}}, NamedTuple{(:unit, :stochastic_structure), Tuple{SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{typeof(Base.join), Array{Tuple{Any, Any, Any}, 1}, String, String})
precompile(Tuple{typeof(Base.join), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{Tuple{Any, Any, Any}, 1}, String, String})
precompile(Tuple{Type{NamedTuple{(:model, :i, :_strict), T} where T<:Tuple}, Tuple{SpineInterface.Object, Int64, Bool}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:model, :i), Tuple{SpineInterface.Object, Int64}}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:model, :i, :_strict), Tuple{SpineInterface.Object, Int64, Bool}}, SpineInterface.Parameter})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{Symbol, Any}, Int64, Symbol})
precompile(Tuple{Type{NamedTuple{(:i,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:i,), Tuple{Int64}}, SpineInterface.ParameterValue{Dates.Hour}})
precompile(Tuple{Type{NamedTuple{(:stochastic_structure,), T} where T<:Tuple}, Tuple{Array{SpineInterface.Object, 1}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:stochastic_structure,), Tuple{Array{SpineInterface.Object, 1}}}, typeof(SpineInterface.indices), SpineInterface.Parameter})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:stochastic_structure,), Tuple{Array{SpineInterface.Object, 1}}}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, Array{SpineInterface.Object, 1}, Tuple{Symbol}, NamedTuple{(:stochastic_structure,), Tuple{Array{SpineInterface.Object, 1}}}}, SpineInterface.Parameter}}}, Tuple{}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{SpineInterface.Object, 1}, SpineInterface.Object, Base.Generator{Array{Symbol, 1}, SpineInterface.var"#208#214"{Base.Pairs{Symbol, Array{SpineInterface.Object, 1}, Tuple{Symbol}, NamedTuple{(:stochastic_structure,), Tuple{Array{SpineInterface.Object, 1}}}}}}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Union{Nothing, SpineInterface.Object}, 1}, Base.Generator{Array{Symbol, 1}, SpineInterface.var"#208#214"{Base.Pairs{Symbol, Array{SpineInterface.Object, 1}, Tuple{Symbol}, NamedTuple{(:stochastic_structure,), Tuple{Array{SpineInterface.Object, 1}}}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.get!), SpineInterface.var"#209#215"{Bool, Base.Pairs{Symbol, Array{SpineInterface.Object, 1}, Tuple{Symbol}, NamedTuple{(:stochastic_structure,), Tuple{Array{SpineInterface.Object, 1}}}}, SpineInterface.RelationshipClass}, Base.Dict{Any, Any}, Tuple{SpineInterface.Object, Nothing}})
precompile(Tuple{SpineInterface.var"#cond#216"{Base.Pairs{Symbol, Array{SpineInterface.Object, 1}, Tuple{Symbol}, NamedTuple{(:stochastic_structure,), Tuple{Array{SpineInterface.Object, 1}}}}}, NamedTuple{(:stochastic_structure, :stochastic_scenario), Tuple{SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{Type{Base.Iterators.Filter{F, I} where I where F}, SpineInterface.var"#243#246"{SpineInterface.RelationshipClass, SpineInterface.Parameter}, Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.identity), Base.Iterators.Filter{SpineInterface.var"#243#246"{SpineInterface.RelationshipClass, SpineInterface.Parameter}, Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}}})
precompile(Tuple{SpineInterface.var"#243#246"{SpineInterface.RelationshipClass, SpineInterface.Parameter}, NamedTuple{(:stochastic_structure, :stochastic_scenario), Tuple{SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{typeof(Base.:(<=)), Dates.DateTime, Dates.DateTime})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Function})
precompile(Tuple{Type{NamedTuple{(:mip_solver, :lp_solver, :add_user_variables, :add_constraints, :log_level, :optimize, :update_names, :alternative, :write_as_roll, :resume_file_path, :use_direct_model), T} where T<:Tuple}, Tuple{Nothing, Nothing, SpineOpt.var"#62#72", SpineOpt.var"#63#73", Int64, Bool, Bool, String, Int64, Nothing, Bool}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:mip_solver, :lp_solver, :add_user_variables, :add_constraints, :log_level, :optimize, :update_names, :alternative, :write_as_roll, :resume_file_path, :use_direct_model), Tuple{Nothing, Nothing, SpineOpt.var"#62#72", SpineOpt.var"#63#73", Int64, Bool, Bool, String, Int64, Nothing, Bool}}, typeof(SpineOpt.rerun_spineopt), String})
precompile(Tuple{SpineOpt.var"##rerun_spineopt#86", Nothing, Nothing, Function, Function, Function, Int64, Bool, Bool, String, Int64, Nothing, Bool, typeof(SpineOpt.rerun_spineopt), String})
precompile(Tuple{typeof(Base.first), Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}})
precompile(Tuple{typeof(SpineOpt._mip_solver), SpineInterface.Object, Nothing})
precompile(Tuple{SpineInterface.ParameterValue{SpineInterface.Map{Symbol, SpineInterface.ParameterValue{T} where T}}})
precompile(Tuple{typeof(SpineInterface._recursive_inner_value), SpineInterface.ParameterValue{SpineInterface.Map{Symbol, SpineInterface.ParameterValue{Float64}}}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SpineInterface._recursive_inner_value), Tuple{Base.Broadcast.Extruded{Array{SpineInterface.ParameterValue{T} where T, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{SpineInterface.Map{Symbol, Float64}}})
precompile(Tuple{typeof(Base.setindex!), Array{SpineInterface.Map{Symbol, Float64}, 1}, SpineInterface.Map{Symbol, Float64}, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{SpineInterface.Map{Symbol, Float64}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SpineInterface._recursive_inner_value), Tuple{Base.Broadcast.Extruded{Array{SpineInterface.ParameterValue{T} where T, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(SpineInterface._recursive_inner_value), SpineInterface.ParameterValue{SpineInterface.Map{Symbol, SpineInterface.ParameterValue{T} where T}}})
precompile(Tuple{typeof(SpineInterface._recursive_inner_value), SpineInterface.ParameterValue{Int64}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SpineInterface._recursive_inner_value), Tuple{Base.Broadcast.Extruded{Array{SpineInterface.ParameterValue{T} where T, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{Int64}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Int64, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SpineInterface._recursive_inner_value), Tuple{Base.Broadcast.Extruded{Array{SpineInterface.ParameterValue{T} where T, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(SpineInterface._recursive_inner_value), SpineInterface.ParameterValue{Float64}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SpineInterface._recursive_inner_value), Tuple{Base.Broadcast.Extruded{Array{SpineInterface.ParameterValue{T} where T, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{Real}})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{Real, 1}, Array{Int64, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SpineInterface._recursive_inner_value), Tuple{Base.Broadcast.Extruded{Array{SpineInterface.ParameterValue{T} where T, 1}, Tuple{Bool}, Tuple{Int64}}}}, Float64, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Real, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SpineInterface._recursive_inner_value), Tuple{Base.Broadcast.Extruded{Array{SpineInterface.ParameterValue{T} where T, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{Type{SpineInterface.Map{K, V} where V where K}, Array{Symbol, 1}, Array{Real, 1}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SpineInterface._recursive_inner_value), Tuple{Base.Broadcast.Extruded{Array{SpineInterface.ParameterValue{T} where T, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{SpineInterface.Map{Symbol, V} where V}})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{SpineInterface.Map{Symbol, V} where V, 1}, Array{SpineInterface.Map{Symbol, Float64}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SpineInterface._recursive_inner_value), Tuple{Base.Broadcast.Extruded{Array{SpineInterface.ParameterValue{T} where T, 1}, Tuple{Bool}, Tuple{Int64}}}}, SpineInterface.Map{Symbol, Real}, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{SpineInterface.Map{Symbol, V} where V, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SpineInterface._recursive_inner_value), Tuple{Base.Broadcast.Extruded{Array{SpineInterface.ParameterValue{T} where T, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SpineInterface._recursive_inner_value), Tuple{Base.Broadcast.Extruded{Array{SpineInterface.ParameterValue{T} where T, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{Float64}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Float64, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SpineInterface._recursive_inner_value), Tuple{Base.Broadcast.Extruded{Array{SpineInterface.ParameterValue{T} where T, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(SpineInterface._recursive_inner_value), SpineInterface.ParameterValue{Symbol}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SpineInterface._recursive_inner_value), Tuple{Base.Broadcast.Extruded{Array{SpineInterface.ParameterValue{T} where T, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{Any}})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{Any, 1}, Array{Float64, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SpineInterface._recursive_inner_value), Tuple{Base.Broadcast.Extruded{Array{SpineInterface.ParameterValue{T} where T, 1}, Tuple{Bool}, Tuple{Int64}}}}, Symbol, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{Type{SpineInterface.Map{K, V} where V where K}, Array{Symbol, 1}, Array{Any, 1}})
precompile(Tuple{Type{SpineInterface.Map{K, V} where V where K}, Array{Symbol, 1}, Array{SpineInterface.Map{Symbol, V} where V, 1}})
precompile(Tuple{typeof(SpineOpt._db_solver), Function, Symbol, SpineInterface.Map{Symbol, SpineInterface.Map{Symbol, V} where V}})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, SpineInterface.Map{Symbol, Float64}})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, SpineInterface.Map{Symbol, Real}})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, SpineInterface.Map{Symbol, Any}})
precompile(Tuple{SpineOpt.var"#110#112", Pair{Symbol, SpineInterface.Map{Symbol, Any}}})
precompile(Tuple{typeof(Base.iterate), SpineInterface.Map{Symbol, Any}})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, Float64})
precompile(Tuple{SpineOpt.var"#109#113"{SpineInterface.Map{Symbol, Any}, Symbol}, Pair{Symbol, Float64}})
precompile(Tuple{typeof(Base.empty), Array{Any, 1}, Type{Pair{String, Float64}}})
precompile(Tuple{typeof(Base.push!), Array{Pair{String, Float64}, 1}, Pair{String, Float64}})
precompile(Tuple{typeof(Base.grow_to!), Array{Pair{String, Float64}, 1}, Base.Iterators.Flatten{Base.Generator{Base.Iterators.Filter{SpineOpt.var"#111#114"{Symbol}, SpineInterface.Map{Symbol, SpineInterface.Map{Symbol, V} where V}}, SpineOpt.var"#110#112"}}, Tuple{Int64, Base.Generator{SpineInterface.Map{Symbol, Any}, SpineOpt.var"#109#113"{SpineInterface.Map{Symbol, Any}, Symbol}}, Int64}})
precompile(Tuple{SpineOpt.var"#109#113"{SpineInterface.Map{Symbol, Any}, Symbol}, Pair{Symbol, Symbol}})
precompile(Tuple{typeof(Base.push_widen), Array{Pair{String, Float64}, 1}, Pair{String, String}})
precompile(Tuple{typeof(Base.grow_to!), Array{Pair{String, _A} where _A, 1}, Base.Iterators.Flatten{Base.Generator{Base.Iterators.Filter{SpineOpt.var"#111#114"{Symbol}, SpineInterface.Map{Symbol, SpineInterface.Map{Symbol, V} where V}}, SpineOpt.var"#110#112"}}, Tuple{Int64, Base.Generator{SpineInterface.Map{Symbol, Any}, SpineOpt.var"#109#113"{SpineInterface.Map{Symbol, Any}, Symbol}}, Int64}})
precompile(Tuple{SpineOpt.var"#109#113"{SpineInterface.Map{Symbol, Any}, Symbol}, Pair{Symbol, Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Flatten{Base.Generator{Base.Iterators.Filter{SpineOpt.var"#111#114"{Symbol}, SpineInterface.Map{Symbol, SpineInterface.Map{Symbol, V} where V}}, SpineOpt.var"#110#112"}}, Tuple{Int64, Base.Generator{SpineInterface.Map{Symbol, Any}, SpineOpt.var"#109#113"{SpineInterface.Map{Symbol, Any}, Symbol}}, Int64}})
precompile(Tuple{typeof(JuMP.optimizer_with_attributes), Function, Pair{String, Float64}, Vararg{Pair{A, B} where B where A}})
precompile(Tuple{Type{MathOptInterface.OptimizerWithAttributes}, Function, Pair{String, Float64}, Pair{String, String}, Pair{String, Int64}, Pair{String, Float64}})
precompile(Tuple{typeof(SpineOpt._lp_solver), SpineInterface.Object, Nothing})
precompile(Tuple{typeof(SpineInterface._recursive_inner_value), SpineInterface.ParameterValue{SpineInterface.Map{Symbol, SpineInterface.ParameterValue{Int64}}}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SpineInterface._recursive_inner_value), Tuple{Base.Broadcast.Extruded{Array{SpineInterface.ParameterValue{T} where T, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{SpineInterface.Map{Symbol, Int64}}})
precompile(Tuple{typeof(Base.setindex!), Array{SpineInterface.Map{Symbol, Int64}, 1}, SpineInterface.Map{Symbol, Int64}, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{SpineInterface.Map{Symbol, Int64}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SpineInterface._recursive_inner_value), Tuple{Base.Broadcast.Extruded{Array{SpineInterface.ParameterValue{T} where T, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SpineInterface._recursive_inner_value), Tuple{Base.Broadcast.Extruded{Array{SpineInterface.ParameterValue{T} where T, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{Symbol}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Symbol, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SpineInterface._recursive_inner_value), Tuple{Base.Broadcast.Extruded{Array{SpineInterface.ParameterValue{T} where T, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{Any, 1}, Array{Symbol, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SpineInterface._recursive_inner_value), Tuple{Base.Broadcast.Extruded{Array{SpineInterface.ParameterValue{T} where T, 1}, Tuple{Bool}, Tuple{Int64}}}}, Float64, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{SpineInterface.Map{Symbol, V} where V, 1}, Array{SpineInterface.Map{Symbol, Int64}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SpineInterface._recursive_inner_value), Tuple{Base.Broadcast.Extruded{Array{SpineInterface.ParameterValue{T} where T, 1}, Tuple{Bool}, Tuple{Int64}}}}, SpineInterface.Map{Symbol, Any}, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, SpineInterface.Map{Symbol, Int64}})
precompile(Tuple{typeof(Base.empty), Array{Any, 1}, Type{Pair{String, String}}})
precompile(Tuple{typeof(Base.push!), Array{Pair{String, String}, 1}, Pair{String, String}})
precompile(Tuple{typeof(Base.grow_to!), Array{Pair{String, String}, 1}, Base.Iterators.Flatten{Base.Generator{Base.Iterators.Filter{SpineOpt.var"#111#114"{Symbol}, SpineInterface.Map{Symbol, SpineInterface.Map{Symbol, V} where V}}, SpineOpt.var"#110#112"}}, Tuple{Int64, Base.Generator{SpineInterface.Map{Symbol, Any}, SpineOpt.var"#109#113"{SpineInterface.Map{Symbol, Any}, Symbol}}, Int64}})
precompile(Tuple{typeof(Base.push_widen), Array{Pair{String, String}, 1}, Pair{String, Float64}})
precompile(Tuple{typeof(JuMP.optimizer_with_attributes), Function, Pair{String, String}, Vararg{Pair{A, B} where B where A}})
precompile(Tuple{Type{MathOptInterface.OptimizerWithAttributes}, Function, Pair{String, String}, Pair{String, Float64}})
precompile(Tuple{Type{NamedTuple{(:with_bridge_type,), T} where T<:Tuple}, Tuple{DataType}})
precompile(Tuple{Type{NamedTuple{(:add_bridges,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(SpineOpt._do_create_model), MathOptInterface.OptimizerWithAttributes, Bool})
precompile(Tuple{SpineOpt.var"#107#108"{Module}})
precompile(Tuple{typeof(MathOptInterface.set), HiGHS.Optimizer, MathOptInterface.RawOptimizerAttribute, Float64})
precompile(Tuple{typeof(MathOptInterface.set), HiGHS.Optimizer, MathOptInterface.RawOptimizerAttribute, String})
precompile(Tuple{Type{SpineOpt.SpineOptExt}, SpineInterface.Object, MathOptInterface.OptimizerWithAttributes, Nothing})
precompile(Tuple{SpineInterface.var"#cond#216"{Base.Pairs{Symbol, SpineInterface.Object, Tuple{Symbol}, NamedTuple{(:model,), Tuple{SpineInterface.Object}}}}, NamedTuple{(:model, :report), Tuple{SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#115#116"{SpineInterface.Object}, Array{SpineInterface.Object, 1}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{SpineInterface.Object, 1}, SpineOpt.var"#115#116"{SpineInterface.Object}}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:report, :output), Tuple{SpineInterface.Object, SpineInterface.Object}}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:report, :output), Tuple{SpineInterface.Object, SpineInterface.Object}}, SpineInterface.Parameter})
precompile(Tuple{typeof(Base._array_for), Type{Tuple{Symbol, Bool}}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Symbol, Bool}, 1}, Tuple{Symbol, Bool}, Base.Generator{Array{SpineInterface.Object, 1}, SpineOpt.var"#115#116"{SpineInterface.Object}}, Int64})
precompile(Tuple{Type{NamedTuple{(:report, :_strict), T} where T<:Tuple}, Tuple{SpineInterface.Object, Bool}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:report,), Tuple{SpineInterface.Object}}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:report, :_strict), Tuple{SpineInterface.Object, Bool}}, SpineInterface.Parameter})
precompile(Tuple{typeof(Base.get!), Base.Dict{Any, Any}, Nothing, Array{Any, 1}})
precompile(Tuple{typeof(Base.iterate), Array{SpineInterface.Object, 1}, Int64})
precompile(Tuple{typeof(Base.get!), Base.Dict{Any, Any}, SpineInterface.Object, Array{Any, 1}})
precompile(Tuple{typeof(Base.getproperty), JuMP.GenericModel{Float64}, Symbol})
precompile(Tuple{typeof(Base.getproperty), SpineOpt.SpineOptExt, Symbol})
precompile(Tuple{Type{NamedTuple{(:add_user_variables, :add_constraints, :log_level, :optimize, :update_names, :alternative, :write_as_roll, :resume_file_path, :alternative_objective), T} where T<:Tuple}, Tuple{SpineOpt.var"#62#72", SpineOpt.var"#63#73", Int64, Bool, Bool, String, Int64, Nothing, SpineOpt.var"#92#98"}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:add_user_variables, :add_constraints, :log_level, :optimize, :update_names, :alternative, :write_as_roll, :resume_file_path, :alternative_objective), Tuple{SpineOpt.var"#62#72", SpineOpt.var"#63#73", Int64, Bool, Bool, String, Int64, Nothing, SpineOpt.var"#92#98"}}, typeof(Base.invokelatest), Any, Any, Vararg{Any}})
precompile(Tuple{Base.var"##invokelatest#2", Base.Pairs{Symbol, Any, NTuple{9, Symbol}, NamedTuple{(:add_user_variables, :add_constraints, :log_level, :optimize, :update_names, :alternative, :write_as_roll, :resume_file_path, :alternative_objective), Tuple{SpineOpt.var"#62#72", SpineOpt.var"#63#73", Int64, Bool, Bool, String, Int64, Nothing, SpineOpt.var"#92#98"}}}, typeof(Base.invokelatest), Any, Any, Vararg{Any}})
precompile(Tuple{Type{Dates.Minute}, Int64})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:scratch,), Tuple{Array{SpineInterface.Object, 1}}}}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:scratch,), Tuple{Array{SpineInterface.TimeSlice, 1}}}}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:scratch,), Tuple{Array{Tuple{SpineInterface.TimeSlice, SpineInterface.TimeSlice}, 1}}}}})
precompile(Tuple{Type{Dates.Minute}, Dates.Hour})
precompile(Tuple{Type{NamedTuple{(:refresh,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(Base.reduce_empty), Base.MappingRF{typeof(Dates.toms), typeof(Base.add_sum)}, Type{Dates.Period}})
precompile(Tuple{Type{NamedTuple{(:init,), T} where T<:Tuple}, Tuple{Dates.Minute}})
precompile(Tuple{Type{SpineOpt.Constant}, Int64})
precompile(Tuple{Type{NamedTuple{(:lb, :bin, :int, :replacement_value), T} where T<:Tuple}, Tuple{SpineOpt.Constant, typeof(SpineOpt.units_on_bin), typeof(SpineOpt.units_on_int), typeof(SpineOpt.units_on_replacement_value)}})
precompile(Tuple{Type{Base.Fix2{F, T} where T where F}, typeof(JuMP._is_expr), Symbol})
precompile(Tuple{Type{MathOptInterface.FileFormats.LP.Options}, Int64, Bool})
precompile(Tuple{Type{MathOptInterface.FileFormats.MOF.Options}, Bool, Bool, MathOptInterface.Nonlinear.SparseReverseMode, Bool})
precompile(Tuple{Type{MathOptInterface.FileFormats.MPS.Options}, Bool, Bool, Bool, MathOptInterface.FileFormats.MPS.QuadraticFormat})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, MathOptInterface.FileFormats.NL.var"#66#68", Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base._similar_shape), Base.Generator{Base.UnitRange{Int64}, MathOptInterface.FileFormats.NL.var"#66#68"}, Base.HasShape{1}})
precompile(Tuple{Type{NamedTuple{(:generic_names,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:generic_names,), Tuple{Bool}}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}})
precompile(Tuple{Type{MathOptInterface.ConstraintIndex{MathOptInterface.VectorOfVariables, MathOptInterface.Reals}}, Int64})
precompile(Tuple{typeof(Base.convert), Type{Tuple{Type}}, Tuple{DataType}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{NamedTuple{(), Tuple{}}, NamedTuple{(), Tuple{}}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{NamedTuple{(), Tuple{}}, NamedTuple{(), Tuple{}}}, Int64, Int64})
precompile(Tuple{typeof(Base.convert), Type{Ptr{Int8}}, Ptr{Nothing}})
precompile(Tuple{typeof(Base.convert), Type{Exception}, ErrorException})
precompile(Tuple{Type{NamedTuple{(:transcode,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{Type{NamedTuple{(:needs_optimizer_map,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{Type{NamedTuple{(:result,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{Type{NamedTuple{(:and_fix,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Pair{Symbol, typeof(SpineOpt.save_connection_avg_throughflow!)}, Int64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Pair{Symbol, typeof(SpineOpt.save_connection_avg_throughflow!)}, Int64}, Int64, Int64})
precompile(Tuple{Type{NamedTuple{(:file,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:file,), Tuple{Bool}}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:largelists, :denseunions, :dictencode, :dictencodenested, :maxdepth), Tuple{Bool, Bool, Bool, Bool, Int64}}}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:compression, :largelists, :denseunions, :dictencodenested), Tuple{Nothing, Bool, Bool, Bool}}}})
precompile(Tuple{Type{Base.ImmutableDict{String, String}}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:compression, :largelists, :denseunions), Tuple{Nothing, Bool, Bool}}}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:dictencode, :maxdepth, :compression, :largelists, :dictencodenested), Tuple{Bool, Int64, Nothing, Bool, Bool}}}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:compression, :largelists, :denseunions, :dictencodenested), Tuple{CodecLz4.LZ4FrameCompressor, Bool, Bool, Bool}}}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:compression, :largelists, :denseunions), Tuple{CodecLz4.LZ4FrameCompressor, Bool, Bool}}}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:dictencode, :maxdepth, :compression, :largelists, :dictencodenested), Tuple{Bool, Int64, CodecLz4.LZ4FrameCompressor, Bool, Bool}}}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:compression, :largelists, :denseunions, :dictencodenested), Tuple{CodecZstd.ZstdCompressor, Bool, Bool, Bool}}}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:compression, :largelists, :denseunions), Tuple{CodecZstd.ZstdCompressor, Bool, Bool}}}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:dictencode, :maxdepth, :compression, :largelists, :dictencodenested), Tuple{Bool, Int64, CodecZstd.ZstdCompressor, Bool, Bool}}}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:compression, :largelists, :denseunions, :dictencodenested), Tuple{Symbol, Bool, Bool, Bool}}}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:compression, :largelists, :denseunions), Tuple{Symbol, Bool, Bool}}}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:dictencode, :maxdepth, :compression, :largelists, :dictencodenested), Tuple{Bool, Int64, Symbol, Bool, Bool}}}})
precompile(Tuple{typeof(Arrow._length_assert)})
precompile(Tuple{Type{NamedTuple{(:compressionlevel,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{typeof(Base.convert), Type{Ptr{CodecLz4.LZ4F_cctx}}, Ptr{Nothing}})
precompile(Tuple{CodecLz4.var"##LZ4F_frameInfo_t#1", CodecLz4.BlockSizeID, CodecLz4.BlockMode, Bool, CodecLz4.FrameType, Int64, Bool, Type{CodecLz4.LZ4F_frameInfo_t}})
precompile(Tuple{typeof(Base.convert), Type{NTuple{4, UInt32}}, NTuple{4, Int64}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:compressionlevel,), Tuple{Int64}}})
precompile(Tuple{Type{NamedTuple{names, T} where T<:Tuple where names}, Base.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:compressionlevel,), Tuple{Int64}}}})
precompile(Tuple{Type{NamedTuple{(:compressionlevel,), T} where T<:Tuple}, NamedTuple{(:compressionlevel,), Tuple{Int64}}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{NamedTuple{(:compressionlevel,), Tuple{Int64}}, NamedTuple{(), Tuple{}}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{NamedTuple{(:compressionlevel,), Tuple{Int64}}, NamedTuple{(), Tuple{}}}, Int64, Int64})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, NamedTuple{(:compressionlevel,), Tuple{Int64}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:compressionlevel,), Tuple{Int64}}, Type{CodecLz4.LZ4F_preferences_t}, CodecLz4.LZ4F_frameInfo_t})
precompile(Tuple{typeof(Base.convert), Type{CodecLz4.LZ4F_preferences_t}, CodecLz4.LZ4F_preferences_t})
precompile(Tuple{Type{NamedTuple{(:level,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.broadcastable), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.convert), Type{Base.Fix1{Type{Base.MappingRF{F, T} where T where F}, Base.ComposedFunction{typeof(Base.Unicode.textwidth), typeof(Base.last)}}}, Base.Fix1{Type{Base.MappingRF{F, T} where T where F}, Base.ComposedFunction{typeof(Base.Unicode.textwidth), typeof(Base.last)}}})
precompile(Tuple{Type{UInt8}, UInt8})
precompile(Tuple{typeof(Base.:(!=)), Arrow.Flatbuf.Endianness.T, Arrow.Flatbuf.Endianness.T})
precompile(Tuple{typeof(Base.:(!=)), Arrow.Flatbuf.MetadataVersion.T, Arrow.Flatbuf.MetadataVersion.T})
precompile(Tuple{Type{UInt8}, Arrow.Flatbuf.MetadataVersion.T})
precompile(Tuple{Type{NamedTuple{(:by, :rev), T} where T<:Tuple}, Tuple{Arrow.var"#130#133", Bool}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:scratch,), Tuple{Array{Pair{Int64, Any}, 1}}}}})
precompile(Tuple{typeof(Base.:(!=)), Arrow.Flatbuf.BodyCompressionMethod.T, Arrow.Flatbuf.BodyCompressionMethod.T})
precompile(Tuple{typeof(Base.axes), Base.CodeUnits{UInt8, String}})
precompile(Tuple{typeof(Base.convert), Type{Ptr{CodecLz4.LZ4F_dctx}}, Ptr{Nothing}})
precompile(Tuple{Type{Ptr{CodecLz4.LZ4F_dctx}}, Ptr{Nothing}})
precompile(Tuple{Type{CodecLz4.LZ4Exception}, String, String})
precompile(Tuple{typeof(Base.convert), Type{Tuple{Int64, Int64, Symbol}}, Tuple{Int64, Int64, Symbol}})
precompile(Tuple{typeof(Base.cconvert), Type, CodecZstd.LibZstd.ZSTD_ResetDirective})
precompile(Tuple{typeof(Base.convert), Type{CodecZstd.LibZstd.ZSTD_ResetDirective}, CodecZstd.LibZstd.ZSTD_ResetDirective})
precompile(Tuple{typeof(Base.unsafe_convert), Type{CodecZstd.LibZstd.ZSTD_ResetDirective}, CodecZstd.LibZstd.ZSTD_ResetDirective})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Type, 1}}})
precompile(Tuple{Type{Base.RefValue{Tables.Schema{names, types} where types where names}}, Nothing})
precompile(Tuple{Type{Ref{Tables.Schema{names, types} where types where names}}, Nothing})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:file,), Tuple{Bool}}}})
precompile(Tuple{Type{NamedTuple{(:closeio,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:closeio,), Tuple{Bool}}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:add_user_variables, :add_constraints, :log_level, :optimize, :update_names, :alternative, :write_as_roll, :resume_file_path, :alternative_objective), Tuple{SpineOpt.var"#62#72", SpineOpt.var"#63#73", Int64, Bool, Bool, String, Int64, Nothing, SpineOpt.var"#92#98"}}, typeof(SpineOpt.rerun_spineopt_standard!), JuMP.GenericModel{Float64}, String})
precompile(Tuple{Type{NamedTuple{(:model, :_strict), T} where T<:Tuple}, Tuple{SpineInterface.Object, Bool}})
precompile(Tuple{typeof(Base.:(+)), Dates.DateTime, Dates.Hour})
precompile(Tuple{typeof(Base.min), Dates.DateTime, Dates.DateTime})
precompile(Tuple{typeof(Base.:(==)), Dates.Hour, Dates.Minute})
precompile(Tuple{typeof(Base.:(>=)), Dates.DateTime, Dates.DateTime})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Any, Any}, Symbol})
precompile(Tuple{typeof(SpineInterface.members), Array{SpineInterface.Object, 1}})
precompile(Tuple{Type{NamedTuple{(:temporal_block, :_strict), T} where T<:Tuple}, Tuple{SpineInterface.Object, Bool}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:temporal_block,), Tuple{SpineInterface.Object}}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:temporal_block, :_strict), Tuple{SpineInterface.Object, Bool}}, SpineInterface.Parameter})
precompile(Tuple{typeof(SpineOpt._adjusted_start), Dates.DateTime, Nothing})
precompile(Tuple{typeof(SpineOpt._adjusted_end), Dates.DateTime, Dates.DateTime, Nothing})
precompile(Tuple{typeof(Base.:(<)), Dates.DateTime, Dates.DateTime})
precompile(Tuple{Type{NamedTuple{(:temporal_block, :i), T} where T<:Tuple}, Tuple{SpineInterface.Object, Int64}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:temporal_block, :i), Tuple{SpineInterface.Object, Int64}}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:temporal_block, :i), Tuple{SpineInterface.Object, Int64}}, SpineInterface.Parameter})
precompile(Tuple{typeof(Base.iszero), Dates.Hour})
precompile(Tuple{typeof(Base.:(>)), Dates.DateTime, Dates.DateTime})
precompile(Tuple{typeof(Base.get!), Base.Dict{Tuple{Dates.DateTime, Dates.DateTime}, Array{SpineInterface.Object, 1}}, Tuple{Dates.DateTime, Dates.DateTime}, Array{SpineInterface.Object, 1}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:duration_unit,), Tuple{DataType}}, Type{SpineInterface.TimeSlice}, Dates.DateTime, Dates.DateTime, SpineInterface.Object})
precompile(Tuple{SpineInterface.var"##TimeSlice#90", Type{Dates.Hour}, Type{SpineInterface.TimeSlice}, Dates.DateTime, Dates.DateTime, SpineInterface.Object})
precompile(Tuple{typeof(Base.:(<)), Tuple{Dates.DateTime, Dates.DateTime}, Tuple{Dates.DateTime, Dates.DateTime}})
precompile(Tuple{typeof(SpineOpt._add_padding_time_slice!), SpineInterface.Object, Dates.DateTime, Array{SpineInterface.TimeSlice, 1}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SpineInterface.end_), Tuple{Base.Broadcast.Extruded{Array{SpineInterface.TimeSlice, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{Dates.DateTime}})
precompile(Tuple{typeof(Base.setindex!), Array{Dates.DateTime, 1}, Dates.DateTime, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Dates.DateTime, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SpineInterface.end_), Tuple{Base.Broadcast.Extruded{Array{SpineInterface.TimeSlice, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.reduce_empty), Base.MappingRF{Base.var"#306#307"{typeof(Base.identity)}, Base.BottomRF{typeof(Base._rf_findmax)}}, Type{Pair{Int64, Dates.DateTime}}})
precompile(Tuple{typeof(Base.argmax), Array{Dates.DateTime, 1}})
precompile(Tuple{typeof(Base.getindex), Array{SpineInterface.TimeSlice, 1}, Int64})
precompile(Tuple{Type{NamedTuple{(:from_utc,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(Base.isvarargtype), Any})
precompile(Tuple{Base.var"#14#15"{DataType}, Int64})
precompile(Tuple{typeof(Base.fieldtypes), Type})
precompile(Tuple{typeof(Base.ntupleany), Base.var"#14#15"{DataType}, Int64})
precompile(Tuple{typeof(Base.Iterators.map), Function, Tuple{DataType, DataType}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.eltype), Tuple{DataType, DataType}})
precompile(Tuple{Base.Iterators.var"#5#6"{Tuple{Array{SpineInterface.TimeSlice, 1}, Array{SpineInterface.TimeSlice, 1}}}, Int64})
precompile(Tuple{typeof(SpineOpt._history_time_slices!), SpineInterface.Object, Dates.DateTime, Dates.DateTime, Array{SpineInterface.TimeSlice, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#404#406", NTuple{6, SpineInterface.Parameter}})
precompile(Tuple{Type{Base.Iterators.Filter{F, I} where I where F}, SpineOpt.var"#405#407", Base.Generator{NTuple{6, SpineInterface.Parameter}, SpineOpt.var"#404#406"}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.identity), Base.Iterators.Filter{SpineOpt.var"#405#407", Base.Generator{NTuple{6, SpineInterface.Parameter}, SpineOpt.var"#404#406"}}})
precompile(Tuple{Type{NamedTuple{(:init,), T} where T<:Tuple}, Tuple{Dates.Hour}})
precompile(Tuple{typeof(Base.convert), Type{Base.Fix1{Type{Base.MappingRF{F, T} where T where F}, SpineOpt.var"#404#406"}}, Base.Fix1{Type{Base.MappingRF{F, T} where T where F}, SpineOpt.var"#404#406"}})
precompile(Tuple{typeof(Base.convert), Type{Base.ComposedFunction{typeof(Base.identity), Base.Fix1{Type{Base.MappingRF{F, T} where T where F}, SpineOpt.var"#404#406"}}}, Base.ComposedFunction{typeof(Base.identity), Base.Fix1{Type{Base.MappingRF{F, T} where T where F}, SpineOpt.var"#404#406"}}})
precompile(Tuple{typeof(Base.convert), Type{Base.Fix1{Type{Base.FilteringRF{F, T} where T where F}, SpineOpt.var"#405#407"}}, Base.Fix1{Type{Base.FilteringRF{F, T} where T where F}, SpineOpt.var"#405#407"}})
precompile(Tuple{typeof(Base.first), Nothing})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:init,), Tuple{Dates.Hour}}, typeof(Base.reduce), Function, Base.Generator{Base.Iterators.Filter{SpineOpt.var"#405#407", Base.Generator{NTuple{6, SpineInterface.Parameter}, SpineOpt.var"#404#406"}}, typeof(Base.identity)}})
precompile(Tuple{Base.var"##mapfoldl#288", Dates.Hour, typeof(Base.mapfoldl), Function, Function, Base.Generator{Base.Iterators.Filter{SpineOpt.var"#405#407", Base.Generator{NTuple{6, SpineInterface.Parameter}, SpineOpt.var"#404#406"}}, typeof(Base.identity)}})
precompile(Tuple{typeof(Base.reduce_empty), Base.MappingRF{SpineOpt.var"#404#406", Base.FilteringRF{SpineOpt.var"#405#407", Base.BottomRF{typeof(Base.max)}}}, Type{SpineInterface.Parameter}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Base.identity), typeof(Base.max), Dates.Hour, Base.Generator{Base.Iterators.Filter{SpineOpt.var"#405#407", Base.Generator{NTuple{6, SpineInterface.Parameter}, SpineOpt.var"#404#406"}}, typeof(Base.identity)}})
precompile(Tuple{typeof(Base.foldl_impl), Base.MappingRF{SpineOpt.var"#404#406", Base.FilteringRF{SpineOpt.var"#405#407", Base.BottomRF{typeof(Base.max)}}}, Dates.Hour, NTuple{6, SpineInterface.Parameter}})
precompile(Tuple{Base.MappingRF{SpineOpt.var"#404#406", Base.FilteringRF{SpineOpt.var"#405#407", Base.BottomRF{typeof(Base.max)}}}, Dates.Hour, SpineInterface.Parameter})
precompile(Tuple{SpineOpt.var"#404#406", SpineInterface.Parameter})
precompile(Tuple{SpineInterface.var"#254#259"{SpineInterface.ObjectClass, SpineInterface.Parameter}, NamedTuple{(:unit,), Tuple{SpineInterface.Object}}})
precompile(Tuple{SpineInterface.var"#256#260", SpineInterface.ParameterValue{Nothing}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#255#258"{SpineInterface.Parameter}}}, Tuple{Int64, Base.Generator{Base.Generator{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, SpineInterface.var"#265#266"{SpineInterface.ObjectClass}}, SpineInterface.var"#254#259"{SpineInterface.ObjectClass, SpineInterface.Parameter}}, Int64}})
precompile(Tuple{SpineInterface.var"#254#259"{SpineInterface.RelationshipClass, SpineInterface.Parameter}, NamedTuple{(:connection, :node1, :node2), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{SpineInterface.var"#256#260", SpineInterface.ParameterValue{Dates.Hour}})
precompile(Tuple{Base.MappingRF{SpineInterface.var"#254#259"{SpineInterface.RelationshipClass, SpineInterface.Parameter}, Base.FilteringRF{SpineInterface.var"#256#260", Base.MappingRF{SpineInterface.var"#257#261", Base.BottomRF{typeof(Base.max)}}}}, Base._InitialValue, NamedTuple{(:connection, :node1, :node2), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{SpineInterface.var"#257#261", SpineInterface.ParameterValue{Dates.Hour}})
precompile(Tuple{Base.FilteringRF{SpineInterface.var"#256#260", Base.MappingRF{SpineInterface.var"#257#261", Base.BottomRF{typeof(Base.max)}}}, Dates.Hour, SpineInterface.ParameterValue{Dates.Hour}})
precompile(Tuple{typeof(Base.max), Dates.Hour, Dates.Hour})
precompile(Tuple{SpineInterface.var"#254#259"{SpineInterface.ObjectClass, SpineInterface.Parameter}, NamedTuple{(:connection,), Tuple{SpineInterface.Object}}})
precompile(Tuple{Type{NamedTuple{(:node,), T} where T<:Tuple}, Tuple{SpineInterface.Object}})
precompile(Tuple{SpineInterface.var"#254#259"{SpineInterface.ObjectClass, SpineInterface.Parameter}, NamedTuple{(:node,), Tuple{SpineInterface.Object}}})
precompile(Tuple{typeof(Base.get!), Base.Dict{Any, Any}, Tuple{Dates.DateTime, Dates.DateTime}, Base.Set{Any}})
precompile(Tuple{typeof(Base.union!), Base.Set{Any}, Tuple{SpineInterface.Object}})
precompile(Tuple{typeof(Base.iterate), Base.Set{Any}, Int64})
precompile(Tuple{typeof(Base.:(+)), Dates.DateTime, Dates.Millisecond})
precompile(Tuple{typeof(Base.:(-)), Dates.DateTime, Dates.DateTime})
precompile(Tuple{typeof(Base.:(+)), Dates.DateTime, Dates.Millisecond, Dates.Millisecond})
precompile(Tuple{typeof(Base.:(-)), Dates.DateTime, Dates.Hour})
precompile(Tuple{typeof(Base.filter!), SpineOpt.var"#409#411"{Dates.DateTime}, Array{SpineInterface.TimeSlice, 1}})
precompile(Tuple{typeof(SpineOpt._do_generate_time_slice!), JuMP.GenericModel{Float64}, Array{SpineInterface.TimeSlice, 1}, Array{SpineInterface.TimeSlice, 1}, Base.Dict{SpineInterface.TimeSlice, SpineInterface.TimeSlice}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#388#393"{DataType}, Base.Generator{Base.Iterators.Filter{SpineOpt.var"#387#392", Base.Iterators.Zip{Tuple{Array{Tuple{SpineInterface.TimeSlice, SpineInterface.TimeSlice}, 1}, Array{Tuple{SpineInterface.TimeSlice, SpineInterface.TimeSlice}, 1}}}}, SpineOpt.var"#386#391"}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Generator{Base.Iterators.Filter{SpineOpt.var"#387#392", Base.Iterators.Zip{Tuple{Array{Tuple{SpineInterface.TimeSlice, SpineInterface.TimeSlice}, 1}, Array{Tuple{SpineInterface.TimeSlice, SpineInterface.TimeSlice}, 1}}}}, SpineOpt.var"#386#391"}, SpineOpt.var"#388#393"{DataType}}})
precompile(Tuple{typeof(Base.convert), Type{Array{SpineInterface.TimeSlice, 1}}, Array{SpineInterface.TimeSlice, 1}})
precompile(Tuple{SpineOpt.TimeSliceSet})
precompile(Tuple{SpineOpt.var"##_#395", SpineInterface.Anything, SpineInterface.Anything, SpineOpt.TimeSliceSet})
precompile(Tuple{typeof(Base.Iterators.flatten), Tuple{Array{SpineInterface.TimeSlice, 1}, Array{SpineInterface.TimeSlice, 1}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#412#424"{JuMP.GenericModel{Float64}}, Base.Iterators.Flatten{Tuple{Array{SpineInterface.TimeSlice, 1}, Array{SpineInterface.TimeSlice, 1}}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Base.Iterators.Flatten{Tuple{Array{SpineInterface.TimeSlice, 1}, Array{SpineInterface.TimeSlice, 1}}}, SpineOpt.var"#412#424"{JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.:(+)), Dates.DateTime, Dates.Minute})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#452#454"{SpineInterface.TimeSlice}, Tuple{SpineOpt.TimeSliceSet, SpineOpt.TimeSliceSet}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Tuple{SpineOpt.TimeSliceSet, SpineOpt.TimeSliceSet}, SpineOpt.var"#452#454"{SpineInterface.TimeSlice}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#453#456"{SpineInterface.TimeSlice}, Tuple{SpineOpt.TimeSliceSet, SpineOpt.TimeSliceSet}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Tuple{SpineOpt.TimeSliceSet, SpineOpt.TimeSliceSet}, SpineOpt.var"#453#456"{SpineInterface.TimeSlice}}})
precompile(Tuple{typeof(Base.Iterators.flatten), Tuple{Base.Iterators.Flatten{Base.Generator{Tuple{SpineOpt.TimeSliceSet, SpineOpt.TimeSliceSet}, SpineOpt.var"#452#454"{SpineInterface.TimeSlice}}}, Base.Iterators.Flatten{Base.Generator{Tuple{SpineOpt.TimeSliceSet, SpineOpt.TimeSliceSet}, SpineOpt.var"#453#456"{SpineInterface.TimeSlice}}}}})
precompile(Tuple{typeof(Base.unique), Base.Iterators.Flatten{Tuple{Base.Iterators.Flatten{Base.Generator{Tuple{SpineOpt.TimeSliceSet, SpineOpt.TimeSliceSet}, SpineOpt.var"#452#454"{SpineInterface.TimeSlice}}}, Base.Iterators.Flatten{Base.Generator{Tuple{SpineOpt.TimeSliceSet, SpineOpt.TimeSliceSet}, SpineOpt.var"#453#456"{SpineInterface.TimeSlice}}}}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Flatten{Tuple{Base.Iterators.Flatten{Base.Generator{Tuple{SpineOpt.TimeSliceSet, SpineOpt.TimeSliceSet}, SpineOpt.var"#452#454"{SpineInterface.TimeSlice}}}, Base.Iterators.Flatten{Base.Generator{Tuple{SpineOpt.TimeSliceSet, SpineOpt.TimeSliceSet}, SpineOpt.var"#453#456"{SpineInterface.TimeSlice}}}}}, Tuple{}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Flatten{Base.Generator{Tuple{SpineOpt.TimeSliceSet, SpineOpt.TimeSliceSet}, SpineOpt.var"#452#454"{SpineInterface.TimeSlice}}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:lt,), Tuple{SpineOpt.var"#442#444"}}, typeof(Base.Sort.searchsortedfirst), Array{SpineInterface.TimeSlice, 1}, Dates.DateTime})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:lt,), Tuple{SpineOpt.var"#443#445"}}, typeof(Base.Sort.searchsortedfirst), Array{SpineInterface.TimeSlice, 1}, Dates.DateTime})
precompile(Tuple{typeof(Base.in!), SpineInterface.TimeSlice, Base.Set{Any}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Flatten{Base.Generator{Tuple{SpineOpt.TimeSliceSet, SpineOpt.TimeSliceSet}, SpineOpt.var"#452#454"{SpineInterface.TimeSlice}}}, Tuple{Int64, Base.Iterators.Flatten{Base.Generator{Base.ValueIterator{Base.Dict{SpineInterface.Object, Array{SpineInterface.TimeSlice, 1}}}, SpineOpt.var"#451#455"{SpineInterface.TimeSlice}}}, Tuple{Int64, Base.Generator{Array{SpineInterface.TimeSlice, 1}, typeof(Base.identity)}, Int64}}})
precompile(Tuple{Type{Pair{A, B} where B where A}, SpineInterface.TimeSlice, Array{Any, 1}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{SpineInterface.TimeSlice}, Type{Array{Any, 1}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{SpineInterface.TimeSlice, Array{Any, 1}}, Array{Any, 1}, SpineInterface.TimeSlice})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{SpineInterface.TimeSlice, Array{Any, 1}}, Base.Generator{Base.Iterators.Flatten{Tuple{Array{SpineInterface.TimeSlice, 1}, Array{SpineInterface.TimeSlice, 1}}}, SpineOpt.var"#412#424"{JuMP.GenericModel{Float64}}}, Tuple{Int64, Array{SpineInterface.TimeSlice, 1}, Int64}})
precompile(Tuple{typeof(Base.getproperty), SpineOpt.TimeSliceSet, Symbol})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#413#425"{JuMP.GenericModel{Float64}}, Base.Dict{SpineInterface.Object, Array{SpineInterface.TimeSlice, 1}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Base.Dict{SpineInterface.Object, Array{SpineInterface.TimeSlice, 1}}, SpineOpt.var"#413#425"{JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:temporal_block,), Tuple{SpineInterface.Object}}, SpineOpt.TimeSliceSet})
precompile(Tuple{SpineOpt.var"##_#395", SpineInterface.Object, SpineInterface.Anything, SpineOpt.TimeSliceSet})
precompile(Tuple{typeof(Base.first), Array{SpineInterface.TimeSlice, 1}})
precompile(Tuple{typeof(Base.vect), SpineInterface.TimeSlice})
precompile(Tuple{Type{Pair{A, B} where B where A}, SpineInterface.TimeSlice, Array{SpineInterface.TimeSlice, 1}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{SpineInterface.TimeSlice}, Type{Array{SpineInterface.TimeSlice, 1}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{SpineInterface.TimeSlice, Array{SpineInterface.TimeSlice, 1}}, Array{SpineInterface.TimeSlice, 1}, SpineInterface.TimeSlice})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{SpineInterface.TimeSlice, Array{SpineInterface.TimeSlice, 1}}, Base.Generator{Base.Dict{SpineInterface.Object, Array{SpineInterface.TimeSlice, 1}}, SpineOpt.var"#413#425"{JuMP.GenericModel{Float64}}}, Int64})
precompile(Tuple{typeof(Base.merge!), Function, Base.Dict{SpineInterface.TimeSlice, Array{Any, 1}}, Base.Dict{SpineInterface.TimeSlice, Array{SpineInterface.TimeSlice, 1}}})
precompile(Tuple{typeof(Base.mergewith!), typeof(Base.append!), Base.Dict{SpineInterface.TimeSlice, Array{Any, 1}}, Base.Dict{SpineInterface.TimeSlice, Array{SpineInterface.TimeSlice, 1}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#414#426"{JuMP.GenericModel{Float64}}, Base.Iterators.Flatten{Tuple{Array{SpineInterface.TimeSlice, 1}, Array{SpineInterface.TimeSlice, 1}}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Base.Iterators.Flatten{Tuple{Array{SpineInterface.TimeSlice, 1}, Array{SpineInterface.TimeSlice, 1}}}, SpineOpt.var"#414#426"{JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{SpineInterface.TimeSlice, Array{Any, 1}}, Base.Generator{Base.Iterators.Flatten{Tuple{Array{SpineInterface.TimeSlice, 1}, Array{SpineInterface.TimeSlice, 1}}}, SpineOpt.var"#414#426"{JuMP.GenericModel{Float64}}}, Tuple{Int64, Array{SpineInterface.TimeSlice, 1}, Int64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#415#427", Base.Dict{SpineInterface.TimeSlice, Array{Any, 1}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Base.Dict{SpineInterface.TimeSlice, Array{Any, 1}}, SpineOpt.var"#415#427"}})
precompile(Tuple{typeof(Base.push!), Base.Set{Any}, SpineInterface.TimeSlice})
precompile(Tuple{Base.var"#132#133"{Base.var"#130#131"{typeof(Base.in), typeof(Base.pop!), Base.Set{Any}}}, SpineInterface.TimeSlice})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#418#428", Base.Dict{SpineInterface.TimeSlice, Array{Any, 1}}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Base.Dict{SpineInterface.TimeSlice, Array{Any, 1}}, SpineOpt.var"#418#428"}})
precompile(Tuple{typeof(Base.unique), Base.Iterators.Flatten{Base.Generator{Base.Dict{SpineInterface.TimeSlice, Array{Any, 1}}, SpineOpt.var"#418#428"}}})
precompile(Tuple{SpineOpt.var"#417#430"{SpineInterface.TimeSlice}, SpineInterface.TimeSlice})
precompile(Tuple{typeof(Base.getindex), Type{Tuple{SpineInterface.TimeSlice, SpineInterface.TimeSlice}}, Tuple{SpineInterface.TimeSlice, SpineInterface.TimeSlice}})
precompile(Tuple{Type{Base.Set{Tuple{SpineInterface.TimeSlice, SpineInterface.TimeSlice}}}, Tuple{Tuple{SpineInterface.TimeSlice, SpineInterface.TimeSlice}}})
precompile(Tuple{typeof(Base._unique_from), Base.Iterators.Flatten{Base.Generator{Base.Dict{SpineInterface.TimeSlice, Array{Any, 1}}, SpineOpt.var"#418#428"}}, Array{Tuple{SpineInterface.TimeSlice, SpineInterface.TimeSlice}, 1}, Base.Set{Tuple{SpineInterface.TimeSlice, SpineInterface.TimeSlice}}, Tuple{Int64, Base.Generator{Base.Iterators.Filter{SpineOpt.var"#417#430"{SpineInterface.TimeSlice}, Array{Any, 1}}, SpineOpt.var"#416#429"{Array{Any, 1}, SpineInterface.TimeSlice}}, Int64}})
precompile(Tuple{typeof(Base.in!), Tuple{SpineInterface.TimeSlice, SpineInterface.TimeSlice}, Base.Set{Tuple{SpineInterface.TimeSlice, SpineInterface.TimeSlice}}})
precompile(Tuple{typeof(Base.push!), Array{Tuple{SpineInterface.TimeSlice, SpineInterface.TimeSlice}, 1}, Tuple{SpineInterface.TimeSlice, SpineInterface.TimeSlice}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#421#431", Base.Dict{SpineInterface.TimeSlice, Array{Any, 1}}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Base.Dict{SpineInterface.TimeSlice, Array{Any, 1}}, SpineOpt.var"#421#431"}})
precompile(Tuple{typeof(Base.unique), Base.Iterators.Flatten{Base.Generator{Base.Dict{SpineInterface.TimeSlice, Array{Any, 1}}, SpineOpt.var"#421#431"}}})
precompile(Tuple{SpineOpt.var"#420#433"{SpineInterface.TimeSlice}, SpineInterface.TimeSlice})
precompile(Tuple{typeof(Base._unique_from), Base.Iterators.Flatten{Base.Generator{Base.Dict{SpineInterface.TimeSlice, Array{Any, 1}}, SpineOpt.var"#421#431"}}, Array{Tuple{SpineInterface.TimeSlice, SpineInterface.TimeSlice}, 1}, Base.Set{Tuple{SpineInterface.TimeSlice, SpineInterface.TimeSlice}}, Tuple{Int64, Base.Generator{Base.Iterators.Filter{SpineOpt.var"#420#433"{SpineInterface.TimeSlice}, Array{Any, 1}}, SpineOpt.var"#419#432"{Array{Any, 1}, SpineInterface.TimeSlice}}, Int64}})
precompile(Tuple{Type{Base.Iterators.Filter{F, I} where I where F}, SpineOpt.var"#423#435", Array{Tuple{SpineInterface.TimeSlice, SpineInterface.TimeSlice}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#422#434", Base.Iterators.Filter{SpineOpt.var"#423#435", Array{Tuple{SpineInterface.TimeSlice, SpineInterface.TimeSlice}, 1}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Filter{SpineOpt.var"#423#435", Array{Tuple{SpineInterface.TimeSlice, SpineInterface.TimeSlice}, 1}}, SpineOpt.var"#422#434"}})
precompile(Tuple{Type{SpineInterface.RelationshipClass}, Symbol, Array{Symbol, 1}, Array{Tuple{SpineInterface.TimeSlice, SpineInterface.TimeSlice}, 1}})
precompile(Tuple{typeof(Base._array_for), Type{NamedTuple{(:t_before, :t_after), Tuple{SpineInterface.TimeSlice, SpineInterface.TimeSlice}}}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{NamedTuple{(:t_before, :t_after), Tuple{SpineInterface.TimeSlice, SpineInterface.TimeSlice}}, 1}, NamedTuple{(:t_before, :t_after), Tuple{SpineInterface.TimeSlice, SpineInterface.TimeSlice}}, Base.Generator{Array{Tuple{SpineInterface.TimeSlice, SpineInterface.TimeSlice}, 1}, SpineInterface.var"#1#2"{Array{Symbol, 1}}}, Int64})
precompile(Tuple{typeof(Base.convert), Type{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}}, Array{NamedTuple{(:t_before, :t_after), Tuple{SpineInterface.TimeSlice, SpineInterface.TimeSlice}}, 1}})
precompile(Tuple{typeof(Base._array_for), Type{NamedTuple{(:t_short, :t_long), Tuple{SpineInterface.TimeSlice, SpineInterface.TimeSlice}}}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{NamedTuple{(:t_short, :t_long), Tuple{SpineInterface.TimeSlice, SpineInterface.TimeSlice}}, 1}, NamedTuple{(:t_short, :t_long), Tuple{SpineInterface.TimeSlice, SpineInterface.TimeSlice}}, Base.Generator{Array{Tuple{SpineInterface.TimeSlice, SpineInterface.TimeSlice}, 1}, SpineInterface.var"#1#2"{Array{Symbol, 1}}}, Int64})
precompile(Tuple{typeof(Base.convert), Type{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}}, Array{NamedTuple{(:t_short, :t_long), Tuple{SpineInterface.TimeSlice, SpineInterface.TimeSlice}}, 1}})
precompile(Tuple{Type{SpineOpt.TOverlapsT}, Base.Dict{SpineInterface.TimeSlice, Array{Any, 1}}})
precompile(Tuple{typeof(Base.setindex!), Array{SpineInterface.TimeSlice, 1}, SpineInterface.TimeSlice, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#436#439", Array{SpineInterface.Object, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{SpineInterface.Object, 1}, SpineOpt.var"#436#439"}})
precompile(Tuple{Type{Base.Set{T} where T}, Base.Iterators.Flatten{Base.Generator{Array{SpineInterface.Object, 1}, SpineOpt.var"#436#439"}}})
precompile(Tuple{typeof(Base.last), Array{SpineInterface.TimeSlice, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#548#549"{JuMP.GenericModel{Float64}, Dates.DateTime, Dates.DateTime}, Array{SpineInterface.Object, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Array{SpineInterface.Object, 1}, SpineOpt.var"#548#549"{JuMP.GenericModel{Float64}, Dates.DateTime, Dates.DateTime}}})
precompile(Tuple{typeof(Base.intersect), Array{SpineInterface.Object, 1}, SpineInterface.Object})
precompile(Tuple{Base.ComposedFunction{typeof(Base.:(!)), Base.Fix2{typeof(Base.in), Base.Set{Any}}}, SpineInterface.Object})
precompile(Tuple{Type{NamedTuple{(:stochastic_structure,), T} where T<:Tuple}, Tuple{Array{Any, 1}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:stochastic_structure,), Tuple{Array{Any, 1}}}, SpineInterface.RelationshipClass})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{SpineInterface.Object, 1}, SpineInterface.Object, Base.Generator{Array{Symbol, 1}, SpineInterface.var"#208#214"{Base.Pairs{Symbol, Array{Any, 1}, Tuple{Symbol}, NamedTuple{(:stochastic_structure,), Tuple{Array{Any, 1}}}}}}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Union{Nothing, SpineInterface.Object}, 1}, Base.Generator{Array{Symbol, 1}, SpineInterface.var"#208#214"{Base.Pairs{Symbol, Array{Any, 1}, Tuple{Symbol}, NamedTuple{(:stochastic_structure,), Tuple{Array{Any, 1}}}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.get!), SpineInterface.var"#209#215"{Bool, Base.Pairs{Symbol, Array{Any, 1}, Tuple{Symbol}, NamedTuple{(:stochastic_structure,), Tuple{Array{Any, 1}}}}, SpineInterface.RelationshipClass}, Base.Dict{Any, Any}, Tuple{SpineInterface.Object, Nothing}})
precompile(Tuple{SpineInterface.var"#cond#216"{Base.Pairs{Symbol, Array{Any, 1}, Tuple{Symbol}, NamedTuple{(:stochastic_structure,), Tuple{Array{Any, 1}}}}}, NamedTuple{(:stochastic_structure, :stochastic_scenario), Tuple{SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{typeof(Base.:(==)), SpineInterface.Object, SpineInterface.Object})
precompile(Tuple{typeof(SpineOpt._find_children), SpineInterface.Anything})
precompile(Tuple{Type{Base.Pairs{Symbol, V, I, A} where A where I where V}, NamedTuple{(:stochastic_scenario1,), Tuple{SpineInterface.Anything}}, Tuple{Symbol}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:stochastic_scenario1,), Tuple{SpineInterface.Anything}}, SpineInterface.RelationshipClass})
precompile(Tuple{typeof(Base.get!), SpineInterface.var"#209#215"{Bool, Base.Pairs{Symbol, SpineInterface.Anything, Tuple{Symbol}, NamedTuple{(:stochastic_scenario1,), Tuple{SpineInterface.Anything}}}, SpineInterface.RelationshipClass}, Base.Dict{Any, Any}, Tuple{SpineInterface.Anything, Nothing}})
precompile(Tuple{typeof(Base.setdiff), Array{SpineInterface.Object, 1}, Array{Any, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#536#542"{Dates.DateTime}, Array{Any, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Array{Any, 1}, SpineOpt.var"#536#542"{Dates.DateTime}}})
precompile(Tuple{SpineOpt.var"#536#542"{Dates.DateTime}, SpineInterface.Object})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{SpineInterface.Object}, Type{Dates.DateTime}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{SpineInterface.Object, Dates.DateTime}, Dates.DateTime, SpineInterface.Object})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{SpineInterface.Object, Dates.DateTime}, Base.Generator{Array{Any, 1}, SpineOpt.var"#536#542"{Dates.DateTime}}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#537#543"{SpineInterface.Object}, Array{Any, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Array{Any, 1}, SpineOpt.var"#537#543"{SpineInterface.Object}}})
precompile(Tuple{SpineOpt.var"#537#543"{SpineInterface.Object}, SpineInterface.Object})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:stochastic_structure, :stochastic_scenario), Tuple{SpineInterface.Object, SpineInterface.Object}}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:stochastic_structure, :stochastic_scenario), Tuple{SpineInterface.Object, SpineInterface.Object}}, SpineInterface.Parameter})
precompile(Tuple{Type{Pair{A, B} where B where A}, SpineInterface.Object, Float64})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{SpineInterface.Object}, Type{Float64}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{SpineInterface.Object, Float64}, Float64, SpineInterface.Object})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{SpineInterface.Object, Float64}, Base.Generator{Array{Any, 1}, SpineOpt.var"#537#543"{SpineInterface.Object}}, Int64})
precompile(Tuple{Type{NamedTuple{(:stochastic_structure, :stochastic_scenario, :_strict), T} where T<:Tuple}, Tuple{SpineInterface.Object, SpineInterface.Object, Bool}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:stochastic_structure, :stochastic_scenario, :_strict), Tuple{SpineInterface.Object, SpineInterface.Object, Bool}}, SpineInterface.Parameter})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Any, SpineInterface.Object})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#541#547"{Base.Dict{SpineInterface.Object, Float64}, Base.Dict{Any, Any}, Base.Dict{SpineInterface.Object, Dates.DateTime}}, Array{Any, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Array{Any, 1}, SpineOpt.var"#541#547"{Base.Dict{SpineInterface.Object, Float64}, Base.Dict{Any, Any}, Base.Dict{SpineInterface.Object, Dates.DateTime}}}})
precompile(Tuple{SpineOpt.var"#541#547"{Base.Dict{SpineInterface.Object, Float64}, Base.Dict{Any, Any}, Base.Dict{SpineInterface.Object, Dates.DateTime}}, SpineInterface.Object})
precompile(Tuple{Type{NamedTuple{(:start, :end_, :weight), T} where T<:Tuple}, Tuple{Dates.DateTime, Dates.DateTime, Float64}})
precompile(Tuple{Type{Pair{A, B} where B where A}, SpineInterface.Object, NamedTuple{(:start, :end_, :weight), Tuple{Dates.DateTime, Dates.DateTime, Float64}}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{SpineInterface.Object}, Type{NamedTuple{(:start, :end_, :weight), Tuple{Dates.DateTime, Dates.DateTime, Float64}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{SpineInterface.Object, NamedTuple{(:start, :end_, :weight), Tuple{Dates.DateTime, Dates.DateTime, Float64}}}, NamedTuple{(:start, :end_, :weight), Tuple{Dates.DateTime, Dates.DateTime, Float64}}, SpineInterface.Object})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{SpineInterface.Object, NamedTuple{(:start, :end_, :weight), Tuple{Dates.DateTime, Dates.DateTime, Float64}}}, Base.Generator{Array{Any, 1}, SpineOpt.var"#541#547"{Base.Dict{SpineInterface.Object, Float64}, Base.Dict{Any, Any}, Base.Dict{SpineInterface.Object, Dates.DateTime}}}, Int64})
precompile(Tuple{Type{Pair{A, B} where B where A}, SpineInterface.Object, Base.Dict{SpineInterface.Object, NamedTuple{(:start, :end_, :weight), Tuple{Dates.DateTime, Dates.DateTime, Float64}}}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{SpineInterface.Object}, Type{Base.Dict{SpineInterface.Object, NamedTuple{(:start, :end_, :weight), Tuple{Dates.DateTime, Dates.DateTime, Float64}}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{SpineInterface.Object, Base.Dict{SpineInterface.Object, NamedTuple{(:start, :end_, :weight), Tuple{Dates.DateTime, Dates.DateTime, Float64}}}}, Base.Dict{SpineInterface.Object, NamedTuple{(:start, :end_, :weight), Tuple{Dates.DateTime, Dates.DateTime, Float64}}}, SpineInterface.Object})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{SpineInterface.Object, Base.Dict{SpineInterface.Object, NamedTuple{(:start, :end_, :weight), Tuple{Dates.DateTime, Dates.DateTime, Float64}}}}, Base.Generator{Array{SpineInterface.Object, 1}, SpineOpt.var"#548#549"{JuMP.GenericModel{Float64}, Dates.DateTime, Dates.DateTime}}, Int64})
precompile(Tuple{typeof(SpineOpt._generate_stochastic_scenarios), JuMP.GenericModel{Float64}, Base.Dict{SpineInterface.Object, Base.Dict{SpineInterface.Object, NamedTuple{(:start, :end_, :weight), Tuple{Dates.DateTime, Dates.DateTime, Float64}}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#550#554"{Base.Dict{SpineInterface.Object, NamedTuple{(:start, :end_, :weight), Tuple{Dates.DateTime, Dates.DateTime, Float64}}}}, Array{SpineInterface.TimeSlice, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Array{SpineInterface.TimeSlice, 1}, SpineOpt.var"#550#554"{Base.Dict{SpineInterface.Object, NamedTuple{(:start, :end_, :weight), Tuple{Dates.DateTime, Dates.DateTime, Float64}}}}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:stochastic_structure,), Tuple{Array{SpineInterface.Object, 1}}}, SpineInterface.RelationshipClass})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#553#557"{Array{Any, 1}}, Array{SpineInterface.TimeSlice, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Array{SpineInterface.TimeSlice, 1}, SpineOpt.var"#553#557"{Array{Any, 1}}}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{SpineInterface.TimeSlice, Array{SpineInterface.Object, 1}}, Base.Dict{SpineInterface.TimeSlice, Array{Any, 1}}})
precompile(Tuple{typeof(Base.setindex!), Array{SpineInterface.Object, 1}, SpineInterface.Object, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#558#561"{Base.Dict{SpineInterface.Object, NamedTuple{(:start, :end_, :weight), Tuple{Dates.DateTime, Dates.DateTime, Float64}}}, SpineInterface.Object}, Base.Dict{SpineInterface.TimeSlice, Array{SpineInterface.Object, 1}}})
precompile(Tuple{typeof(Base.iterate), Base.Dict{SpineInterface.TimeSlice, Array{SpineInterface.Object, 1}}})
precompile(Tuple{SpineOpt.var"#558#561"{Base.Dict{SpineInterface.Object, NamedTuple{(:start, :end_, :weight), Tuple{Dates.DateTime, Dates.DateTime, Float64}}}, SpineInterface.Object}, Pair{SpineInterface.TimeSlice, Array{SpineInterface.Object, 1}}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{Tuple{SpineInterface.Object, SpineInterface.TimeSlice}}, Type{Array{SpineInterface.Object, 1}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Tuple{SpineInterface.Object, SpineInterface.TimeSlice}, Array{SpineInterface.Object, 1}}, Array{SpineInterface.Object, 1}, Tuple{SpineInterface.Object, SpineInterface.TimeSlice}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Tuple{SpineInterface.Object, SpineInterface.TimeSlice}, Array{SpineInterface.Object, 1}}, Base.Iterators.Flatten{Base.Generator{Base.Dict{SpineInterface.Object, Base.Dict{SpineInterface.Object, NamedTuple{(:start, :end_, :weight), Tuple{Dates.DateTime, Dates.DateTime, Float64}}}}, SpineOpt.var"#559#560"{JuMP.GenericModel{Float64}}}}, Tuple{Int64, Base.Generator{Base.Dict{SpineInterface.TimeSlice, Array{SpineInterface.Object, 1}}, SpineOpt.var"#558#561"{Base.Dict{SpineInterface.Object, NamedTuple{(:start, :end_, :weight), Tuple{Dates.DateTime, Dates.DateTime, Float64}}}, SpineInterface.Object}}, Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Flatten{Base.Generator{Base.Dict{SpineInterface.Object, Base.Dict{SpineInterface.Object, NamedTuple{(:start, :end_, :weight), Tuple{Dates.DateTime, Dates.DateTime, Float64}}}}, SpineOpt.var"#559#560"{JuMP.GenericModel{Float64}}}}, Tuple{Int64, Base.Generator{Base.Dict{SpineInterface.TimeSlice, Array{SpineInterface.Object, 1}}, SpineOpt.var"#558#561"{Base.Dict{SpineInterface.Object, NamedTuple{(:start, :end_, :weight), Tuple{Dates.DateTime, Dates.DateTime, Float64}}}, SpineInterface.Object}}, Int64}})
precompile(Tuple{typeof(SpineOpt._generate_node_stochastic_scenario_weight), JuMP.GenericModel{Float64}, Base.Dict{SpineInterface.Object, Base.Dict{SpineInterface.Object, NamedTuple{(:start, :end_, :weight), Tuple{Dates.DateTime, Dates.DateTime, Float64}}}}})
precompile(Tuple{Type{Base.Iterators.Filter{F, I} where I where F}, SpineOpt.var"#564#567"{JuMP.GenericModel{Float64}}, Base.Iterators.Flatten{Tuple{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#563#565"{Base.Dict{SpineInterface.Object, Base.Dict{SpineInterface.Object, NamedTuple{(:start, :end_, :weight), Tuple{Dates.DateTime, Dates.DateTime, Float64}}}}}, Base.Iterators.Filter{SpineOpt.var"#564#567"{JuMP.GenericModel{Float64}}, Base.Iterators.Flatten{Tuple{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}}}}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Base.Iterators.Filter{SpineOpt.var"#564#567"{JuMP.GenericModel{Float64}}, Base.Iterators.Flatten{Tuple{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}}}}, SpineOpt.var"#563#565"{Base.Dict{SpineInterface.Object, Base.Dict{SpineInterface.Object, NamedTuple{(:start, :end_, :weight), Tuple{Dates.DateTime, Dates.DateTime, Float64}}}}}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Iterators.Flatten{Base.Generator{Base.Iterators.Filter{SpineOpt.var"#564#567"{JuMP.GenericModel{Float64}}, Base.Iterators.Flatten{Tuple{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}}}}, SpineOpt.var"#563#565"{Base.Dict{SpineInterface.Object, Base.Dict{SpineInterface.Object, NamedTuple{(:start, :end_, :weight), Tuple{Dates.DateTime, Dates.DateTime, Float64}}}}}}}})
precompile(Tuple{SpineOpt.var"#564#567"{JuMP.GenericModel{Float64}}, NamedTuple{(:node, :stochastic_structure), Tuple{SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{typeof(Base.in), SpineInterface.Object, Array{SpineInterface.Object, 1}})
precompile(Tuple{SpineOpt.var"#563#565"{Base.Dict{SpineInterface.Object, Base.Dict{SpineInterface.Object, NamedTuple{(:start, :end_, :weight), Tuple{Dates.DateTime, Dates.DateTime, Float64}}}}}, NamedTuple{(:node, :stochastic_structure), Tuple{SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{SpineOpt.var"#562#566"{SpineInterface.Object, SpineInterface.Object}, Pair{SpineInterface.Object, NamedTuple{(:start, :end_, :weight), Tuple{Dates.DateTime, Dates.DateTime, Float64}}}})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{Tuple{SpineInterface.Object, SpineInterface.Object}, Base.Dict{Symbol, SpineInterface.ParameterValue{Float64}}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{Tuple{SpineInterface.Object, SpineInterface.Object}, Base.Dict{Symbol, SpineInterface.ParameterValue{Float64}}}, Int64, Int64})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{Tuple{SpineInterface.Object, SpineInterface.Object}}, Type{Base.Dict{Symbol, SpineInterface.ParameterValue{Float64}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Tuple{SpineInterface.Object, SpineInterface.Object}, Base.Dict{Symbol, SpineInterface.ParameterValue{Float64}}}, Base.Dict{Symbol, SpineInterface.ParameterValue{Float64}}, Tuple{SpineInterface.Object, SpineInterface.Object}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Tuple{SpineInterface.Object, SpineInterface.Object}, Base.Dict{Symbol, SpineInterface.ParameterValue{Float64}}}, Base.Iterators.Flatten{Base.Generator{Base.Iterators.Filter{SpineOpt.var"#564#567"{JuMP.GenericModel{Float64}}, Base.Iterators.Flatten{Tuple{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}}}}, SpineOpt.var"#563#565"{Base.Dict{SpineInterface.Object, Base.Dict{SpineInterface.Object, NamedTuple{(:start, :end_, :weight), Tuple{Dates.DateTime, Dates.DateTime, Float64}}}}}}}, Tuple{Tuple{Int64, Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, Int64}, Base.Generator{Base.Dict{SpineInterface.Object, NamedTuple{(:start, :end_, :weight), Tuple{Dates.DateTime, Dates.DateTime, Float64}}}, SpineOpt.var"#562#566"{SpineInterface.Object, SpineInterface.Object}}, Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Flatten{Base.Generator{Base.Iterators.Filter{SpineOpt.var"#564#567"{JuMP.GenericModel{Float64}}, Base.Iterators.Flatten{Tuple{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}}}}, SpineOpt.var"#563#565"{Base.Dict{SpineInterface.Object, Base.Dict{SpineInterface.Object, NamedTuple{(:start, :end_, :weight), Tuple{Dates.DateTime, Dates.DateTime, Float64}}}}}}}, Tuple{Tuple{Int64, Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, Int64}, Base.Generator{Base.Dict{SpineInterface.Object, NamedTuple{(:start, :end_, :weight), Tuple{Dates.DateTime, Dates.DateTime, Float64}}}, SpineOpt.var"#562#566"{SpineInterface.Object, SpineInterface.Object}}, Int64}})
precompile(Tuple{typeof(Base.keys), Base.Dict{Tuple{SpineInterface.Object, SpineInterface.Object}, Base.Dict{Symbol, SpineInterface.ParameterValue{Float64}}}})
precompile(Tuple{Type{SpineInterface.RelationshipClass}, Symbol, Array{Symbol, 1}, Base.KeySet{Tuple{SpineInterface.Object, SpineInterface.Object}, Base.Dict{Tuple{SpineInterface.Object, SpineInterface.Object}, Base.Dict{Symbol, SpineInterface.ParameterValue{Float64}}}}, Base.Dict{Tuple{SpineInterface.Object, SpineInterface.Object}, Base.Dict{Symbol, SpineInterface.ParameterValue{Float64}}}})
precompile(Tuple{typeof(Base._array_for), Type{NamedTuple{(:node, :stochastic_scenario), Tuple{SpineInterface.Object, SpineInterface.Object}}}, Base.HasLength, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{NamedTuple{(:node, :stochastic_scenario), Tuple{SpineInterface.Object, SpineInterface.Object}}, 1}, NamedTuple{(:node, :stochastic_scenario), Tuple{SpineInterface.Object, SpineInterface.Object}}, Base.Generator{Base.KeySet{Tuple{SpineInterface.Object, SpineInterface.Object}, Base.Dict{Tuple{SpineInterface.Object, SpineInterface.Object}, Base.Dict{Symbol, SpineInterface.ParameterValue{Float64}}}}, SpineInterface.var"#1#2"{Array{Symbol, 1}}}, Int64})
precompile(Tuple{typeof(Base.convert), Type{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}}, Array{NamedTuple{(:node, :stochastic_scenario), Tuple{SpineInterface.Object, SpineInterface.Object}}, 1}})
precompile(Tuple{typeof(SpineOpt._generate_unit_stochastic_scenario_weight), JuMP.GenericModel{Float64}, Base.Dict{SpineInterface.Object, Base.Dict{SpineInterface.Object, NamedTuple{(:start, :end_, :weight), Tuple{Dates.DateTime, Dates.DateTime, Float64}}}}})
precompile(Tuple{Type{Base.Iterators.Filter{F, I} where I where F}, SpineOpt.var"#570#573"{JuMP.GenericModel{Float64}}, Base.Iterators.Flatten{Tuple{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#569#571"{Base.Dict{SpineInterface.Object, Base.Dict{SpineInterface.Object, NamedTuple{(:start, :end_, :weight), Tuple{Dates.DateTime, Dates.DateTime, Float64}}}}}, Base.Iterators.Filter{SpineOpt.var"#570#573"{JuMP.GenericModel{Float64}}, Base.Iterators.Flatten{Tuple{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}}}}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Base.Iterators.Filter{SpineOpt.var"#570#573"{JuMP.GenericModel{Float64}}, Base.Iterators.Flatten{Tuple{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}}}}, SpineOpt.var"#569#571"{Base.Dict{SpineInterface.Object, Base.Dict{SpineInterface.Object, NamedTuple{(:start, :end_, :weight), Tuple{Dates.DateTime, Dates.DateTime, Float64}}}}}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Iterators.Flatten{Base.Generator{Base.Iterators.Filter{SpineOpt.var"#570#573"{JuMP.GenericModel{Float64}}, Base.Iterators.Flatten{Tuple{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}}}}, SpineOpt.var"#569#571"{Base.Dict{SpineInterface.Object, Base.Dict{SpineInterface.Object, NamedTuple{(:start, :end_, :weight), Tuple{Dates.DateTime, Dates.DateTime, Float64}}}}}}}})
precompile(Tuple{SpineOpt.var"#570#573"{JuMP.GenericModel{Float64}}, NamedTuple{(:unit, :stochastic_structure), Tuple{SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{SpineOpt.var"#569#571"{Base.Dict{SpineInterface.Object, Base.Dict{SpineInterface.Object, NamedTuple{(:start, :end_, :weight), Tuple{Dates.DateTime, Dates.DateTime, Float64}}}}}, NamedTuple{(:unit, :stochastic_structure), Tuple{SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{SpineOpt.var"#568#572"{SpineInterface.Object, SpineInterface.Object}, Pair{SpineInterface.Object, NamedTuple{(:start, :end_, :weight), Tuple{Dates.DateTime, Dates.DateTime, Float64}}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Tuple{SpineInterface.Object, SpineInterface.Object}, Base.Dict{Symbol, SpineInterface.ParameterValue{Float64}}}, Base.Iterators.Flatten{Base.Generator{Base.Iterators.Filter{SpineOpt.var"#570#573"{JuMP.GenericModel{Float64}}, Base.Iterators.Flatten{Tuple{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}}}}, SpineOpt.var"#569#571"{Base.Dict{SpineInterface.Object, Base.Dict{SpineInterface.Object, NamedTuple{(:start, :end_, :weight), Tuple{Dates.DateTime, Dates.DateTime, Float64}}}}}}}, Tuple{Tuple{Int64, Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, Int64}, Base.Generator{Base.Dict{SpineInterface.Object, NamedTuple{(:start, :end_, :weight), Tuple{Dates.DateTime, Dates.DateTime, Float64}}}, SpineOpt.var"#568#572"{SpineInterface.Object, SpineInterface.Object}}, Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Flatten{Base.Generator{Base.Iterators.Filter{SpineOpt.var"#570#573"{JuMP.GenericModel{Float64}}, Base.Iterators.Flatten{Tuple{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}}}}, SpineOpt.var"#569#571"{Base.Dict{SpineInterface.Object, Base.Dict{SpineInterface.Object, NamedTuple{(:start, :end_, :weight), Tuple{Dates.DateTime, Dates.DateTime, Float64}}}}}}}, Tuple{Tuple{Int64, Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, Int64}, Base.Generator{Base.Dict{SpineInterface.Object, NamedTuple{(:start, :end_, :weight), Tuple{Dates.DateTime, Dates.DateTime, Float64}}}, SpineOpt.var"#568#572"{SpineInterface.Object, SpineInterface.Object}}, Int64}})
precompile(Tuple{typeof(Base._array_for), Type{NamedTuple{(:unit, :stochastic_scenario), Tuple{SpineInterface.Object, SpineInterface.Object}}}, Base.HasLength, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{NamedTuple{(:unit, :stochastic_scenario), Tuple{SpineInterface.Object, SpineInterface.Object}}, 1}, NamedTuple{(:unit, :stochastic_scenario), Tuple{SpineInterface.Object, SpineInterface.Object}}, Base.Generator{Base.KeySet{Tuple{SpineInterface.Object, SpineInterface.Object}, Base.Dict{Tuple{SpineInterface.Object, SpineInterface.Object}, Base.Dict{Symbol, SpineInterface.ParameterValue{Float64}}}}, SpineInterface.var"#1#2"{Array{Symbol, 1}}}, Int64})
precompile(Tuple{typeof(Base.convert), Type{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}}, Array{NamedTuple{(:unit, :stochastic_scenario), Tuple{SpineInterface.Object, SpineInterface.Object}}, 1}})
precompile(Tuple{typeof(SpineOpt._generate_connection_stochastic_scenario_weight), JuMP.GenericModel{Float64}, Base.Dict{SpineInterface.Object, Base.Dict{SpineInterface.Object, NamedTuple{(:start, :end_, :weight), Tuple{Dates.DateTime, Dates.DateTime, Float64}}}}})
precompile(Tuple{Type{Base.Iterators.Filter{F, I} where I where F}, SpineOpt.var"#576#579"{JuMP.GenericModel{Float64}}, Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#575#577"{Base.Dict{SpineInterface.Object, Base.Dict{SpineInterface.Object, NamedTuple{(:start, :end_, :weight), Tuple{Dates.DateTime, Dates.DateTime, Float64}}}}}, Base.Iterators.Filter{SpineOpt.var"#576#579"{JuMP.GenericModel{Float64}}, Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Base.Iterators.Filter{SpineOpt.var"#576#579"{JuMP.GenericModel{Float64}}, Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}}, SpineOpt.var"#575#577"{Base.Dict{SpineInterface.Object, Base.Dict{SpineInterface.Object, NamedTuple{(:start, :end_, :weight), Tuple{Dates.DateTime, Dates.DateTime, Float64}}}}}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Iterators.Flatten{Base.Generator{Base.Iterators.Filter{SpineOpt.var"#576#579"{JuMP.GenericModel{Float64}}, Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}}, SpineOpt.var"#575#577"{Base.Dict{SpineInterface.Object, Base.Dict{SpineInterface.Object, NamedTuple{(:start, :end_, :weight), Tuple{Dates.DateTime, Dates.DateTime, Float64}}}}}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#580#582", Array{Any, 1}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Any, 1}, SpineOpt.var"#580#582"}})
precompile(Tuple{SpineOpt.var"#580#582", SpineInterface.Object})
precompile(Tuple{typeof(Base._array_for), Type{Array{SpineInterface.Object, 1}}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{SpineInterface.Object, 1}, 1}, Array{SpineInterface.Object, 1}, Base.Generator{Array{Any, 1}, SpineOpt.var"#580#582"}, Int64})
precompile(Tuple{typeof(Base.Iterators.enumerate), Array{Array{SpineInterface.Object, 1}, 1}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Array{Array{SpineInterface.Object, 1}, 1}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.lastindex), Array{SpineInterface.Object, 1}})
precompile(Tuple{typeof(Base.getindex), Array{SpineInterface.Object, 1}, Int64})
precompile(Tuple{typeof(SpineOpt._find_children), SpineInterface.Object})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:stochastic_scenario1,), Tuple{SpineInterface.Object}}, SpineInterface.RelationshipClass})
precompile(Tuple{typeof(Base.get!), SpineInterface.var"#209#215"{Bool, Base.Pairs{Symbol, SpineInterface.Object, Tuple{Symbol}, NamedTuple{(:stochastic_scenario1,), Tuple{SpineInterface.Object}}}, SpineInterface.RelationshipClass}, Base.Dict{Any, Any}, Tuple{SpineInterface.Object, Nothing}})
precompile(Tuple{typeof(Base.setdiff), Array{Any, 1}, Array{SpineInterface.Object, 1}})
precompile(Tuple{typeof(Base.setdiff), Array{Any, 1}, Array{Any, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#581#583"{Array{SpineInterface.Object, 1}}, Array{Any, 1}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Any, 1}, SpineOpt.var"#581#583"{Array{SpineInterface.Object, 1}}}})
precompile(Tuple{typeof(Base.append!), Array{Array{SpineInterface.Object, 1}, 1}, Array{Any, 1}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Array{Array{SpineInterface.Object, 1}, 1}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.getindex), Array{Array{SpineInterface.Object, 1}, 1}, Array{Any, 1}})
precompile(Tuple{typeof(Base.checkindex), Type{Bool}, Base.OneTo{Int64}, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Array{SpineInterface.Object, 1}, 1}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Array{SpineInterface.Object, 1}, 1}, Array{SpineInterface.Object, 1}, Int64})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:init,), Tuple{Dates.Minute}}})
precompile(Tuple{typeof(Base.isempty), Base.Pairs{Symbol, Dates.Minute, Tuple{Symbol}, NamedTuple{(:init,), Tuple{Dates.Minute}}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, Base.Pairs{Symbol, Dates.Minute, Tuple{Symbol}, NamedTuple{(:init,), Tuple{Dates.Minute}}}})
precompile(Tuple{typeof(Base.structdiff), NamedTuple{(:init,), Tuple{Dates.Minute}}, Type{NamedTuple{(:dims,), T} where T<:Tuple}})
precompile(Tuple{typeof(SpineOpt.roll_temporal_structure!), JuMP.GenericModel{Float64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base._array_for), Type{Dates.Hour}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Dates.Hour, 1}, Dates.Hour, Base.Generator{Base.UnitRange{Int64}, SpineOpt.var"#448#449"{JuMP.GenericModel{Float64}}}, Int64})
precompile(Tuple{typeof(Base.filter!), Base.ComposedFunction{typeof(Base.:(!)), typeof(Base.isnothing)}, Array{Dates.Hour, 1}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:init,), Tuple{Dates.Minute}}, typeof(Base._sum), Array{Dates.Hour, 1}, Base.Colon})
precompile(Tuple{typeof(Dates.tons), Dates.Hour})
precompile(Tuple{typeof(Dates.tons), Dates.Minute})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{Base.ComposedFunction{typeof(Dates.tons), typeof(Base.oneunit)}, Base.Order.ReverseOrdering{Base.Order.ForwardOrdering}}, Dates.Hour, Dates.Minute})
precompile(Tuple{typeof(Base.iszero), Dates.Minute})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{Base.ComposedFunction{typeof(Dates.tons), typeof(Base.oneunit)}, Base.Order.ReverseOrdering{Base.Order.ForwardOrdering}}, Dates.Hour, Dates.Hour})
precompile(Tuple{typeof(Base.:(+)), Dates.Hour, Dates.Hour})
precompile(Tuple{typeof(Base.setindex!), Array{Dates.Period, 1}, Dates.Hour, Int64})
precompile(Tuple{typeof(SpineOpt._do_roll_temporal_structure!), JuMP.GenericModel{Float64}, Dates.CompoundPeriod, Bool})
precompile(Tuple{typeof(Dates.coarserperiod), Type{Dates.Hour}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{DataType, Int64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{DataType, Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.push!), Array{Dates.Period, 1}, Dates.Hour})
precompile(Tuple{typeof(Base.sign), Int64})
precompile(Tuple{typeof(Base.mod), Int64, Int64})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:refresh,), Tuple{Bool}}, typeof(SpineInterface.roll!), SpineInterface.TimeSlice, Dates.CompoundPeriod})
precompile(Tuple{typeof(Base.:(+)), Dates.DateTime, Dates.CompoundPeriod})
precompile(Tuple{typeof(Base.setindex!), Base.RefValue{Dates.DateTime}, Dates.DateTime})
precompile(Tuple{typeof(SpineOpt._roll_time_slice_set!), SpineOpt.TimeSliceSet, Dates.CompoundPeriod})
precompile(Tuple{typeof(Base.collect), Base.KeySet{Any, Base.Dict{Any, Any}}})
precompile(Tuple{Type{NamedTuple{(:add_user_variables, :add_constraints, :alternative_objective, :log_level), T} where T<:Tuple}, Tuple{SpineOpt.var"#62#72", SpineOpt.var"#63#73", SpineOpt.var"#92#98", Int64}})
precompile(Tuple{Type{NamedTuple{(:add_user_variables, :log_level), T} where T<:Tuple}, Tuple{SpineOpt.var"#62#72", Int64}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:add_user_variables, :log_level), Tuple{SpineOpt.var"#62#72", Int64}}, typeof(SpineOpt._add_variables!), JuMP.GenericModel{Float64}})
precompile(Tuple{typeof(SpineOpt.name_from_fn), Function})
precompile(Tuple{typeof(SpineOpt.add_variable_units_available!), JuMP.GenericModel{Float64}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Union{Nothing, Function, SpineInterface.Parameter}}, Function, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Union{Nothing, Function, SpineInterface.Parameter}}, Nothing, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Base.Dict{K, V} where V where K}, Base.Dict{Symbol, Union{Nothing, Function, SpineInterface.Parameter}}, Symbol})
precompile(Tuple{typeof(Base.vcat), Array{SpineInterface.TimeSlice, 1}, Array{SpineInterface.TimeSlice, 1}})
precompile(Tuple{Type{NamedTuple{(:t,), T} where T<:Tuple}, Tuple{Array{SpineInterface.TimeSlice, 1}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:t,), Tuple{Array{SpineInterface.TimeSlice, 1}}}, typeof(SpineOpt.units_on_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Pairs{Symbol, V, I, A} where A where I where V}, NamedTuple{(:representative_periods_mapping,), Tuple{Nothing}}, Tuple{Symbol}})
precompile(Tuple{typeof(Base.isempty), Base.Pairs{Symbol, Nothing, Tuple{Symbol}, NamedTuple{(:representative_periods_mapping,), Tuple{Nothing}}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:representative_periods_mapping,), Tuple{Nothing}}, SpineInterface.ObjectClass})
precompile(Tuple{SpineOpt.var"##units_on_indices#1107", SpineInterface.Anything, SpineInterface.Anything, Array{SpineInterface.TimeSlice, 1}, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, typeof(SpineOpt.units_on_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:unit, :temporal_block, :_compact), Tuple{SpineInterface.Anything, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, Bool}}, SpineInterface.RelationshipClass})
precompile(Tuple{typeof(Base._array_for), Type{SpineInterface.Anything}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{SpineInterface.Anything, 1}, SpineInterface.Anything, Base.Generator{Array{Symbol, 1}, SpineInterface.var"#208#214"{Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:unit, :temporal_block), Tuple{SpineInterface.Anything, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}}}}}}, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{SpineInterface.Anything, 1}, SpineInterface.Object, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Any, 1}, Base.Generator{Array{Symbol, 1}, SpineInterface.var"#208#214"{Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:unit, :temporal_block), Tuple{SpineInterface.Anything, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}}}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.get!), SpineInterface.var"#209#215"{Bool, Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:unit, :temporal_block), Tuple{SpineInterface.Anything, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}}}}, SpineInterface.RelationshipClass}, Base.Dict{Any, Any}, Tuple{SpineInterface.Anything, SpineInterface.Object}})
precompile(Tuple{SpineInterface.var"#cond#216"{Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:unit, :temporal_block), Tuple{SpineInterface.Anything, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}}}}}, NamedTuple{(:unit, :temporal_block), Tuple{SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{typeof(Base.in), SpineInterface.Object, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1109#1110"{SpineInterface.Anything, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}, Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#1109#1110"{SpineInterface.Anything, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.unique), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#1109#1110"{SpineInterface.Anything, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}}}})
precompile(Tuple{SpineOpt.var"#1109#1110"{SpineInterface.Anything, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}, NamedTuple{(:unit, :temporal_block), Tuple{SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{Type{NamedTuple{(:model, :temporal_block, :_compact), T} where T<:Tuple}, Tuple{SpineInterface.Object, SpineInterface.Object, Bool}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:model, :temporal_block, :_compact), Tuple{SpineInterface.Object, SpineInterface.Object, Bool}}, SpineInterface.RelationshipClass})
precompile(Tuple{typeof(Base.get!), SpineInterface.var"#209#215"{Bool, Base.Pairs{Symbol, SpineInterface.Object, Tuple{Symbol, Symbol}, NamedTuple{(:model, :temporal_block), Tuple{SpineInterface.Object, SpineInterface.Object}}}, SpineInterface.RelationshipClass}, Base.Dict{Any, Any}, Tuple{SpineInterface.Object, SpineInterface.Object}})
precompile(Tuple{SpineInterface.var"#cond#216"{Base.Pairs{Symbol, SpineInterface.Object, Tuple{Symbol, Symbol}, NamedTuple{(:model, :temporal_block), Tuple{SpineInterface.Object, SpineInterface.Object}}}}, NamedTuple{(:model, :temporal_block), Tuple{SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#483#484"{SpineInterface.Object, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}, Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#483#484"{SpineInterface.Object, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.unique), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#483#484"{SpineInterface.Object, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}}}})
precompile(Tuple{SpineOpt.var"#483#484"{SpineInterface.Object, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}, NamedTuple{(:model, :temporal_block), Tuple{SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:unit, :temporal_block, :_compact), Tuple{SpineInterface.Object, SpineInterface.Object, Bool}}, SpineInterface.RelationshipClass})
precompile(Tuple{typeof(Base.get!), SpineInterface.var"#209#215"{Bool, Base.Pairs{Symbol, SpineInterface.Object, Tuple{Symbol, Symbol}, NamedTuple{(:unit, :temporal_block), Tuple{SpineInterface.Object, SpineInterface.Object}}}, SpineInterface.RelationshipClass}, Base.Dict{Any, Any}, Tuple{SpineInterface.Object, SpineInterface.Object}})
precompile(Tuple{SpineInterface.var"#cond#216"{Base.Pairs{Symbol, SpineInterface.Object, Tuple{Symbol, Symbol}, NamedTuple{(:unit, :temporal_block), Tuple{SpineInterface.Object, SpineInterface.Object}}}}, NamedTuple{(:unit, :temporal_block), Tuple{SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#482#485"{SpineInterface.Object, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}, Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#482#485"{SpineInterface.Object, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#482#485"{SpineInterface.Object, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}}}, Tuple{}})
precompile(Tuple{SpineOpt.var"#482#485"{SpineInterface.Object, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}, NamedTuple{(:unit, :temporal_block), Tuple{SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:temporal_block, :t), Tuple{Array{SpineInterface.Object, 1}, Array{SpineInterface.TimeSlice, 1}}}, SpineOpt.TimeSliceSet})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#481#486"{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}, Array{SpineInterface.TimeSlice, 1}})
precompile(Tuple{typeof(Base.iterate), Array{SpineInterface.TimeSlice, 1}})
precompile(Tuple{SpineOpt.var"#481#486"{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}, SpineInterface.TimeSlice})
precompile(Tuple{typeof(Base.getindex), Type{NamedTuple{(:unit, :t), Tuple{SpineInterface.Object, SpineInterface.TimeSlice}}}, NamedTuple{(:unit, :t), Tuple{SpineInterface.Object, SpineInterface.TimeSlice}}})
precompile(Tuple{Type{Base.Set{NamedTuple{(:unit, :t), Tuple{SpineInterface.Object, SpineInterface.TimeSlice}}}}, Tuple{NamedTuple{(:unit, :t), Tuple{SpineInterface.Object, SpineInterface.TimeSlice}}}})
precompile(Tuple{typeof(Base._unique_from), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#483#484"{SpineInterface.Object, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}}}, Array{NamedTuple{(:unit, :t), Tuple{SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, Base.Set{NamedTuple{(:unit, :t), Tuple{SpineInterface.Object, SpineInterface.TimeSlice}}}, Tuple{Int64, Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#482#485"{SpineInterface.Object, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}}}, Tuple{Int64, Base.Generator{Array{SpineInterface.TimeSlice, 1}, SpineOpt.var"#481#486"{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}}, Int64}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#483#484"{SpineInterface.Object, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}}}, Tuple{Int64, Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#482#485"{SpineInterface.Object, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}}}, Tuple{Int64, Base.Generator{Array{SpineInterface.TimeSlice, 1}, SpineOpt.var"#481#486"{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}}, Int64}}})
precompile(Tuple{typeof(Base.in!), NamedTuple{(:unit, :t), Tuple{SpineInterface.Object, SpineInterface.TimeSlice}}, Base.Set{NamedTuple{(:unit, :t), Tuple{SpineInterface.Object, SpineInterface.TimeSlice}}}})
precompile(Tuple{typeof(Base.push!), Array{NamedTuple{(:unit, :t), Tuple{SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, NamedTuple{(:unit, :t), Tuple{SpineInterface.Object, SpineInterface.TimeSlice}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#621#622"{SpineInterface.Anything, JuMP.GenericModel{Float64}}, Array{NamedTuple{(:unit, :t), Tuple{SpineInterface.Object, SpineInterface.TimeSlice}}, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{NamedTuple{(:unit, :t), Tuple{SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#621#622"{SpineInterface.Anything, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.unique), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{(:unit, :t), Tuple{SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#621#622"{SpineInterface.Anything, JuMP.GenericModel{Float64}}}}})
precompile(Tuple{Type{NamedTuple{(:model, :stochastic_structure, :_compact), T} where T<:Tuple}, Tuple{SpineInterface.Object, Array{SpineInterface.Object, 1}, Bool}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:model, :stochastic_structure, :_compact), Tuple{SpineInterface.Object, Array{SpineInterface.Object, 1}, Bool}}, SpineInterface.RelationshipClass})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{SpineInterface.Object, 1}, SpineInterface.Object, Base.Generator{Array{Symbol, 1}, SpineInterface.var"#208#214"{Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:model, :stochastic_structure), Tuple{SpineInterface.Object, Array{SpineInterface.Object, 1}}}}}}, Int64})
precompile(Tuple{typeof(Base.get!), SpineInterface.var"#209#215"{Bool, Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:model, :stochastic_structure), Tuple{SpineInterface.Object, Array{SpineInterface.Object, 1}}}}, SpineInterface.RelationshipClass}, Base.Dict{Any, Any}, Tuple{SpineInterface.Object, SpineInterface.Object}})
precompile(Tuple{SpineInterface.var"#cond#216"{Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:model, :stochastic_structure), Tuple{SpineInterface.Object, Array{SpineInterface.Object, 1}}}}}, NamedTuple{(:model, :stochastic_structure), Tuple{SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#620#623"{SpineInterface.TimeSlice, SpineInterface.Object, SpineInterface.Anything, JuMP.GenericModel{Float64}}, Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#620#623"{SpineInterface.TimeSlice, SpineInterface.Object, SpineInterface.Anything, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#620#623"{SpineInterface.TimeSlice, SpineInterface.Object, SpineInterface.Anything, JuMP.GenericModel{Float64}}}}, Tuple{}})
precompile(Tuple{SpineOpt.var"#620#623"{SpineInterface.TimeSlice, SpineInterface.Object, SpineInterface.Anything, JuMP.GenericModel{Float64}}, NamedTuple{(:model, :stochastic_structure), Tuple{SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Tuple{SpineInterface.Object, SpineInterface.TimeSlice}, Array{SpineInterface.Object, 1}}, SpineInterface.Object, SpineInterface.TimeSlice})
precompile(Tuple{typeof(Base.intersect), Array{SpineInterface.Object, 1}, SpineInterface.Anything})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#619#624"{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice, SpineInterface.Object}, Array{SpineInterface.Object, 1}})
precompile(Tuple{SpineOpt.var"#619#624"{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice, SpineInterface.Object}, SpineInterface.Object})
precompile(Tuple{typeof(Base.getindex), Type{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}}, NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}})
precompile(Tuple{Type{Base.Set{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}}}, Tuple{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}}})
precompile(Tuple{typeof(Base._unique_from), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{(:unit, :t), Tuple{SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#621#622"{SpineInterface.Anything, JuMP.GenericModel{Float64}}}}, Array{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, Base.Set{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}}, Tuple{Int64, Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#620#623"{SpineInterface.TimeSlice, SpineInterface.Object, SpineInterface.Anything, JuMP.GenericModel{Float64}}}}, Tuple{Int64, Base.Generator{Array{SpineInterface.Object, 1}, SpineOpt.var"#619#624"{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice, SpineInterface.Object}}, Int64}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{(:unit, :t), Tuple{SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#621#622"{SpineInterface.Anything, JuMP.GenericModel{Float64}}}}, Tuple{Int64, Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#620#623"{SpineInterface.TimeSlice, SpineInterface.Object, SpineInterface.Anything, JuMP.GenericModel{Float64}}}}, Tuple{Int64, Base.Generator{Array{SpineInterface.Object, 1}, SpineOpt.var"#619#624"{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice, SpineInterface.Object}}, Int64}}})
precompile(Tuple{typeof(Base.in!), NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, Base.Set{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}}})
precompile(Tuple{typeof(Base.push!), Array{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1108#1111"{SpineInterface.Object}, Array{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}})
precompile(Tuple{typeof(Base.iterate), Array{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}})
precompile(Tuple{SpineOpt.var"#1108#1111"{SpineInterface.Object}, NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}})
precompile(Tuple{typeof(Base._unique_from), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#1109#1110"{SpineInterface.Anything, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}}}, Array{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, Base.Set{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}}, Tuple{Int64, Base.Generator{Array{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#1108#1111"{SpineInterface.Object}}, Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#1109#1110"{SpineInterface.Anything, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}}}, Tuple{Int64, Base.Generator{Array{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#1108#1111"{SpineInterface.Object}}, Int64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1054#1055"{typeof(SpineOpt.units_on_bin), typeof(SpineOpt.units_on_int), SpineOpt.Constant, Nothing, Nothing, Nothing, typeof(SpineOpt.units_on_replacement_value), JuMP.GenericModel{Float64}, Symbol}, Array{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:analysis_time, :unit, :stochastic_scenario, :t), Tuple{SpineInterface._StartRef, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Array{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#1054#1055"{typeof(SpineOpt.units_on_bin), typeof(SpineOpt.units_on_int), SpineOpt.Constant, Nothing, Nothing, Nothing, typeof(SpineOpt.units_on_replacement_value), JuMP.GenericModel{Float64}, Symbol}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:unit,), Tuple{SpineInterface.Object}}, SpineInterface.Parameter})
precompile(Tuple{typeof(Base.join), Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:analysis_time, :unit, :stochastic_scenario, :t), Tuple{SpineInterface._StartRef, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, String})
precompile(Tuple{typeof(Dates.format), Dates.DateTime, Dates.DateFormat{Symbol("yyyy-mm-ddTHH:MM"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}}}})
precompile(Tuple{typeof(JuMP._moi_add_variable), MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{HiGHS.Optimizer}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.GenericModel{Float64, MathOptInterface.Utilities.ObjectiveContainer{Float64}, MathOptInterface.Utilities.VariablesContainer{Float64}, MathOptInterface.Utilities.ModelFunctionConstraints{Float64}}}}, JuMP.GenericModel{Float64}, JuMP.ScalarVariable{Float64, Float64, Float64, Float64}, String})
precompile(Tuple{typeof(MathOptInterface.set), MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{HiGHS.Optimizer}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.GenericModel{Float64, MathOptInterface.Utilities.ObjectiveContainer{Float64}, MathOptInterface.Utilities.VariablesContainer{Float64}, MathOptInterface.Utilities.ModelFunctionConstraints{Float64}}}}, MathOptInterface.VariableName, MathOptInterface.VariableIndex, String})
precompile(Tuple{Type{SpineInterface.Call}, Int64})
precompile(Tuple{typeof(SpineInterface._do_realize), SpineInterface.Call, Function})
precompile(Tuple{typeof(SpineInterface._do_realize), Nothing, SpineInterface.Call, Function})
precompile(Tuple{typeof(SpineInterface._set_lower_bound), JuMP.GenericVariableRef{Float64}, Int64})
precompile(Tuple{typeof(JuMP._moi_is_fixed), MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{HiGHS.Optimizer}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.GenericModel{Float64, MathOptInterface.Utilities.ObjectiveContainer{Float64}, MathOptInterface.Utilities.VariablesContainer{Float64}, MathOptInterface.Utilities.ModelFunctionConstraints{Float64}}}}, JuMP.GenericVariableRef{Float64}})
precompile(Tuple{typeof(JuMP._moi_set_lower_bound), MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{HiGHS.Optimizer}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.GenericModel{Float64, MathOptInterface.Utilities.ObjectiveContainer{Float64}, MathOptInterface.Utilities.VariablesContainer{Float64}, MathOptInterface.Utilities.ModelFunctionConstraints{Float64}}}}, JuMP.GenericVariableRef{Float64}, Int64})
precompile(Tuple{Type{Pair{A, B} where B where A}, NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}}, Type{JuMP.GenericVariableRef{Float64}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, JuMP.GenericVariableRef{Float64}, NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Base.Generator{Array{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#1054#1055"{typeof(SpineOpt.units_on_bin), typeof(SpineOpt.units_on_int), SpineOpt.Constant, Nothing, Nothing, Nothing, typeof(SpineOpt.units_on_replacement_value), JuMP.GenericModel{Float64}, Symbol}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Base.Dict{K, V} where V where K}, Base.Dict{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Symbol})
precompile(Tuple{typeof(SpineOpt._representative_periods_mapping), JuMP.GenericModel{Float64}, Base.Dict{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, typeof(SpineOpt.units_on_indices)})
precompile(Tuple{SpineOpt.var"##units_on_indices#1107", SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, typeof(SpineOpt.units_on_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1109#1110"{SpineInterface.Anything, SpineInterface.Anything, JuMP.GenericModel{Float64}}, Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#1109#1110"{SpineInterface.Anything, SpineInterface.Anything, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.unique), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#1109#1110"{SpineInterface.Anything, SpineInterface.Anything, JuMP.GenericModel{Float64}}}}})
precompile(Tuple{SpineOpt.var"#1109#1110"{SpineInterface.Anything, SpineInterface.Anything, JuMP.GenericModel{Float64}}, NamedTuple{(:unit, :temporal_block), Tuple{SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#483#484"{SpineInterface.Object, SpineInterface.Anything, JuMP.GenericModel{Float64}}, Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#483#484"{SpineInterface.Object, SpineInterface.Anything, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.unique), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#483#484"{SpineInterface.Object, SpineInterface.Anything, JuMP.GenericModel{Float64}}}}})
precompile(Tuple{SpineOpt.var"#483#484"{SpineInterface.Object, SpineInterface.Anything, JuMP.GenericModel{Float64}}, NamedTuple{(:model, :temporal_block), Tuple{SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#482#485"{SpineInterface.Object, SpineInterface.Anything, JuMP.GenericModel{Float64}}, Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#482#485"{SpineInterface.Object, SpineInterface.Anything, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#482#485"{SpineInterface.Object, SpineInterface.Anything, JuMP.GenericModel{Float64}}}}, Tuple{}})
precompile(Tuple{SpineOpt.var"#482#485"{SpineInterface.Object, SpineInterface.Anything, JuMP.GenericModel{Float64}}, NamedTuple{(:unit, :temporal_block), Tuple{SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:temporal_block, :t), Tuple{Array{SpineInterface.Object, 1}, SpineInterface.Anything}}, SpineOpt.TimeSliceSet})
precompile(Tuple{typeof(Base._unique_from), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#483#484"{SpineInterface.Object, SpineInterface.Anything, JuMP.GenericModel{Float64}}}}, Array{NamedTuple{(:unit, :t), Tuple{SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, Base.Set{NamedTuple{(:unit, :t), Tuple{SpineInterface.Object, SpineInterface.TimeSlice}}}, Tuple{Int64, Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#482#485"{SpineInterface.Object, SpineInterface.Anything, JuMP.GenericModel{Float64}}}}, Tuple{Int64, Base.Generator{Array{SpineInterface.TimeSlice, 1}, SpineOpt.var"#481#486"{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}}, Int64}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#483#484"{SpineInterface.Object, SpineInterface.Anything, JuMP.GenericModel{Float64}}}}, Tuple{Int64, Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#482#485"{SpineInterface.Object, SpineInterface.Anything, JuMP.GenericModel{Float64}}}}, Tuple{Int64, Base.Generator{Array{SpineInterface.TimeSlice, 1}, SpineOpt.var"#481#486"{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}}, Int64}}})
precompile(Tuple{typeof(Base._unique_from), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#1109#1110"{SpineInterface.Anything, SpineInterface.Anything, JuMP.GenericModel{Float64}}}}, Array{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, Base.Set{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}}, Tuple{Int64, Base.Generator{Array{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#1108#1111"{SpineInterface.Object}}, Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#1109#1110"{SpineInterface.Anything, SpineInterface.Anything, JuMP.GenericModel{Float64}}}}, Tuple{Int64, Base.Generator{Array{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#1108#1111"{SpineInterface.Object}}, Int64}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:temporal_block,), Tuple{SpineInterface.Anything}}, typeof(SpineOpt.units_on_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{NamedTuple{(:unit, :temporal_block, :_compact), T} where T<:Tuple}, Tuple{SpineInterface.Anything, SpineInterface.Anything, Bool}})
precompile(Tuple{SpineOpt.var"##units_on_indices#1107", SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, typeof(SpineOpt.units_on_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Pairs{Symbol, V, I, A} where A where I where V}, NamedTuple{(:unit, :temporal_block), Tuple{SpineInterface.Anything, SpineInterface.Anything}}, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:unit, :temporal_block, :_compact), Tuple{SpineInterface.Anything, SpineInterface.Anything, Bool}}, SpineInterface.RelationshipClass})
precompile(Tuple{typeof(Base.get!), SpineInterface.var"#209#215"{Bool, Base.Pairs{Symbol, SpineInterface.Anything, Tuple{Symbol, Symbol}, NamedTuple{(:unit, :temporal_block), Tuple{SpineInterface.Anything, SpineInterface.Anything}}}, SpineInterface.RelationshipClass}, Base.Dict{Any, Any}, Tuple{SpineInterface.Anything, SpineInterface.Anything}})
precompile(Tuple{SpineInterface.var"#cond#216"{Base.Pairs{Symbol, SpineInterface.Anything, Tuple{Symbol, Symbol}, NamedTuple{(:unit, :temporal_block), Tuple{SpineInterface.Anything, SpineInterface.Anything}}}}, NamedTuple{(:unit, :temporal_block), Tuple{SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{typeof(Base.setdiff), Array{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, Array{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1056#1057"{JuMP.GenericModel{Float64}, Base.Dict{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, typeof(SpineOpt.units_on_indices)}, Array{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Array{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#1056#1057"{JuMP.GenericModel{Float64}, Base.Dict{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, typeof(SpineOpt.units_on_indices)}}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Base.Dict{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}})
precompile(Tuple{typeof(SpineOpt.add_variable_units_on!), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{NamedTuple{(:lb, :bin, :int, :fix_value, :initial_value, :replacement_value, :non_anticipativity_time, :non_anticipativity_margin), T} where T<:Tuple}, Tuple{SpineOpt.Constant, typeof(SpineOpt.units_on_bin), typeof(SpineOpt.units_on_int), SpineInterface.Parameter, SpineInterface.Parameter, typeof(SpineOpt.units_on_replacement_value), SpineInterface.Parameter, SpineInterface.Parameter}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:lb, :bin, :int, :fix_value, :initial_value, :replacement_value, :non_anticipativity_time, :non_anticipativity_margin), Tuple{SpineOpt.Constant, typeof(SpineOpt.units_on_bin), typeof(SpineOpt.units_on_int), SpineInterface.Parameter, SpineInterface.Parameter, typeof(SpineOpt.units_on_replacement_value), SpineInterface.Parameter, SpineInterface.Parameter}}, typeof(SpineOpt.add_variable!), JuMP.GenericModel{Float64}, Symbol, Function})
precompile(Tuple{SpineOpt.var"##add_variable!#1053", typeof(SpineOpt.units_on_bin), typeof(SpineOpt.units_on_int), SpineOpt.Constant, Nothing, SpineInterface.Parameter, SpineInterface.Parameter, Nothing, typeof(SpineOpt.units_on_replacement_value), SpineInterface.Parameter, SpineInterface.Parameter, typeof(SpineOpt.add_variable!), JuMP.GenericModel{Float64}, Symbol, typeof(SpineOpt.units_on_indices)})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Union{Nothing, Function, SpineInterface.Parameter}}, SpineInterface.Parameter, Symbol})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1054#1055"{typeof(SpineOpt.units_on_bin), typeof(SpineOpt.units_on_int), SpineOpt.Constant, Nothing, SpineInterface.Parameter, Nothing, typeof(SpineOpt.units_on_replacement_value), JuMP.GenericModel{Float64}, Symbol}, Array{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Array{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#1054#1055"{typeof(SpineOpt.units_on_bin), typeof(SpineOpt.units_on_int), SpineOpt.Constant, Nothing, SpineInterface.Parameter, Nothing, typeof(SpineOpt.units_on_replacement_value), JuMP.GenericModel{Float64}, Symbol}}})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{Symbol, Any}, SpineInterface._StartRef, Symbol})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{Symbol, Any}, SpineInterface.TimeSlice, Symbol})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, SpineInterface._StartRef})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, SpineInterface.Object})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, SpineInterface.TimeSlice})
precompile(Tuple{Type{NamedTuple{(:analysis_time, :stochastic_scenario, :t), T} where T<:Tuple}, Tuple{SpineInterface._StartRef, SpineInterface.Object, SpineInterface.TimeSlice}})
precompile(Tuple{Type{SpineInterface.Call}, SpineInterface.ParameterValue{Nothing}, NamedTuple{(:analysis_time, :stochastic_scenario, :t), Tuple{SpineInterface._StartRef, SpineInterface.Object, SpineInterface.TimeSlice}}, Tuple{Symbol, NamedTuple{(:analysis_time, :unit, :stochastic_scenario, :t), Tuple{SpineInterface._StartRef, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}}})
precompile(Tuple{typeof(SpineInterface._do_realize), SpineInterface.ParameterValue{Nothing}, SpineInterface.Call, Function})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:analysis_time, :stochastic_scenario, :t), Tuple{SpineInterface._StartRef, SpineInterface.Object, SpineInterface.TimeSlice}}, SpineInterface.ParameterValue{Nothing}, Function})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Base.Generator{Array{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#1054#1055"{typeof(SpineOpt.units_on_bin), typeof(SpineOpt.units_on_int), SpineOpt.Constant, Nothing, SpineInterface.Parameter, Nothing, typeof(SpineOpt.units_on_replacement_value), JuMP.GenericModel{Float64}, Symbol}}, Int64})
precompile(Tuple{typeof(Base._iterate), Base.Dict{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Int64})
precompile(Tuple{typeof(Base.getproperty), NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, Symbol})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, NamedTuple{(:_strict,), Tuple{Bool}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:unit, :stochastic_scenario, :t, :_strict), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice, Bool}}, SpineInterface.Parameter})
precompile(Tuple{Type{NamedTuple{(:stochastic_scenario, :t), T} where T<:Tuple}, Tuple{SpineInterface.Object, SpineInterface.TimeSlice}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.TimeSlice}}, SpineInterface.ParameterValue{Nothing}})
precompile(Tuple{Type{NamedTuple{(:lb, :bin, :int, :replacement_value), T} where T<:Tuple}, Tuple{SpineOpt.Constant, typeof(SpineOpt.units_on_bin), typeof(SpineOpt.units_on_int), typeof(SpineOpt.units_switched_replacement_value)}})
precompile(Tuple{typeof(SpineOpt.add_variable_units_started_up!), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1054#1055"{typeof(SpineOpt.units_on_bin), typeof(SpineOpt.units_on_int), SpineOpt.Constant, Nothing, Nothing, Nothing, typeof(SpineOpt.units_switched_replacement_value), JuMP.GenericModel{Float64}, Symbol}, Array{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Array{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#1054#1055"{typeof(SpineOpt.units_on_bin), typeof(SpineOpt.units_on_int), SpineOpt.Constant, Nothing, Nothing, Nothing, typeof(SpineOpt.units_switched_replacement_value), JuMP.GenericModel{Float64}, Symbol}}})
precompile(Tuple{typeof(SpineOpt.add_variable_units_shut_down!), JuMP.GenericModel{Float64}})
precompile(Tuple{typeof(SpineOpt.add_variable_unit_flow!), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{NamedTuple{(:lb, :fix_value, :initial_value, :non_anticipativity_time, :non_anticipativity_margin), T} where T<:Tuple}, NTuple{5, SpineInterface.Parameter}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:lb, :fix_value, :initial_value, :non_anticipativity_time, :non_anticipativity_margin), NTuple{5, SpineInterface.Parameter}}, typeof(SpineOpt.add_variable!), JuMP.GenericModel{Float64}, Symbol, Function})
precompile(Tuple{SpineOpt.var"##add_variable!#1053", Nothing, Nothing, SpineInterface.Parameter, Nothing, SpineInterface.Parameter, SpineInterface.Parameter, Nothing, Nothing, SpineInterface.Parameter, SpineInterface.Parameter, typeof(SpineOpt.add_variable!), JuMP.GenericModel{Float64}, Symbol, typeof(SpineOpt.unit_flow_indices)})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:t,), Tuple{Array{SpineInterface.TimeSlice, 1}}}, typeof(SpineOpt.unit_flow_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{SpineOpt.var"##unit_flow_indices#1058", SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, Array{SpineInterface.TimeSlice, 1}, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, typeof(SpineOpt.unit_flow_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{NamedTuple{(:unit, :node, :direction, :temporal_block, :_compact), T} where T<:Tuple}, Tuple{SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, Bool}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:unit, :node, :direction, :temporal_block, :_compact), Tuple{SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, Bool}}, SpineInterface.RelationshipClass})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{SpineInterface.Anything, 1}, SpineInterface.Anything, Base.Generator{Array{Symbol, 1}, SpineInterface.var"#208#214"{Base.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:unit, :node, :direction, :temporal_block), Tuple{SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}}}}}}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Any, 1}, Base.Generator{Array{Symbol, 1}, SpineInterface.var"#208#214"{Base.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:unit, :node, :direction, :temporal_block), Tuple{SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}}}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.get!), SpineInterface.var"#209#215"{Bool, Base.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:unit, :node, :direction, :temporal_block), Tuple{SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}}}}, SpineInterface.RelationshipClass}, Base.Dict{Any, Any}, Tuple{SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Object}})
precompile(Tuple{SpineInterface.var"#cond#216"{Base.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:unit, :node, :direction, :temporal_block), Tuple{SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}}}}}, NamedTuple{(:unit, :node, :direction, :temporal_block), NTuple{4, SpineInterface.Object}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1060#1061"{SpineInterface.Anything, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}, Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#1060#1061"{SpineInterface.Anything, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.unique), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#1060#1061"{SpineInterface.Anything, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}}}})
precompile(Tuple{SpineOpt.var"#1060#1061"{SpineInterface.Anything, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}, NamedTuple{(:unit, :node, :direction, :temporal_block), NTuple{4, SpineInterface.Object}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#469#470"{SpineInterface.Object, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}, Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#469#470"{SpineInterface.Object, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.unique), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#469#470"{SpineInterface.Object, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}}}})
precompile(Tuple{SpineOpt.var"#469#470"{SpineInterface.Object, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}, NamedTuple{(:model, :temporal_block), Tuple{SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:node, :temporal_block, :_compact), Tuple{SpineInterface.Object, SpineInterface.Object, Bool}}, SpineInterface.RelationshipClass})
precompile(Tuple{typeof(Base.get!), SpineInterface.var"#209#215"{Bool, Base.Pairs{Symbol, SpineInterface.Object, Tuple{Symbol, Symbol}, NamedTuple{(:node, :temporal_block), Tuple{SpineInterface.Object, SpineInterface.Object}}}, SpineInterface.RelationshipClass}, Base.Dict{Any, Any}, Tuple{SpineInterface.Object, SpineInterface.Object}})
precompile(Tuple{SpineInterface.var"#cond#216"{Base.Pairs{Symbol, SpineInterface.Object, Tuple{Symbol, Symbol}, NamedTuple{(:node, :temporal_block), Tuple{SpineInterface.Object, SpineInterface.Object}}}}, NamedTuple{(:node, :temporal_block), Tuple{SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#468#471"{SpineInterface.Object, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}, Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#468#471"{SpineInterface.Object, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#468#471"{SpineInterface.Object, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}}}, Tuple{}})
precompile(Tuple{SpineOpt.var"#468#471"{SpineInterface.Object, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}, NamedTuple{(:node, :temporal_block), Tuple{SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#467#472"{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}, Array{SpineInterface.TimeSlice, 1}})
precompile(Tuple{SpineOpt.var"#467#472"{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}, SpineInterface.TimeSlice})
precompile(Tuple{typeof(Base.getindex), Type{NamedTuple{(:node, :t), Tuple{SpineInterface.Object, SpineInterface.TimeSlice}}}, NamedTuple{(:node, :t), Tuple{SpineInterface.Object, SpineInterface.TimeSlice}}})
precompile(Tuple{Type{Base.Set{NamedTuple{(:node, :t), Tuple{SpineInterface.Object, SpineInterface.TimeSlice}}}}, Tuple{NamedTuple{(:node, :t), Tuple{SpineInterface.Object, SpineInterface.TimeSlice}}}})
precompile(Tuple{typeof(Base._unique_from), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#469#470"{SpineInterface.Object, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}}}, Array{NamedTuple{(:node, :t), Tuple{SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, Base.Set{NamedTuple{(:node, :t), Tuple{SpineInterface.Object, SpineInterface.TimeSlice}}}, Tuple{Int64, Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#468#471"{SpineInterface.Object, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}}}, Tuple{Int64, Base.Generator{Array{SpineInterface.TimeSlice, 1}, SpineOpt.var"#467#472"{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}}, Int64}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#469#470"{SpineInterface.Object, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}}}, Tuple{Int64, Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#468#471"{SpineInterface.Object, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}}}, Tuple{Int64, Base.Generator{Array{SpineInterface.TimeSlice, 1}, SpineOpt.var"#467#472"{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}}, Int64}}})
precompile(Tuple{typeof(Base.in!), NamedTuple{(:node, :t), Tuple{SpineInterface.Object, SpineInterface.TimeSlice}}, Base.Set{NamedTuple{(:node, :t), Tuple{SpineInterface.Object, SpineInterface.TimeSlice}}}})
precompile(Tuple{typeof(Base.push!), Array{NamedTuple{(:node, :t), Tuple{SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, NamedTuple{(:node, :t), Tuple{SpineInterface.Object, SpineInterface.TimeSlice}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#614#615"{SpineInterface.Anything, JuMP.GenericModel{Float64}}, Array{NamedTuple{(:node, :t), Tuple{SpineInterface.Object, SpineInterface.TimeSlice}}, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{NamedTuple{(:node, :t), Tuple{SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#614#615"{SpineInterface.Anything, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.unique), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{(:node, :t), Tuple{SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#614#615"{SpineInterface.Anything, JuMP.GenericModel{Float64}}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#613#616"{SpineInterface.TimeSlice, SpineInterface.Object, SpineInterface.Anything, JuMP.GenericModel{Float64}}, Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#613#616"{SpineInterface.TimeSlice, SpineInterface.Object, SpineInterface.Anything, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#613#616"{SpineInterface.TimeSlice, SpineInterface.Object, SpineInterface.Anything, JuMP.GenericModel{Float64}}}}, Tuple{}})
precompile(Tuple{SpineOpt.var"#613#616"{SpineInterface.TimeSlice, SpineInterface.Object, SpineInterface.Anything, JuMP.GenericModel{Float64}}, NamedTuple{(:model, :stochastic_structure), Tuple{SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#612#617"{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice, SpineInterface.Object}, Array{SpineInterface.Object, 1}})
precompile(Tuple{SpineOpt.var"#612#617"{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice, SpineInterface.Object}, SpineInterface.Object})
precompile(Tuple{typeof(Base.getindex), Type{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}}, NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}})
precompile(Tuple{Type{Base.Set{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}}}, Tuple{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}}})
precompile(Tuple{typeof(Base._unique_from), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{(:node, :t), Tuple{SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#614#615"{SpineInterface.Anything, JuMP.GenericModel{Float64}}}}, Array{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, Base.Set{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}}, Tuple{Int64, Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#613#616"{SpineInterface.TimeSlice, SpineInterface.Object, SpineInterface.Anything, JuMP.GenericModel{Float64}}}}, Tuple{Int64, Base.Generator{Array{SpineInterface.Object, 1}, SpineOpt.var"#612#617"{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice, SpineInterface.Object}}, Int64}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{(:node, :t), Tuple{SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#614#615"{SpineInterface.Anything, JuMP.GenericModel{Float64}}}}, Tuple{Int64, Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#613#616"{SpineInterface.TimeSlice, SpineInterface.Object, SpineInterface.Anything, JuMP.GenericModel{Float64}}}}, Tuple{Int64, Base.Generator{Array{SpineInterface.Object, 1}, SpineOpt.var"#612#617"{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice, SpineInterface.Object}}, Int64}}})
precompile(Tuple{typeof(Base.in!), NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, Base.Set{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}}})
precompile(Tuple{typeof(Base.push!), Array{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1059#1062"{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}, Array{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}})
precompile(Tuple{typeof(Base.iterate), Array{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}})
precompile(Tuple{SpineOpt.var"#1059#1062"{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}, NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}})
precompile(Tuple{typeof(Base.getindex), Type{NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}}, NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}})
precompile(Tuple{Type{Base.Set{NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}}}, Tuple{NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}}})
precompile(Tuple{typeof(Base._unique_from), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#1060#1061"{SpineInterface.Anything, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}}}, Array{NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, Base.Set{NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}}, Tuple{Int64, Base.Generator{Array{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#1059#1062"{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}}, Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#1060#1061"{SpineInterface.Anything, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}}}, Tuple{Int64, Base.Generator{Array{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#1059#1062"{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}}, Int64}})
precompile(Tuple{typeof(Base.in!), NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, Base.Set{NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}}})
precompile(Tuple{typeof(Base.push!), Array{NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1054#1055"{Nothing, Nothing, SpineInterface.Parameter, Nothing, SpineInterface.Parameter, Nothing, Nothing, JuMP.GenericModel{Float64}, Symbol}, Array{NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:analysis_time, :unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface._StartRef, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Array{NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#1054#1055"{Nothing, Nothing, SpineInterface.Parameter, Nothing, SpineInterface.Parameter, Nothing, Nothing, JuMP.GenericModel{Float64}, Symbol}}})
precompile(Tuple{typeof(Base.join), Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, String})
precompile(Tuple{Type{SpineInterface.Call}, SpineInterface.ParameterValue{Int64}, NamedTuple{(:analysis_time, :stochastic_scenario, :t), Tuple{SpineInterface._StartRef, SpineInterface.Object, SpineInterface.TimeSlice}}, Tuple{Symbol, NamedTuple{(:analysis_time, :unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface._StartRef, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}}})
precompile(Tuple{typeof(SpineInterface._do_realize), SpineInterface.ParameterValue{Int64}, SpineInterface.Call, Function})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:analysis_time, :stochastic_scenario, :t), Tuple{SpineInterface._StartRef, SpineInterface.Object, SpineInterface.TimeSlice}}, SpineInterface.ParameterValue{Int64}, Function})
precompile(Tuple{Type{SpineInterface.Call}, SpineInterface.ParameterValue{Nothing}, NamedTuple{(:analysis_time, :stochastic_scenario, :t), Tuple{SpineInterface._StartRef, SpineInterface.Object, SpineInterface.TimeSlice}}, Tuple{Symbol, NamedTuple{(:analysis_time, :unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface._StartRef, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Base.Dict{K, V} where V where K}, Base.Dict{NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Symbol})
precompile(Tuple{typeof(Base._iterate), Base.Dict{NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Int64})
precompile(Tuple{typeof(Base.getproperty), NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, Symbol})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, NamedTuple{(:_strict,), Tuple{Bool}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t, :_strict), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice, Bool}}, SpineInterface.Parameter})
precompile(Tuple{typeof(SpineOpt._representative_periods_mapping), JuMP.GenericModel{Float64}, Base.Dict{NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, typeof(SpineOpt.unit_flow_indices)})
precompile(Tuple{SpineOpt.var"##unit_flow_indices#1058", SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, typeof(SpineOpt.unit_flow_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1060#1061"{SpineInterface.Anything, SpineInterface.Anything, JuMP.GenericModel{Float64}}, Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#1060#1061"{SpineInterface.Anything, SpineInterface.Anything, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.unique), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#1060#1061"{SpineInterface.Anything, SpineInterface.Anything, JuMP.GenericModel{Float64}}}}})
precompile(Tuple{SpineOpt.var"#1060#1061"{SpineInterface.Anything, SpineInterface.Anything, JuMP.GenericModel{Float64}}, NamedTuple{(:unit, :node, :direction, :temporal_block), NTuple{4, SpineInterface.Object}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#469#470"{SpineInterface.Object, SpineInterface.Anything, JuMP.GenericModel{Float64}}, Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#469#470"{SpineInterface.Object, SpineInterface.Anything, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.unique), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#469#470"{SpineInterface.Object, SpineInterface.Anything, JuMP.GenericModel{Float64}}}}})
precompile(Tuple{SpineOpt.var"#469#470"{SpineInterface.Object, SpineInterface.Anything, JuMP.GenericModel{Float64}}, NamedTuple{(:model, :temporal_block), Tuple{SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#468#471"{SpineInterface.Object, SpineInterface.Anything, JuMP.GenericModel{Float64}}, Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#468#471"{SpineInterface.Object, SpineInterface.Anything, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#468#471"{SpineInterface.Object, SpineInterface.Anything, JuMP.GenericModel{Float64}}}}, Tuple{}})
precompile(Tuple{SpineOpt.var"#468#471"{SpineInterface.Object, SpineInterface.Anything, JuMP.GenericModel{Float64}}, NamedTuple{(:node, :temporal_block), Tuple{SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{typeof(Base._unique_from), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#469#470"{SpineInterface.Object, SpineInterface.Anything, JuMP.GenericModel{Float64}}}}, Array{NamedTuple{(:node, :t), Tuple{SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, Base.Set{NamedTuple{(:node, :t), Tuple{SpineInterface.Object, SpineInterface.TimeSlice}}}, Tuple{Int64, Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#468#471"{SpineInterface.Object, SpineInterface.Anything, JuMP.GenericModel{Float64}}}}, Tuple{Int64, Base.Generator{Array{SpineInterface.TimeSlice, 1}, SpineOpt.var"#467#472"{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}}, Int64}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#469#470"{SpineInterface.Object, SpineInterface.Anything, JuMP.GenericModel{Float64}}}}, Tuple{Int64, Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#468#471"{SpineInterface.Object, SpineInterface.Anything, JuMP.GenericModel{Float64}}}}, Tuple{Int64, Base.Generator{Array{SpineInterface.TimeSlice, 1}, SpineOpt.var"#467#472"{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}}, Int64}}})
precompile(Tuple{typeof(Base._unique_from), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#1060#1061"{SpineInterface.Anything, SpineInterface.Anything, JuMP.GenericModel{Float64}}}}, Array{NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, Base.Set{NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}}, Tuple{Int64, Base.Generator{Array{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#1059#1062"{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}}, Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#1060#1061"{SpineInterface.Anything, SpineInterface.Anything, JuMP.GenericModel{Float64}}}}, Tuple{Int64, Base.Generator{Array{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#1059#1062"{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}}, Int64}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:temporal_block,), Tuple{SpineInterface.Anything}}, typeof(SpineOpt.unit_flow_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{SpineOpt.var"##unit_flow_indices#1058", SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, typeof(SpineOpt.unit_flow_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{NamedTuple{(:unit, :node, :direction, :temporal_block, :_compact), T} where T<:Tuple}, Tuple{SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, Bool}})
precompile(Tuple{Type{Base.Pairs{Symbol, V, I, A} where A where I where V}, NamedTuple{(:unit, :node, :direction, :temporal_block), NTuple{4, SpineInterface.Anything}}, NTuple{4, Symbol}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:unit, :node, :direction, :temporal_block, :_compact), Tuple{SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, Bool}}, SpineInterface.RelationshipClass})
precompile(Tuple{typeof(Base.get!), SpineInterface.var"#209#215"{Bool, Base.Pairs{Symbol, SpineInterface.Anything, NTuple{4, Symbol}, NamedTuple{(:unit, :node, :direction, :temporal_block), NTuple{4, SpineInterface.Anything}}}, SpineInterface.RelationshipClass}, Base.Dict{Any, Any}, NTuple{4, SpineInterface.Anything}})
precompile(Tuple{SpineInterface.var"#cond#216"{Base.Pairs{Symbol, SpineInterface.Anything, NTuple{4, Symbol}, NamedTuple{(:unit, :node, :direction, :temporal_block), NTuple{4, SpineInterface.Anything}}}}, NamedTuple{(:unit, :node, :direction, :temporal_block), NTuple{4, SpineInterface.Object}}})
precompile(Tuple{typeof(Base.setdiff), Array{NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, Array{NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1056#1057"{JuMP.GenericModel{Float64}, Base.Dict{NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, typeof(SpineOpt.unit_flow_indices)}, Array{NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}})
precompile(Tuple{typeof(Base.tail), NTuple{5, Symbol}})
precompile(Tuple{typeof(Base.tail), NTuple{4, Symbol}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Array{NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#1056#1057"{JuMP.GenericModel{Float64}, Base.Dict{NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, typeof(SpineOpt.unit_flow_indices)}}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Base.Dict{NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}})
precompile(Tuple{typeof(SpineOpt.add_variable_unit_flow_op!), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{NamedTuple{(:lb, :fix_value, :initial_value), T} where T<:Tuple}, Tuple{SpineOpt.Constant, SpineInterface.Parameter, SpineInterface.Parameter}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:lb, :fix_value, :initial_value), Tuple{SpineOpt.Constant, SpineInterface.Parameter, SpineInterface.Parameter}}, typeof(SpineOpt.add_variable!), JuMP.GenericModel{Float64}, Symbol, Function})
precompile(Tuple{SpineOpt.var"##add_variable!#1053", Nothing, Nothing, SpineOpt.Constant, Nothing, SpineInterface.Parameter, SpineInterface.Parameter, Nothing, Nothing, Nothing, Nothing, typeof(SpineOpt.add_variable!), JuMP.GenericModel{Float64}, Symbol, typeof(SpineOpt.unit_flow_op_indices)})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:t,), Tuple{Array{SpineInterface.TimeSlice, 1}}}, typeof(SpineOpt.unit_flow_op_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{SpineOpt.var"##unit_flow_op_indices#1068", SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, Array{SpineInterface.TimeSlice, 1}, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, typeof(SpineOpt.unit_flow_op_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{NamedTuple{(:unit, :node, :direction), T} where T<:Tuple}, Tuple{SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything}})
precompile(Tuple{Type{Base.Pairs{Symbol, V, I, A} where A where I where V}, NamedTuple{(:unit, :node, :direction), Tuple{SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything}}, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:unit, :node, :direction), Tuple{SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything}}, typeof(SpineInterface.indices), SpineInterface.Parameter})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1072#1073"{SpineInterface.Anything, SpineInterface.Anything, Array{SpineInterface.TimeSlice, 1}, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, JuMP.GenericModel{Float64}}, Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, SpineInterface.Anything, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:unit, :node, :direction), Tuple{SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything}}}, SpineInterface.Parameter}}}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, SpineInterface.Anything, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:unit, :node, :direction), Tuple{SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything}}}, SpineInterface.Parameter}}}, SpineOpt.var"#1072#1073"{SpineInterface.Anything, SpineInterface.Anything, Array{SpineInterface.TimeSlice, 1}, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:unit, :node, :direction), Tuple{SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything}}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:_compact,), Tuple{Bool}}, NamedTuple{(:unit, :node, :direction), Tuple{SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:_compact,), Tuple{Bool}}, Base.Pairs{Symbol, SpineInterface.Anything, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:unit, :node, :direction), Tuple{SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything}}}})
precompile(Tuple{typeof(Base.collect), Base.Iterators.Flatten{Base.Generator{Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, SpineInterface.Anything, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:unit, :node, :direction), Tuple{SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything}}}, SpineInterface.Parameter}}}, SpineOpt.var"#1072#1073"{SpineInterface.Anything, SpineInterface.Anything, Array{SpineInterface.TimeSlice, 1}, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, JuMP.GenericModel{Float64}}}}})
precompile(Tuple{typeof(Base.get!), SpineInterface.var"#209#215"{Bool, Base.Pairs{Symbol, SpineInterface.Anything, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:unit, :node, :direction), Tuple{SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything}}}, SpineInterface.RelationshipClass}, Base.Dict{Any, Any}, Tuple{SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything}})
precompile(Tuple{SpineInterface.var"#cond#216"{Base.Pairs{Symbol, SpineInterface.Anything, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:unit, :node, :direction), Tuple{SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything}}}}, NamedTuple{(:unit, :node, :direction), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1054#1055"{Nothing, Nothing, SpineOpt.Constant, Nothing, SpineInterface.Parameter, Nothing, Nothing, JuMP.GenericModel{Float64}, Symbol}, Array{Any, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Array{Any, 1}, SpineOpt.var"#1054#1055"{Nothing, Nothing, SpineOpt.Constant, Nothing, SpineInterface.Parameter, Nothing, Nothing, JuMP.GenericModel{Float64}, Symbol}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Base.Dict{K, V} where V where K}, Base.Dict{Any, Any}, Symbol})
precompile(Tuple{typeof(SpineOpt._representative_periods_mapping), JuMP.GenericModel{Float64}, Base.Dict{Any, Any}, typeof(SpineOpt.unit_flow_op_indices)})
precompile(Tuple{SpineOpt.var"##unit_flow_op_indices#1068", SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, typeof(SpineOpt.unit_flow_op_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1072#1073"{SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, JuMP.GenericModel{Float64}}, Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, SpineInterface.Anything, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:unit, :node, :direction), Tuple{SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything}}}, SpineInterface.Parameter}}}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, SpineInterface.Anything, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:unit, :node, :direction), Tuple{SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything}}}, SpineInterface.Parameter}}}, SpineOpt.var"#1072#1073"{SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.collect), Base.Iterators.Flatten{Base.Generator{Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, SpineInterface.Anything, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:unit, :node, :direction), Tuple{SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything}}}, SpineInterface.Parameter}}}, SpineOpt.var"#1072#1073"{SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, JuMP.GenericModel{Float64}}}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:temporal_block,), Tuple{SpineInterface.Anything}}, typeof(SpineOpt.unit_flow_op_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{SpineOpt.var"##unit_flow_op_indices#1068", SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, typeof(SpineOpt.unit_flow_op_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1072#1073"{SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, JuMP.GenericModel{Float64}}, Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, SpineInterface.Anything, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:unit, :node, :direction), Tuple{SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything}}}, SpineInterface.Parameter}}}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, SpineInterface.Anything, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:unit, :node, :direction), Tuple{SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything}}}, SpineInterface.Parameter}}}, SpineOpt.var"#1072#1073"{SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.collect), Base.Iterators.Flatten{Base.Generator{Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, SpineInterface.Anything, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:unit, :node, :direction), Tuple{SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything}}}, SpineInterface.Parameter}}}, SpineOpt.var"#1072#1073"{SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, JuMP.GenericModel{Float64}}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1056#1057"{JuMP.GenericModel{Float64}, Base.Dict{Any, Any}, typeof(SpineOpt.unit_flow_op_indices)}, Array{Any, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Array{Any, 1}, SpineOpt.var"#1056#1057"{JuMP.GenericModel{Float64}, Base.Dict{Any, Any}, typeof(SpineOpt.unit_flow_op_indices)}}})
precompile(Tuple{Type{NamedTuple{(:lb, :bin, :int), T} where T<:Tuple}, Tuple{SpineOpt.Constant, typeof(SpineOpt.units_on_bin), typeof(SpineOpt.units_on_int)}})
precompile(Tuple{typeof(SpineOpt.add_variable_unit_flow_op_active!), JuMP.GenericModel{Float64}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:t,), Tuple{Array{SpineInterface.TimeSlice, 1}}}, typeof(SpineOpt.unit_flow_op_active_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{SpineOpt.var"##unit_flow_op_active_indices#1077", SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, Array{SpineInterface.TimeSlice, 1}, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, typeof(SpineOpt.unit_flow_op_active_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Iterators.Filter{F, I} where I where F}, SpineOpt.var"#1079#1081", Array{Any, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1078#1080", Base.Iterators.Filter{SpineOpt.var"#1079#1081", Array{Any, 1}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Filter{SpineOpt.var"#1079#1081", Array{Any, 1}}, SpineOpt.var"#1078#1080"}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1054#1055"{typeof(SpineOpt.units_on_bin), typeof(SpineOpt.units_on_int), SpineOpt.Constant, Nothing, Nothing, Nothing, Nothing, JuMP.GenericModel{Float64}, Symbol}, Array{Any, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Array{Any, 1}, SpineOpt.var"#1054#1055"{typeof(SpineOpt.units_on_bin), typeof(SpineOpt.units_on_int), SpineOpt.Constant, Nothing, Nothing, Nothing, Nothing, JuMP.GenericModel{Float64}, Symbol}}})
precompile(Tuple{typeof(SpineOpt._representative_periods_mapping), JuMP.GenericModel{Float64}, Base.Dict{Any, Any}, typeof(SpineOpt.unit_flow_op_active_indices)})
precompile(Tuple{SpineOpt.var"##unit_flow_op_active_indices#1077", SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, typeof(SpineOpt.unit_flow_op_active_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:temporal_block,), Tuple{SpineInterface.Anything}}, typeof(SpineOpt.unit_flow_op_active_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{SpineOpt.var"##unit_flow_op_active_indices#1077", SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, typeof(SpineOpt.unit_flow_op_active_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1056#1057"{JuMP.GenericModel{Float64}, Base.Dict{Any, Any}, typeof(SpineOpt.unit_flow_op_active_indices)}, Array{Any, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Array{Any, 1}, SpineOpt.var"#1056#1057"{JuMP.GenericModel{Float64}, Base.Dict{Any, Any}, typeof(SpineOpt.unit_flow_op_active_indices)}}})
precompile(Tuple{typeof(SpineOpt.add_variable_connection_flow!), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{NamedTuple{(:lb, :fix_value, :initial_value, :non_anticipativity_time, :non_anticipativity_margin), T} where T<:Tuple}, Tuple{SpineOpt.Constant, Vararg{SpineInterface.Parameter, 4}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:lb, :fix_value, :initial_value, :non_anticipativity_time, :non_anticipativity_margin), Tuple{SpineOpt.Constant, Vararg{SpineInterface.Parameter, 4}}}, typeof(SpineOpt.add_variable!), JuMP.GenericModel{Float64}, Symbol, Function})
precompile(Tuple{SpineOpt.var"##add_variable!#1053", Nothing, Nothing, SpineOpt.Constant, Nothing, SpineInterface.Parameter, SpineInterface.Parameter, Nothing, Nothing, SpineInterface.Parameter, SpineInterface.Parameter, typeof(SpineOpt.add_variable!), JuMP.GenericModel{Float64}, Symbol, typeof(SpineOpt.connection_flow_indices)})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:t,), Tuple{Array{SpineInterface.TimeSlice, 1}}}, typeof(SpineOpt.connection_flow_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{SpineOpt.var"##connection_flow_indices#1082", SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, Array{SpineInterface.TimeSlice, 1}, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, typeof(SpineOpt.connection_flow_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{NamedTuple{(:connection, :node, :direction, :temporal_block, :_compact), T} where T<:Tuple}, Tuple{SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, Bool}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:connection, :node, :direction, :temporal_block, :_compact), Tuple{SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, Bool}}, SpineInterface.RelationshipClass})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{SpineInterface.Anything, 1}, SpineInterface.Anything, Base.Generator{Array{Symbol, 1}, SpineInterface.var"#208#214"{Base.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:connection, :node, :direction, :temporal_block), Tuple{SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}}}}}}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Any, 1}, Base.Generator{Array{Symbol, 1}, SpineInterface.var"#208#214"{Base.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:connection, :node, :direction, :temporal_block), Tuple{SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}}}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.get!), SpineInterface.var"#209#215"{Bool, Base.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:connection, :node, :direction, :temporal_block), Tuple{SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}}}}, SpineInterface.RelationshipClass}, Base.Dict{Any, Any}, Tuple{SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Object}})
precompile(Tuple{SpineInterface.var"#cond#216"{Base.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:connection, :node, :direction, :temporal_block), Tuple{SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}}}}}, NamedTuple{(:connection, :node, :direction, :temporal_block), NTuple{4, SpineInterface.Object}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1084#1085"{SpineInterface.Anything, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}, Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#1084#1085"{SpineInterface.Anything, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.unique), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#1084#1085"{SpineInterface.Anything, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}}}})
precompile(Tuple{SpineOpt.var"#1084#1085"{SpineInterface.Anything, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}, NamedTuple{(:connection, :node, :direction, :temporal_block), NTuple{4, SpineInterface.Object}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1083#1086"{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}, Array{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}})
precompile(Tuple{SpineOpt.var"#1083#1086"{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}, NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}})
precompile(Tuple{typeof(Base.getindex), Type{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}}, NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}})
precompile(Tuple{Type{Base.Set{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}}}, Tuple{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}}})
precompile(Tuple{typeof(Base._unique_from), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#1084#1085"{SpineInterface.Anything, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}}}, Array{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, Base.Set{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}}, Tuple{Int64, Base.Generator{Array{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#1083#1086"{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}}, Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#1084#1085"{SpineInterface.Anything, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}}}, Tuple{Int64, Base.Generator{Array{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#1083#1086"{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}}, Int64}})
precompile(Tuple{typeof(Base.in!), NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, Base.Set{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}}})
precompile(Tuple{typeof(Base.push!), Array{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}})
precompile(Tuple{typeof(Base.hashindex), Tuple{SpineInterface.Object, SpineInterface.Object}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1054#1055"{Nothing, Nothing, SpineOpt.Constant, Nothing, SpineInterface.Parameter, Nothing, Nothing, JuMP.GenericModel{Float64}, Symbol}, Array{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:analysis_time, :connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface._StartRef, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Array{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#1054#1055"{Nothing, Nothing, SpineOpt.Constant, Nothing, SpineInterface.Parameter, Nothing, Nothing, JuMP.GenericModel{Float64}, Symbol}}})
precompile(Tuple{typeof(Base.join), Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, String})
precompile(Tuple{Type{SpineInterface.Call}, SpineInterface.ParameterValue{Nothing}, NamedTuple{(:analysis_time, :stochastic_scenario, :t), Tuple{SpineInterface._StartRef, SpineInterface.Object, SpineInterface.TimeSlice}}, Tuple{Symbol, NamedTuple{(:analysis_time, :connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface._StartRef, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Base.Dict{K, V} where V where K}, Base.Dict{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Symbol})
precompile(Tuple{typeof(Base._iterate), Base.Dict{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Int64})
precompile(Tuple{typeof(Base.getproperty), NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, Symbol})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, NamedTuple{(:_strict,), Tuple{Bool}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t, :_strict), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice, Bool}}, SpineInterface.Parameter})
precompile(Tuple{typeof(SpineOpt._representative_periods_mapping), JuMP.GenericModel{Float64}, Base.Dict{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, typeof(SpineOpt.connection_flow_indices)})
precompile(Tuple{SpineOpt.var"##connection_flow_indices#1082", SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, typeof(SpineOpt.connection_flow_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1084#1085"{SpineInterface.Anything, SpineInterface.Anything, JuMP.GenericModel{Float64}}, Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#1084#1085"{SpineInterface.Anything, SpineInterface.Anything, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.unique), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#1084#1085"{SpineInterface.Anything, SpineInterface.Anything, JuMP.GenericModel{Float64}}}}})
precompile(Tuple{SpineOpt.var"#1084#1085"{SpineInterface.Anything, SpineInterface.Anything, JuMP.GenericModel{Float64}}, NamedTuple{(:connection, :node, :direction, :temporal_block), NTuple{4, SpineInterface.Object}}})
precompile(Tuple{typeof(Base._unique_from), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#1084#1085"{SpineInterface.Anything, SpineInterface.Anything, JuMP.GenericModel{Float64}}}}, Array{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, Base.Set{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}}, Tuple{Int64, Base.Generator{Array{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#1083#1086"{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}}, Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#1084#1085"{SpineInterface.Anything, SpineInterface.Anything, JuMP.GenericModel{Float64}}}}, Tuple{Int64, Base.Generator{Array{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#1083#1086"{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}}, Int64}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:temporal_block,), Tuple{SpineInterface.Anything}}, typeof(SpineOpt.connection_flow_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{SpineOpt.var"##connection_flow_indices#1082", SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, typeof(SpineOpt.connection_flow_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{NamedTuple{(:connection, :node, :direction, :temporal_block, :_compact), T} where T<:Tuple}, Tuple{SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, Bool}})
precompile(Tuple{Type{Base.Pairs{Symbol, V, I, A} where A where I where V}, NamedTuple{(:connection, :node, :direction, :temporal_block), NTuple{4, SpineInterface.Anything}}, NTuple{4, Symbol}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:connection, :node, :direction, :temporal_block, :_compact), Tuple{SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, Bool}}, SpineInterface.RelationshipClass})
precompile(Tuple{typeof(Base.get!), SpineInterface.var"#209#215"{Bool, Base.Pairs{Symbol, SpineInterface.Anything, NTuple{4, Symbol}, NamedTuple{(:connection, :node, :direction, :temporal_block), NTuple{4, SpineInterface.Anything}}}, SpineInterface.RelationshipClass}, Base.Dict{Any, Any}, NTuple{4, SpineInterface.Anything}})
precompile(Tuple{SpineInterface.var"#cond#216"{Base.Pairs{Symbol, SpineInterface.Anything, NTuple{4, Symbol}, NamedTuple{(:connection, :node, :direction, :temporal_block), NTuple{4, SpineInterface.Anything}}}}, NamedTuple{(:connection, :node, :direction, :temporal_block), NTuple{4, SpineInterface.Object}}})
precompile(Tuple{typeof(Base.setdiff), Array{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, Array{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1056#1057"{JuMP.GenericModel{Float64}, Base.Dict{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, typeof(SpineOpt.connection_flow_indices)}, Array{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Array{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#1056#1057"{JuMP.GenericModel{Float64}, Base.Dict{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, typeof(SpineOpt.connection_flow_indices)}}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Base.Dict{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}})
precompile(Tuple{typeof(SpineOpt.add_variable_connection_intact_flow!), JuMP.GenericModel{Float64}})
precompile(Tuple{SpineOpt.var"##add_variable!#1053", Nothing, Nothing, SpineOpt.Constant, Nothing, SpineInterface.Parameter, SpineInterface.Parameter, Nothing, Nothing, SpineInterface.Parameter, SpineInterface.Parameter, typeof(SpineOpt.add_variable!), JuMP.GenericModel{Float64}, Symbol, typeof(SpineOpt.connection_intact_flow_indices)})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:t,), Tuple{Array{SpineInterface.TimeSlice, 1}}}, typeof(SpineOpt.connection_intact_flow_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{SpineOpt.var"##connection_intact_flow_indices#1087", SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, Array{SpineInterface.TimeSlice, 1}, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, typeof(SpineOpt.connection_intact_flow_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1089#1090"{SpineInterface.Anything, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}, Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#1089#1090"{SpineInterface.Anything, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.unique), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#1089#1090"{SpineInterface.Anything, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}}}})
precompile(Tuple{SpineOpt.var"#1089#1090"{SpineInterface.Anything, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}, NamedTuple{(:connection, :node, :direction, :temporal_block), NTuple{4, SpineInterface.Object}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1088#1091"{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}, Array{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}})
precompile(Tuple{SpineOpt.var"#1088#1091"{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}, NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}})
precompile(Tuple{typeof(Base._unique_from), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#1089#1090"{SpineInterface.Anything, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}}}, Array{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, Base.Set{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}}, Tuple{Int64, Base.Generator{Array{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#1088#1091"{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}}, Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#1089#1090"{SpineInterface.Anything, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}}}, Tuple{Int64, Base.Generator{Array{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#1088#1091"{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}}, Int64}})
precompile(Tuple{typeof(SpineOpt._representative_periods_mapping), JuMP.GenericModel{Float64}, Base.Dict{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, typeof(SpineOpt.connection_intact_flow_indices)})
precompile(Tuple{SpineOpt.var"##connection_intact_flow_indices#1087", SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, typeof(SpineOpt.connection_intact_flow_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1089#1090"{SpineInterface.Anything, SpineInterface.Anything, JuMP.GenericModel{Float64}}, Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#1089#1090"{SpineInterface.Anything, SpineInterface.Anything, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.unique), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#1089#1090"{SpineInterface.Anything, SpineInterface.Anything, JuMP.GenericModel{Float64}}}}})
precompile(Tuple{SpineOpt.var"#1089#1090"{SpineInterface.Anything, SpineInterface.Anything, JuMP.GenericModel{Float64}}, NamedTuple{(:connection, :node, :direction, :temporal_block), NTuple{4, SpineInterface.Object}}})
precompile(Tuple{typeof(Base._unique_from), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#1089#1090"{SpineInterface.Anything, SpineInterface.Anything, JuMP.GenericModel{Float64}}}}, Array{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, Base.Set{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}}, Tuple{Int64, Base.Generator{Array{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#1088#1091"{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}}, Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#1089#1090"{SpineInterface.Anything, SpineInterface.Anything, JuMP.GenericModel{Float64}}}}, Tuple{Int64, Base.Generator{Array{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#1088#1091"{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}}, Int64}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:temporal_block,), Tuple{SpineInterface.Anything}}, typeof(SpineOpt.connection_intact_flow_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{SpineOpt.var"##connection_intact_flow_indices#1087", SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, typeof(SpineOpt.connection_intact_flow_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1056#1057"{JuMP.GenericModel{Float64}, Base.Dict{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, typeof(SpineOpt.connection_intact_flow_indices)}, Array{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Array{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#1056#1057"{JuMP.GenericModel{Float64}, Base.Dict{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, typeof(SpineOpt.connection_intact_flow_indices)}}})
precompile(Tuple{typeof(SpineOpt.add_variable_connections_invested!), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{NamedTuple{(:lb, :fix_value, :initial_value, :int), T} where T<:Tuple}, Tuple{SpineOpt.Constant, SpineInterface.Parameter, SpineInterface.Parameter, typeof(SpineOpt.connections_invested_available_int)}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:lb, :fix_value, :initial_value, :int), Tuple{SpineOpt.Constant, SpineInterface.Parameter, SpineInterface.Parameter, typeof(SpineOpt.connections_invested_available_int)}}, typeof(SpineOpt.add_variable!), JuMP.GenericModel{Float64}, Symbol, Function})
precompile(Tuple{SpineOpt.var"##add_variable!#1053", Nothing, typeof(SpineOpt.connections_invested_available_int), SpineOpt.Constant, Nothing, SpineInterface.Parameter, SpineInterface.Parameter, Nothing, Nothing, Nothing, Nothing, typeof(SpineOpt.add_variable!), JuMP.GenericModel{Float64}, Symbol, typeof(SpineOpt.connections_invested_available_indices)})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:t,), Tuple{Array{SpineInterface.TimeSlice, 1}}}, typeof(SpineOpt.connections_invested_available_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{SpineOpt.var"##connections_invested_available_indices#1092", SpineInterface.Anything, SpineInterface.Anything, Array{SpineInterface.TimeSlice, 1}, SpineInterface.Anything, typeof(SpineOpt.connections_invested_available_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{NamedTuple{(:connection, :temporal_block, :_compact), T} where T<:Tuple}, Tuple{SpineInterface.Anything, SpineInterface.Anything, Bool}})
precompile(Tuple{Type{Base.Pairs{Symbol, V, I, A} where A where I where V}, NamedTuple{(:connection, :temporal_block), Tuple{SpineInterface.Anything, SpineInterface.Anything}}, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:connection, :temporal_block, :_compact), Tuple{SpineInterface.Anything, SpineInterface.Anything, Bool}}, SpineInterface.RelationshipClass})
precompile(Tuple{typeof(Base.get!), SpineInterface.var"#209#215"{Bool, Base.Pairs{Symbol, SpineInterface.Anything, Tuple{Symbol, Symbol}, NamedTuple{(:connection, :temporal_block), Tuple{SpineInterface.Anything, SpineInterface.Anything}}}, SpineInterface.RelationshipClass}, Base.Dict{Any, Any}, Tuple{SpineInterface.Anything, SpineInterface.Anything}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1094#1095"{SpineInterface.Anything, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}, Array{Any, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{Any, 1}, SpineOpt.var"#1094#1095"{SpineInterface.Anything, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.unique), Base.Iterators.Flatten{Base.Generator{Array{Any, 1}, SpineOpt.var"#1094#1095"{SpineInterface.Anything, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1054#1055"{Nothing, typeof(SpineOpt.connections_invested_available_int), SpineOpt.Constant, Nothing, SpineInterface.Parameter, Nothing, Nothing, JuMP.GenericModel{Float64}, Symbol}, Array{Any, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Array{Any, 1}, SpineOpt.var"#1054#1055"{Nothing, typeof(SpineOpt.connections_invested_available_int), SpineOpt.Constant, Nothing, SpineInterface.Parameter, Nothing, Nothing, JuMP.GenericModel{Float64}, Symbol}}})
precompile(Tuple{typeof(SpineOpt._representative_periods_mapping), JuMP.GenericModel{Float64}, Base.Dict{Any, Any}, typeof(SpineOpt.connections_invested_available_indices)})
precompile(Tuple{SpineOpt.var"##connections_invested_available_indices#1092", SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, typeof(SpineOpt.connections_invested_available_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1094#1095"{SpineInterface.Anything, SpineInterface.Anything, JuMP.GenericModel{Float64}}, Array{Any, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{Any, 1}, SpineOpt.var"#1094#1095"{SpineInterface.Anything, SpineInterface.Anything, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.unique), Base.Iterators.Flatten{Base.Generator{Array{Any, 1}, SpineOpt.var"#1094#1095"{SpineInterface.Anything, SpineInterface.Anything, JuMP.GenericModel{Float64}}}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:temporal_block,), Tuple{SpineInterface.Anything}}, typeof(SpineOpt.connections_invested_available_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1056#1057"{JuMP.GenericModel{Float64}, Base.Dict{Any, Any}, typeof(SpineOpt.connections_invested_available_indices)}, Array{Any, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Array{Any, 1}, SpineOpt.var"#1056#1057"{JuMP.GenericModel{Float64}, Base.Dict{Any, Any}, typeof(SpineOpt.connections_invested_available_indices)}}})
precompile(Tuple{typeof(SpineOpt.add_variable_connections_invested_available!), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{NamedTuple{(:lb, :int, :fix_value, :internal_fix_value, :initial_value), T} where T<:Tuple}, Tuple{SpineOpt.Constant, typeof(SpineOpt.connections_invested_available_int), SpineInterface.Parameter, SpineInterface.Parameter, SpineInterface.Parameter}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:lb, :int, :fix_value, :internal_fix_value, :initial_value), Tuple{SpineOpt.Constant, typeof(SpineOpt.connections_invested_available_int), SpineInterface.Parameter, SpineInterface.Parameter, SpineInterface.Parameter}}, typeof(SpineOpt.add_variable!), JuMP.GenericModel{Float64}, Symbol, Function})
precompile(Tuple{SpineOpt.var"##add_variable!#1053", Nothing, typeof(SpineOpt.connections_invested_available_int), SpineOpt.Constant, Nothing, SpineInterface.Parameter, SpineInterface.Parameter, SpineInterface.Parameter, Nothing, Nothing, Nothing, typeof(SpineOpt.add_variable!), JuMP.GenericModel{Float64}, Symbol, typeof(SpineOpt.connections_invested_available_indices)})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1054#1055"{Nothing, typeof(SpineOpt.connections_invested_available_int), SpineOpt.Constant, Nothing, SpineInterface.Parameter, SpineInterface.Parameter, Nothing, JuMP.GenericModel{Float64}, Symbol}, Array{Any, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Array{Any, 1}, SpineOpt.var"#1054#1055"{Nothing, typeof(SpineOpt.connections_invested_available_int), SpineOpt.Constant, Nothing, SpineInterface.Parameter, SpineInterface.Parameter, Nothing, JuMP.GenericModel{Float64}, Symbol}}})
precompile(Tuple{Type{NamedTuple{(:lb, :int), T} where T<:Tuple}, Tuple{SpineOpt.Constant, typeof(SpineOpt.connections_invested_available_int)}})
precompile(Tuple{typeof(SpineOpt.add_variable_connections_decommissioned!), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1054#1055"{Nothing, typeof(SpineOpt.connections_invested_available_int), SpineOpt.Constant, Nothing, Nothing, Nothing, Nothing, JuMP.GenericModel{Float64}, Symbol}, Array{Any, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Array{Any, 1}, SpineOpt.var"#1054#1055"{Nothing, typeof(SpineOpt.connections_invested_available_int), SpineOpt.Constant, Nothing, Nothing, Nothing, Nothing, JuMP.GenericModel{Float64}, Symbol}}})
precompile(Tuple{typeof(SpineOpt.add_variable_storages_invested!), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{NamedTuple{(:lb, :int, :fix_value, :initial_value), T} where T<:Tuple}, Tuple{SpineOpt.Constant, typeof(SpineOpt.storages_invested_available_int), SpineInterface.Parameter, SpineInterface.Parameter}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:lb, :int, :fix_value, :initial_value), Tuple{SpineOpt.Constant, typeof(SpineOpt.storages_invested_available_int), SpineInterface.Parameter, SpineInterface.Parameter}}, typeof(SpineOpt.add_variable!), JuMP.GenericModel{Float64}, Symbol, Function})
precompile(Tuple{SpineOpt.var"##add_variable!#1053", Nothing, typeof(SpineOpt.storages_invested_available_int), SpineOpt.Constant, Nothing, SpineInterface.Parameter, SpineInterface.Parameter, Nothing, Nothing, Nothing, Nothing, typeof(SpineOpt.add_variable!), JuMP.GenericModel{Float64}, Symbol, typeof(SpineOpt.storages_invested_available_indices)})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:t,), Tuple{Array{SpineInterface.TimeSlice, 1}}}, typeof(SpineOpt.storages_invested_available_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{SpineOpt.var"##storages_invested_available_indices#1097", SpineInterface.Anything, SpineInterface.Anything, Array{SpineInterface.TimeSlice, 1}, SpineInterface.Anything, typeof(SpineOpt.storages_invested_available_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{NamedTuple{(:node, :temporal_block, :_compact), T} where T<:Tuple}, Tuple{SpineInterface.Anything, SpineInterface.Anything, Bool}})
precompile(Tuple{Type{Base.Pairs{Symbol, V, I, A} where A where I where V}, NamedTuple{(:node, :temporal_block), Tuple{SpineInterface.Anything, SpineInterface.Anything}}, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:node, :temporal_block, :_compact), Tuple{SpineInterface.Anything, SpineInterface.Anything, Bool}}, SpineInterface.RelationshipClass})
precompile(Tuple{typeof(Base.get!), SpineInterface.var"#209#215"{Bool, Base.Pairs{Symbol, SpineInterface.Anything, Tuple{Symbol, Symbol}, NamedTuple{(:node, :temporal_block), Tuple{SpineInterface.Anything, SpineInterface.Anything}}}, SpineInterface.RelationshipClass}, Base.Dict{Any, Any}, Tuple{SpineInterface.Anything, SpineInterface.Anything}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1099#1100"{SpineInterface.Anything, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}, Array{Any, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{Any, 1}, SpineOpt.var"#1099#1100"{SpineInterface.Anything, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.unique), Base.Iterators.Flatten{Base.Generator{Array{Any, 1}, SpineOpt.var"#1099#1100"{SpineInterface.Anything, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1054#1055"{Nothing, typeof(SpineOpt.storages_invested_available_int), SpineOpt.Constant, Nothing, SpineInterface.Parameter, Nothing, Nothing, JuMP.GenericModel{Float64}, Symbol}, Array{Any, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Array{Any, 1}, SpineOpt.var"#1054#1055"{Nothing, typeof(SpineOpt.storages_invested_available_int), SpineOpt.Constant, Nothing, SpineInterface.Parameter, Nothing, Nothing, JuMP.GenericModel{Float64}, Symbol}}})
precompile(Tuple{typeof(SpineOpt._representative_periods_mapping), JuMP.GenericModel{Float64}, Base.Dict{Any, Any}, typeof(SpineOpt.storages_invested_available_indices)})
precompile(Tuple{SpineOpt.var"##storages_invested_available_indices#1097", SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, typeof(SpineOpt.storages_invested_available_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1099#1100"{SpineInterface.Anything, SpineInterface.Anything, JuMP.GenericModel{Float64}}, Array{Any, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{Any, 1}, SpineOpt.var"#1099#1100"{SpineInterface.Anything, SpineInterface.Anything, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.unique), Base.Iterators.Flatten{Base.Generator{Array{Any, 1}, SpineOpt.var"#1099#1100"{SpineInterface.Anything, SpineInterface.Anything, JuMP.GenericModel{Float64}}}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:temporal_block,), Tuple{SpineInterface.Anything}}, typeof(SpineOpt.storages_invested_available_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1056#1057"{JuMP.GenericModel{Float64}, Base.Dict{Any, Any}, typeof(SpineOpt.storages_invested_available_indices)}, Array{Any, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Array{Any, 1}, SpineOpt.var"#1056#1057"{JuMP.GenericModel{Float64}, Base.Dict{Any, Any}, typeof(SpineOpt.storages_invested_available_indices)}}})
precompile(Tuple{typeof(SpineOpt.add_variable_storages_invested_available!), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{NamedTuple{(:lb, :int, :fix_value, :internal_fix_value, :initial_value), T} where T<:Tuple}, Tuple{SpineOpt.Constant, typeof(SpineOpt.storages_invested_available_int), SpineInterface.Parameter, SpineInterface.Parameter, SpineInterface.Parameter}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:lb, :int, :fix_value, :internal_fix_value, :initial_value), Tuple{SpineOpt.Constant, typeof(SpineOpt.storages_invested_available_int), SpineInterface.Parameter, SpineInterface.Parameter, SpineInterface.Parameter}}, typeof(SpineOpt.add_variable!), JuMP.GenericModel{Float64}, Symbol, Function})
precompile(Tuple{SpineOpt.var"##add_variable!#1053", Nothing, typeof(SpineOpt.storages_invested_available_int), SpineOpt.Constant, Nothing, SpineInterface.Parameter, SpineInterface.Parameter, SpineInterface.Parameter, Nothing, Nothing, Nothing, typeof(SpineOpt.add_variable!), JuMP.GenericModel{Float64}, Symbol, typeof(SpineOpt.storages_invested_available_indices)})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1054#1055"{Nothing, typeof(SpineOpt.storages_invested_available_int), SpineOpt.Constant, Nothing, SpineInterface.Parameter, SpineInterface.Parameter, Nothing, JuMP.GenericModel{Float64}, Symbol}, Array{Any, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Array{Any, 1}, SpineOpt.var"#1054#1055"{Nothing, typeof(SpineOpt.storages_invested_available_int), SpineOpt.Constant, Nothing, SpineInterface.Parameter, SpineInterface.Parameter, Nothing, JuMP.GenericModel{Float64}, Symbol}}})
precompile(Tuple{Type{NamedTuple{(:lb, :int), T} where T<:Tuple}, Tuple{SpineOpt.Constant, typeof(SpineOpt.storages_invested_available_int)}})
precompile(Tuple{typeof(SpineOpt.add_variable_storages_decommissioned!), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1054#1055"{Nothing, typeof(SpineOpt.storages_invested_available_int), SpineOpt.Constant, Nothing, Nothing, Nothing, Nothing, JuMP.GenericModel{Float64}, Symbol}, Array{Any, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Array{Any, 1}, SpineOpt.var"#1054#1055"{Nothing, typeof(SpineOpt.storages_invested_available_int), SpineOpt.Constant, Nothing, Nothing, Nothing, Nothing, JuMP.GenericModel{Float64}, Symbol}}})
precompile(Tuple{typeof(SpineOpt.add_variable_node_state!), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{NamedTuple{(:lb, :fix_value, :initial_value), T} where T<:Tuple}, Tuple{SpineInterface.Parameter, SpineInterface.Parameter, SpineInterface.Parameter}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:lb, :fix_value, :initial_value), Tuple{SpineInterface.Parameter, SpineInterface.Parameter, SpineInterface.Parameter}}, typeof(SpineOpt.add_variable!), JuMP.GenericModel{Float64}, Symbol, Function})
precompile(Tuple{SpineOpt.var"##add_variable!#1053", Nothing, Nothing, SpineInterface.Parameter, Nothing, SpineInterface.Parameter, SpineInterface.Parameter, Nothing, Nothing, Nothing, Nothing, typeof(SpineOpt.add_variable!), JuMP.GenericModel{Float64}, Symbol, typeof(SpineOpt.node_state_indices)})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:t,), Tuple{Array{SpineInterface.TimeSlice, 1}}}, typeof(SpineOpt.node_state_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{SpineOpt.var"##node_state_indices#1102", SpineInterface.Anything, SpineInterface.Anything, Array{SpineInterface.TimeSlice, 1}, SpineInterface.Anything, typeof(SpineOpt.node_state_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{SpineInterface.var"#cond#216"{Base.Pairs{Symbol, SpineInterface.Anything, Tuple{Symbol, Symbol}, NamedTuple{(:node, :temporal_block), Tuple{SpineInterface.Anything, SpineInterface.Anything}}}}, NamedTuple{(:node, :temporal_block), Tuple{SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1104#1105"{SpineInterface.Anything, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}, Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#1104#1105"{SpineInterface.Anything, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.unique), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#1104#1105"{SpineInterface.Anything, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}}}})
precompile(Tuple{SpineOpt.var"#1104#1105"{SpineInterface.Anything, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}, NamedTuple{(:node, :temporal_block), Tuple{SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1103#1106"{SpineInterface.Object}, Array{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}})
precompile(Tuple{SpineOpt.var"#1103#1106"{SpineInterface.Object}, NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}})
precompile(Tuple{typeof(Base._unique_from), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#1104#1105"{SpineInterface.Anything, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}}}, Array{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, Base.Set{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}}, Tuple{Int64, Base.Generator{Array{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#1103#1106"{SpineInterface.Object}}, Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#1104#1105"{SpineInterface.Anything, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}}}, Tuple{Int64, Base.Generator{Array{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#1103#1106"{SpineInterface.Object}}, Int64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1054#1055"{Nothing, Nothing, SpineInterface.Parameter, Nothing, SpineInterface.Parameter, Nothing, Nothing, JuMP.GenericModel{Float64}, Symbol}, Array{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:analysis_time, :node, :stochastic_scenario, :t), Tuple{SpineInterface._StartRef, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Array{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#1054#1055"{Nothing, Nothing, SpineInterface.Parameter, Nothing, SpineInterface.Parameter, Nothing, Nothing, JuMP.GenericModel{Float64}, Symbol}}})
precompile(Tuple{typeof(Base.join), Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, String})
precompile(Tuple{Type{SpineInterface.Call}, SpineInterface.ParameterValue{Int64}, NamedTuple{(:analysis_time, :stochastic_scenario, :t), Tuple{SpineInterface._StartRef, SpineInterface.Object, SpineInterface.TimeSlice}}, Tuple{Symbol, NamedTuple{(:analysis_time, :node, :stochastic_scenario, :t), Tuple{SpineInterface._StartRef, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}}})
precompile(Tuple{Type{SpineInterface.Call}, SpineInterface.ParameterValue{SpineInterface.TimeSeries{Float64}}, NamedTuple{(:analysis_time, :stochastic_scenario, :t), Tuple{SpineInterface._StartRef, SpineInterface.Object, SpineInterface.TimeSlice}}, Tuple{Symbol, NamedTuple{(:analysis_time, :node, :stochastic_scenario, :t), Tuple{SpineInterface._StartRef, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}}})
precompile(Tuple{Type{Dates.Millisecond}, Int64})
precompile(Tuple{typeof(Base.:(/)), Float64, Int64})
precompile(Tuple{typeof(SpineInterface._do_realize), SpineInterface.ParameterValue{SpineInterface.TimeSeries{Float64}}, SpineInterface.Call, Function})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:analysis_time, :stochastic_scenario, :t), Tuple{SpineInterface._StartRef, SpineInterface.Object, SpineInterface.TimeSlice}}, SpineInterface.ParameterValue{SpineInterface.TimeSeries{Float64}}, Function})
precompile(Tuple{typeof(Base.min), Dates.Millisecond, Dates.Millisecond})
precompile(Tuple{typeof(SpineInterface._add_callback), SpineInterface.TimeSlice, Dates.Millisecond, Function})
precompile(Tuple{typeof(Base.get!), SpineInterface.var"#236#237", Base.Dict{Any, Any}, Dates.Millisecond})
precompile(Tuple{typeof(Base.push!), Base.Set{Any}, Function})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Nothing}, Nothing, SpineInterface.var"#285#286"{SpineInterface.Call, SpineInterface._VariableFixValueUpdate}})
precompile(Tuple{typeof(SpineInterface._fix), JuMP.GenericVariableRef{Float64}, Float64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Base.Dict{K, V} where V where K}, Base.Dict{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Symbol})
precompile(Tuple{typeof(Base._iterate), Base.Dict{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Int64})
precompile(Tuple{typeof(Base.getproperty), NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, Symbol})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, NamedTuple{(:_strict,), Tuple{Bool}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:node, :stochastic_scenario, :t, :_strict), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice, Bool}}, SpineInterface.Parameter})
precompile(Tuple{typeof(SpineOpt._representative_periods_mapping), JuMP.GenericModel{Float64}, Base.Dict{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, typeof(SpineOpt.node_state_indices)})
precompile(Tuple{SpineOpt.var"##node_state_indices#1102", SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, typeof(SpineOpt.node_state_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1104#1105"{SpineInterface.Anything, SpineInterface.Anything, JuMP.GenericModel{Float64}}, Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#1104#1105"{SpineInterface.Anything, SpineInterface.Anything, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.unique), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#1104#1105"{SpineInterface.Anything, SpineInterface.Anything, JuMP.GenericModel{Float64}}}}})
precompile(Tuple{SpineOpt.var"#1104#1105"{SpineInterface.Anything, SpineInterface.Anything, JuMP.GenericModel{Float64}}, NamedTuple{(:node, :temporal_block), Tuple{SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{typeof(Base._unique_from), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#1104#1105"{SpineInterface.Anything, SpineInterface.Anything, JuMP.GenericModel{Float64}}}}, Array{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, Base.Set{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}}, Tuple{Int64, Base.Generator{Array{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#1103#1106"{SpineInterface.Object}}, Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#1104#1105"{SpineInterface.Anything, SpineInterface.Anything, JuMP.GenericModel{Float64}}}}, Tuple{Int64, Base.Generator{Array{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#1103#1106"{SpineInterface.Object}}, Int64}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:temporal_block,), Tuple{SpineInterface.Anything}}, typeof(SpineOpt.node_state_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{typeof(Base.setdiff), Array{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, Array{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1056#1057"{JuMP.GenericModel{Float64}, Base.Dict{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, typeof(SpineOpt.node_state_indices)}, Array{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Array{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#1056#1057"{JuMP.GenericModel{Float64}, Base.Dict{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, typeof(SpineOpt.node_state_indices)}}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Base.Dict{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}})
precompile(Tuple{Type{NamedTuple{(:lb,), T} where T<:Tuple}, Tuple{SpineOpt.Constant}})
precompile(Tuple{typeof(SpineOpt.add_variable_node_slack_pos!), JuMP.GenericModel{Float64}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:t,), Tuple{Array{SpineInterface.TimeSlice, 1}}}, typeof(SpineOpt.node_slack_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{SpineOpt.var"##node_slack_indices#1117", SpineInterface.Anything, SpineInterface.Anything, Array{SpineInterface.TimeSlice, 1}, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, typeof(SpineOpt.node_slack_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{typeof(Base.intersect), Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, SpineInterface.Anything})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1119#1120"{SpineInterface.Anything, Array{SpineInterface.TimeSlice, 1}, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, JuMP.GenericModel{Float64}}, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, SpineOpt.var"#1119#1120"{SpineInterface.Anything, Array{SpineInterface.TimeSlice, 1}, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.collect), Type{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}}, Base.Iterators.Flatten{Base.Generator{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, SpineOpt.var"#1119#1120"{SpineInterface.Anything, Array{SpineInterface.TimeSlice, 1}, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, JuMP.GenericModel{Float64}}}}})
precompile(Tuple{Type{NamedTuple{(:model, :temporal_block, :_compact), T} where T<:Tuple}, Tuple{SpineInterface.Object, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, Bool}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:model, :temporal_block, :_compact), Tuple{SpineInterface.Object, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, Bool}}, SpineInterface.RelationshipClass})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{SpineInterface.Object, 1}, SpineInterface.Object, Base.Generator{Array{Symbol, 1}, SpineInterface.var"#208#214"{Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:model, :temporal_block), Tuple{SpineInterface.Object, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}}}}}}, Int64})
precompile(Tuple{typeof(Base.get!), SpineInterface.var"#209#215"{Bool, Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:model, :temporal_block), Tuple{SpineInterface.Object, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}}}}, SpineInterface.RelationshipClass}, Base.Dict{Any, Any}, Tuple{SpineInterface.Object, SpineInterface.Object}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1118#1121", Array{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}})
precompile(Tuple{SpineOpt.var"#1118#1121", NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Flatten{Base.Generator{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, SpineOpt.var"#1119#1120"{SpineInterface.Anything, Array{SpineInterface.TimeSlice, 1}, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, JuMP.GenericModel{Float64}}}}, Tuple{Int64, Base.Generator{Array{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#1118#1121"}, Int64}})
precompile(Tuple{SpineOpt.var"##node_slack_indices#1117", SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, typeof(SpineOpt.node_slack_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1119#1120"{SpineInterface.Anything, SpineInterface.Anything, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, JuMP.GenericModel{Float64}}, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, SpineOpt.var"#1119#1120"{SpineInterface.Anything, SpineInterface.Anything, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.collect), Type{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}}, Base.Iterators.Flatten{Base.Generator{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, SpineOpt.var"#1119#1120"{SpineInterface.Anything, SpineInterface.Anything, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, JuMP.GenericModel{Float64}}}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Flatten{Base.Generator{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, SpineOpt.var"#1119#1120"{SpineInterface.Anything, SpineInterface.Anything, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, JuMP.GenericModel{Float64}}}}, Tuple{Int64, Base.Generator{Array{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#1118#1121"}, Int64}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:temporal_block,), Tuple{SpineInterface.Anything}}, typeof(SpineOpt.node_slack_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{SpineOpt.var"##node_slack_indices#1117", SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, typeof(SpineOpt.node_slack_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1119#1120"{SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, JuMP.GenericModel{Float64}}, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, SpineOpt.var"#1119#1120"{SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.collect), Type{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}}, Base.Iterators.Flatten{Base.Generator{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, SpineOpt.var"#1119#1120"{SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, JuMP.GenericModel{Float64}}}}})
precompile(Tuple{Type{NamedTuple{(:model, :temporal_block, :_compact), T} where T<:Tuple}, Tuple{SpineInterface.Object, SpineInterface.Anything, Bool}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:model, :temporal_block, :_compact), Tuple{SpineInterface.Object, SpineInterface.Anything, Bool}}, SpineInterface.RelationshipClass})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{SpineInterface.Object, 1}, SpineInterface.Object, Base.Generator{Array{Symbol, 1}, SpineInterface.var"#208#214"{Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:model, :temporal_block), Tuple{SpineInterface.Object, SpineInterface.Anything}}}}}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{SpineInterface.Object, 1}, Base.Generator{Array{Symbol, 1}, SpineInterface.var"#208#214"{Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:model, :temporal_block), Tuple{SpineInterface.Object, SpineInterface.Anything}}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.get!), SpineInterface.var"#209#215"{Bool, Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:model, :temporal_block), Tuple{SpineInterface.Object, SpineInterface.Anything}}}, SpineInterface.RelationshipClass}, Base.Dict{Any, Any}, Tuple{SpineInterface.Object, SpineInterface.Anything}})
precompile(Tuple{SpineInterface.var"#cond#216"{Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:model, :temporal_block), Tuple{SpineInterface.Object, SpineInterface.Anything}}}}, NamedTuple{(:model, :temporal_block), Tuple{SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Flatten{Base.Generator{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, SpineOpt.var"#1119#1120"{SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, JuMP.GenericModel{Float64}}}}, Tuple{Int64, Base.Generator{Array{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#1118#1121"}, Int64}})
precompile(Tuple{typeof(SpineOpt.add_variable_node_slack_neg!), JuMP.GenericModel{Float64}})
precompile(Tuple{typeof(SpineOpt.add_variable_node_injection!), JuMP.GenericModel{Float64}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:t,), Tuple{Array{SpineInterface.TimeSlice, 1}}}, typeof(SpineOpt.node_injection_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{SpineOpt.var"##node_injection_indices#1122", SpineInterface.Anything, SpineInterface.Anything, Array{SpineInterface.TimeSlice, 1}, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, typeof(SpineOpt.node_injection_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#469#470"{SpineInterface.Anything, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}, Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#469#470"{SpineInterface.Anything, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.unique), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#469#470"{SpineInterface.Anything, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}}}})
precompile(Tuple{SpineOpt.var"#469#470"{SpineInterface.Anything, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}, NamedTuple{(:model, :temporal_block), Tuple{SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:node, :temporal_block, :_compact), Tuple{SpineInterface.Anything, SpineInterface.Object, Bool}}, SpineInterface.RelationshipClass})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{SpineInterface.Anything, 1}, SpineInterface.Anything, Base.Generator{Array{Symbol, 1}, SpineInterface.var"#208#214"{Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:node, :temporal_block), Tuple{SpineInterface.Anything, SpineInterface.Object}}}}}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{SpineInterface.Anything, 1}, Base.Generator{Array{Symbol, 1}, SpineInterface.var"#208#214"{Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:node, :temporal_block), Tuple{SpineInterface.Anything, SpineInterface.Object}}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.get!), SpineInterface.var"#209#215"{Bool, Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:node, :temporal_block), Tuple{SpineInterface.Anything, SpineInterface.Object}}}, SpineInterface.RelationshipClass}, Base.Dict{Any, Any}, Tuple{SpineInterface.Anything, SpineInterface.Object}})
precompile(Tuple{SpineInterface.var"#cond#216"{Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:node, :temporal_block), Tuple{SpineInterface.Anything, SpineInterface.Object}}}}, NamedTuple{(:node, :temporal_block), Tuple{SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{typeof(Base._unique_from), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#469#470"{SpineInterface.Anything, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}}}, Array{NamedTuple{(:node, :t), Tuple{SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, Base.Set{NamedTuple{(:node, :t), Tuple{SpineInterface.Object, SpineInterface.TimeSlice}}}, Tuple{Int64, Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#468#471"{SpineInterface.Object, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}}}, Tuple{Int64, Base.Generator{Array{SpineInterface.TimeSlice, 1}, SpineOpt.var"#467#472"{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}}, Int64}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#469#470"{SpineInterface.Anything, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}}}, Tuple{Int64, Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#468#471"{SpineInterface.Object, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}}}, Tuple{Int64, Base.Generator{Array{SpineInterface.TimeSlice, 1}, SpineOpt.var"#467#472"{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}}, Int64}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1054#1055"{Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, JuMP.GenericModel{Float64}, Symbol}, Array{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Array{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#1054#1055"{Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, JuMP.GenericModel{Float64}, Symbol}}})
precompile(Tuple{typeof(SpineOpt._representative_periods_mapping), JuMP.GenericModel{Float64}, Base.Dict{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, typeof(SpineOpt.node_injection_indices)})
precompile(Tuple{SpineOpt.var"##node_injection_indices#1122", SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, typeof(SpineOpt.node_injection_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#469#470"{SpineInterface.Anything, SpineInterface.Anything, JuMP.GenericModel{Float64}}, Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#469#470"{SpineInterface.Anything, SpineInterface.Anything, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.unique), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#469#470"{SpineInterface.Anything, SpineInterface.Anything, JuMP.GenericModel{Float64}}}}})
precompile(Tuple{SpineOpt.var"#469#470"{SpineInterface.Anything, SpineInterface.Anything, JuMP.GenericModel{Float64}}, NamedTuple{(:model, :temporal_block), Tuple{SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{typeof(Base._unique_from), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#469#470"{SpineInterface.Anything, SpineInterface.Anything, JuMP.GenericModel{Float64}}}}, Array{NamedTuple{(:node, :t), Tuple{SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, Base.Set{NamedTuple{(:node, :t), Tuple{SpineInterface.Object, SpineInterface.TimeSlice}}}, Tuple{Int64, Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#468#471"{SpineInterface.Object, SpineInterface.Anything, JuMP.GenericModel{Float64}}}}, Tuple{Int64, Base.Generator{Array{SpineInterface.TimeSlice, 1}, SpineOpt.var"#467#472"{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}}, Int64}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#469#470"{SpineInterface.Anything, SpineInterface.Anything, JuMP.GenericModel{Float64}}}}, Tuple{Int64, Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#468#471"{SpineInterface.Object, SpineInterface.Anything, JuMP.GenericModel{Float64}}}}, Tuple{Int64, Base.Generator{Array{SpineInterface.TimeSlice, 1}, SpineOpt.var"#467#472"{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}}, Int64}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:temporal_block,), Tuple{SpineInterface.Anything}}, typeof(SpineOpt.node_injection_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{SpineOpt.var"##node_injection_indices#1122", SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, typeof(SpineOpt.node_injection_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1056#1057"{JuMP.GenericModel{Float64}, Base.Dict{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, typeof(SpineOpt.node_injection_indices)}, Array{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Array{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#1056#1057"{JuMP.GenericModel{Float64}, Base.Dict{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, typeof(SpineOpt.node_injection_indices)}}})
precompile(Tuple{typeof(SpineOpt.add_variable_units_invested!), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{NamedTuple{(:lb, :int, :fix_value, :initial_value), T} where T<:Tuple}, Tuple{SpineOpt.Constant, typeof(SpineOpt.units_invested_available_int), SpineInterface.Parameter, SpineInterface.Parameter}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:lb, :int, :fix_value, :initial_value), Tuple{SpineOpt.Constant, typeof(SpineOpt.units_invested_available_int), SpineInterface.Parameter, SpineInterface.Parameter}}, typeof(SpineOpt.add_variable!), JuMP.GenericModel{Float64}, Symbol, Function})
precompile(Tuple{SpineOpt.var"##add_variable!#1053", Nothing, typeof(SpineOpt.units_invested_available_int), SpineOpt.Constant, Nothing, SpineInterface.Parameter, SpineInterface.Parameter, Nothing, Nothing, Nothing, Nothing, typeof(SpineOpt.add_variable!), JuMP.GenericModel{Float64}, Symbol, typeof(SpineOpt.units_invested_available_indices)})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:t,), Tuple{Array{SpineInterface.TimeSlice, 1}}}, typeof(SpineOpt.units_invested_available_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{SpineOpt.var"##units_invested_available_indices#1112", SpineInterface.Anything, SpineInterface.Anything, Array{SpineInterface.TimeSlice, 1}, SpineInterface.Anything, typeof(SpineOpt.units_invested_available_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1114#1115"{SpineInterface.Anything, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}, Array{Any, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{Any, 1}, SpineOpt.var"#1114#1115"{SpineInterface.Anything, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.unique), Base.Iterators.Flatten{Base.Generator{Array{Any, 1}, SpineOpt.var"#1114#1115"{SpineInterface.Anything, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1054#1055"{Nothing, typeof(SpineOpt.units_invested_available_int), SpineOpt.Constant, Nothing, SpineInterface.Parameter, Nothing, Nothing, JuMP.GenericModel{Float64}, Symbol}, Array{Any, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Array{Any, 1}, SpineOpt.var"#1054#1055"{Nothing, typeof(SpineOpt.units_invested_available_int), SpineOpt.Constant, Nothing, SpineInterface.Parameter, Nothing, Nothing, JuMP.GenericModel{Float64}, Symbol}}})
precompile(Tuple{typeof(SpineOpt._representative_periods_mapping), JuMP.GenericModel{Float64}, Base.Dict{Any, Any}, typeof(SpineOpt.units_invested_available_indices)})
precompile(Tuple{SpineOpt.var"##units_invested_available_indices#1112", SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, typeof(SpineOpt.units_invested_available_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1114#1115"{SpineInterface.Anything, SpineInterface.Anything, JuMP.GenericModel{Float64}}, Array{Any, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{Any, 1}, SpineOpt.var"#1114#1115"{SpineInterface.Anything, SpineInterface.Anything, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.unique), Base.Iterators.Flatten{Base.Generator{Array{Any, 1}, SpineOpt.var"#1114#1115"{SpineInterface.Anything, SpineInterface.Anything, JuMP.GenericModel{Float64}}}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:temporal_block,), Tuple{SpineInterface.Anything}}, typeof(SpineOpt.units_invested_available_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1056#1057"{JuMP.GenericModel{Float64}, Base.Dict{Any, Any}, typeof(SpineOpt.units_invested_available_indices)}, Array{Any, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Array{Any, 1}, SpineOpt.var"#1056#1057"{JuMP.GenericModel{Float64}, Base.Dict{Any, Any}, typeof(SpineOpt.units_invested_available_indices)}}})
precompile(Tuple{typeof(SpineOpt.add_variable_units_invested_available!), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{NamedTuple{(:lb, :int, :replacement_value, :fix_value, :internal_fix_value, :initial_value), T} where T<:Tuple}, Tuple{SpineOpt.Constant, typeof(SpineOpt.units_invested_available_int), typeof(SpineOpt.units_on_replacement_value), SpineInterface.Parameter, SpineInterface.Parameter, SpineInterface.Parameter}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:lb, :int, :replacement_value, :fix_value, :internal_fix_value, :initial_value), Tuple{SpineOpt.Constant, typeof(SpineOpt.units_invested_available_int), typeof(SpineOpt.units_on_replacement_value), SpineInterface.Parameter, SpineInterface.Parameter, SpineInterface.Parameter}}, typeof(SpineOpt.add_variable!), JuMP.GenericModel{Float64}, Symbol, Function})
precompile(Tuple{SpineOpt.var"##add_variable!#1053", Nothing, typeof(SpineOpt.units_invested_available_int), SpineOpt.Constant, Nothing, SpineInterface.Parameter, SpineInterface.Parameter, SpineInterface.Parameter, typeof(SpineOpt.units_on_replacement_value), Nothing, Nothing, typeof(SpineOpt.add_variable!), JuMP.GenericModel{Float64}, Symbol, typeof(SpineOpt.units_invested_available_indices)})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1054#1055"{Nothing, typeof(SpineOpt.units_invested_available_int), SpineOpt.Constant, Nothing, SpineInterface.Parameter, SpineInterface.Parameter, typeof(SpineOpt.units_on_replacement_value), JuMP.GenericModel{Float64}, Symbol}, Array{Any, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Array{Any, 1}, SpineOpt.var"#1054#1055"{Nothing, typeof(SpineOpt.units_invested_available_int), SpineOpt.Constant, Nothing, SpineInterface.Parameter, SpineInterface.Parameter, typeof(SpineOpt.units_on_replacement_value), JuMP.GenericModel{Float64}, Symbol}}})
precompile(Tuple{Type{NamedTuple{(:lb, :int), T} where T<:Tuple}, Tuple{SpineOpt.Constant, typeof(SpineOpt.units_invested_available_int)}})
precompile(Tuple{typeof(SpineOpt.add_variable_units_mothballed!), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1054#1055"{Nothing, typeof(SpineOpt.units_invested_available_int), SpineOpt.Constant, Nothing, Nothing, Nothing, Nothing, JuMP.GenericModel{Float64}, Symbol}, Array{Any, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Array{Any, 1}, SpineOpt.var"#1054#1055"{Nothing, typeof(SpineOpt.units_invested_available_int), SpineOpt.Constant, Nothing, Nothing, Nothing, Nothing, JuMP.GenericModel{Float64}, Symbol}}})
precompile(Tuple{typeof(SpineOpt.add_variable_ramp_up_unit_flow!), JuMP.GenericModel{Float64}})
precompile(Tuple{SpineOpt.var"##add_variable!#1053", Nothing, Nothing, SpineOpt.Constant, Nothing, SpineInterface.Parameter, SpineInterface.Parameter, Nothing, Nothing, Nothing, Nothing, typeof(SpineOpt.add_variable!), JuMP.GenericModel{Float64}, Symbol, typeof(SpineOpt.ramp_up_unit_flow_indices)})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:t,), Tuple{Array{SpineInterface.TimeSlice, 1}}}, typeof(SpineOpt.ramp_up_unit_flow_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{SpineOpt.var"##ramp_up_unit_flow_indices#1133", SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, Array{SpineInterface.TimeSlice, 1}, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, typeof(SpineOpt.ramp_up_unit_flow_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1135#1136"{SpineInterface.Anything, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}, Array{Any, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{Any, 1}, SpineOpt.var"#1135#1136"{SpineInterface.Anything, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.unique), Base.Iterators.Flatten{Base.Generator{Array{Any, 1}, SpineOpt.var"#1135#1136"{SpineInterface.Anything, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}}}})
precompile(Tuple{typeof(SpineOpt._representative_periods_mapping), JuMP.GenericModel{Float64}, Base.Dict{Any, Any}, typeof(SpineOpt.ramp_up_unit_flow_indices)})
precompile(Tuple{SpineOpt.var"##ramp_up_unit_flow_indices#1133", SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, typeof(SpineOpt.ramp_up_unit_flow_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1135#1136"{SpineInterface.Anything, SpineInterface.Anything, JuMP.GenericModel{Float64}}, Array{Any, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{Any, 1}, SpineOpt.var"#1135#1136"{SpineInterface.Anything, SpineInterface.Anything, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.unique), Base.Iterators.Flatten{Base.Generator{Array{Any, 1}, SpineOpt.var"#1135#1136"{SpineInterface.Anything, SpineInterface.Anything, JuMP.GenericModel{Float64}}}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:temporal_block,), Tuple{SpineInterface.Anything}}, typeof(SpineOpt.ramp_up_unit_flow_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{SpineOpt.var"##ramp_up_unit_flow_indices#1133", SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, typeof(SpineOpt.ramp_up_unit_flow_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1056#1057"{JuMP.GenericModel{Float64}, Base.Dict{Any, Any}, typeof(SpineOpt.ramp_up_unit_flow_indices)}, Array{Any, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Array{Any, 1}, SpineOpt.var"#1056#1057"{JuMP.GenericModel{Float64}, Base.Dict{Any, Any}, typeof(SpineOpt.ramp_up_unit_flow_indices)}}})
precompile(Tuple{typeof(SpineOpt.add_variable_start_up_unit_flow!), JuMP.GenericModel{Float64}})
precompile(Tuple{SpineOpt.var"##add_variable!#1053", Nothing, Nothing, SpineOpt.Constant, Nothing, SpineInterface.Parameter, SpineInterface.Parameter, Nothing, Nothing, Nothing, Nothing, typeof(SpineOpt.add_variable!), JuMP.GenericModel{Float64}, Symbol, typeof(SpineOpt.start_up_unit_flow_indices)})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:t,), Tuple{Array{SpineInterface.TimeSlice, 1}}}, typeof(SpineOpt.start_up_unit_flow_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{SpineOpt.var"##start_up_unit_flow_indices#1128", SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, Array{SpineInterface.TimeSlice, 1}, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, typeof(SpineOpt.start_up_unit_flow_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1130#1131"{SpineInterface.Anything, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}, Array{Any, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{Any, 1}, SpineOpt.var"#1130#1131"{SpineInterface.Anything, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.unique), Base.Iterators.Flatten{Base.Generator{Array{Any, 1}, SpineOpt.var"#1130#1131"{SpineInterface.Anything, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}}}})
precompile(Tuple{typeof(SpineOpt._representative_periods_mapping), JuMP.GenericModel{Float64}, Base.Dict{Any, Any}, typeof(SpineOpt.start_up_unit_flow_indices)})
precompile(Tuple{SpineOpt.var"##start_up_unit_flow_indices#1128", SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, typeof(SpineOpt.start_up_unit_flow_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1130#1131"{SpineInterface.Anything, SpineInterface.Anything, JuMP.GenericModel{Float64}}, Array{Any, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{Any, 1}, SpineOpt.var"#1130#1131"{SpineInterface.Anything, SpineInterface.Anything, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.unique), Base.Iterators.Flatten{Base.Generator{Array{Any, 1}, SpineOpt.var"#1130#1131"{SpineInterface.Anything, SpineInterface.Anything, JuMP.GenericModel{Float64}}}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:temporal_block,), Tuple{SpineInterface.Anything}}, typeof(SpineOpt.start_up_unit_flow_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{SpineOpt.var"##start_up_unit_flow_indices#1128", SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, typeof(SpineOpt.start_up_unit_flow_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1056#1057"{JuMP.GenericModel{Float64}, Base.Dict{Any, Any}, typeof(SpineOpt.start_up_unit_flow_indices)}, Array{Any, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Array{Any, 1}, SpineOpt.var"#1056#1057"{JuMP.GenericModel{Float64}, Base.Dict{Any, Any}, typeof(SpineOpt.start_up_unit_flow_indices)}}})
precompile(Tuple{typeof(SpineOpt.add_variable_nonspin_units_started_up!), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{NamedTuple{(:lb, :bin, :int, :fix_value, :initial_value), T} where T<:Tuple}, Tuple{SpineOpt.Constant, typeof(SpineOpt.units_on_bin), typeof(SpineOpt.units_on_int), SpineInterface.Parameter, SpineInterface.Parameter}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:lb, :bin, :int, :fix_value, :initial_value), Tuple{SpineOpt.Constant, typeof(SpineOpt.units_on_bin), typeof(SpineOpt.units_on_int), SpineInterface.Parameter, SpineInterface.Parameter}}, typeof(SpineOpt.add_variable!), JuMP.GenericModel{Float64}, Symbol, Function})
precompile(Tuple{SpineOpt.var"##add_variable!#1053", typeof(SpineOpt.units_on_bin), typeof(SpineOpt.units_on_int), SpineOpt.Constant, Nothing, SpineInterface.Parameter, SpineInterface.Parameter, Nothing, Nothing, Nothing, Nothing, typeof(SpineOpt.add_variable!), JuMP.GenericModel{Float64}, Symbol, typeof(SpineOpt.nonspin_units_started_up_indices)})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:t,), Tuple{Array{SpineInterface.TimeSlice, 1}}}, typeof(SpineOpt.nonspin_units_started_up_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{SpineOpt.var"##nonspin_units_started_up_indices#1123", SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, Array{SpineInterface.TimeSlice, 1}, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, typeof(SpineOpt.nonspin_units_started_up_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{SpineOpt.var"##nonspin_ramp_up_unit_flow_indices#1138", SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, Array{SpineInterface.TimeSlice, 1}, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, typeof(SpineOpt.nonspin_ramp_up_unit_flow_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1140#1141"{SpineInterface.Anything, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}, Array{Any, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{Any, 1}, SpineOpt.var"#1140#1141"{SpineInterface.Anything, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.collect), Base.Iterators.Flatten{Base.Generator{Array{Any, 1}, SpineOpt.var"#1140#1141"{SpineInterface.Anything, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1125#1126"{JuMP.GenericModel{Float64}}, Array{Any, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{Any, 1}, SpineOpt.var"#1125#1126"{JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.unique), Base.Iterators.Flatten{Base.Generator{Array{Any, 1}, SpineOpt.var"#1125#1126"{JuMP.GenericModel{Float64}}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1054#1055"{typeof(SpineOpt.units_on_bin), typeof(SpineOpt.units_on_int), SpineOpt.Constant, Nothing, SpineInterface.Parameter, Nothing, Nothing, JuMP.GenericModel{Float64}, Symbol}, Array{Any, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Array{Any, 1}, SpineOpt.var"#1054#1055"{typeof(SpineOpt.units_on_bin), typeof(SpineOpt.units_on_int), SpineOpt.Constant, Nothing, SpineInterface.Parameter, Nothing, Nothing, JuMP.GenericModel{Float64}, Symbol}}})
precompile(Tuple{typeof(SpineOpt._representative_periods_mapping), JuMP.GenericModel{Float64}, Base.Dict{Any, Any}, typeof(SpineOpt.nonspin_units_started_up_indices)})
precompile(Tuple{SpineOpt.var"##nonspin_units_started_up_indices#1123", SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, typeof(SpineOpt.nonspin_units_started_up_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{SpineOpt.var"##nonspin_ramp_up_unit_flow_indices#1138", SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, typeof(SpineOpt.nonspin_ramp_up_unit_flow_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1140#1141"{SpineInterface.Anything, SpineInterface.Anything, JuMP.GenericModel{Float64}}, Array{Any, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{Any, 1}, SpineOpt.var"#1140#1141"{SpineInterface.Anything, SpineInterface.Anything, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.collect), Base.Iterators.Flatten{Base.Generator{Array{Any, 1}, SpineOpt.var"#1140#1141"{SpineInterface.Anything, SpineInterface.Anything, JuMP.GenericModel{Float64}}}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:temporal_block,), Tuple{SpineInterface.Anything}}, typeof(SpineOpt.nonspin_units_started_up_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{SpineOpt.var"##nonspin_units_started_up_indices#1123", SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, typeof(SpineOpt.nonspin_units_started_up_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{SpineOpt.var"##nonspin_ramp_up_unit_flow_indices#1138", SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, typeof(SpineOpt.nonspin_ramp_up_unit_flow_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1056#1057"{JuMP.GenericModel{Float64}, Base.Dict{Any, Any}, typeof(SpineOpt.nonspin_units_started_up_indices)}, Array{Any, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Array{Any, 1}, SpineOpt.var"#1056#1057"{JuMP.GenericModel{Float64}, Base.Dict{Any, Any}, typeof(SpineOpt.nonspin_units_started_up_indices)}}})
precompile(Tuple{typeof(SpineOpt.add_variable_nonspin_ramp_up_unit_flow!), JuMP.GenericModel{Float64}})
precompile(Tuple{SpineOpt.var"##add_variable!#1053", Nothing, Nothing, SpineOpt.Constant, Nothing, SpineInterface.Parameter, SpineInterface.Parameter, Nothing, Nothing, Nothing, Nothing, typeof(SpineOpt.add_variable!), JuMP.GenericModel{Float64}, Symbol, typeof(SpineOpt.nonspin_ramp_up_unit_flow_indices)})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:t,), Tuple{Array{SpineInterface.TimeSlice, 1}}}, typeof(SpineOpt.nonspin_ramp_up_unit_flow_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{typeof(SpineOpt._representative_periods_mapping), JuMP.GenericModel{Float64}, Base.Dict{Any, Any}, typeof(SpineOpt.nonspin_ramp_up_unit_flow_indices)})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:temporal_block,), Tuple{SpineInterface.Anything}}, typeof(SpineOpt.nonspin_ramp_up_unit_flow_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1056#1057"{JuMP.GenericModel{Float64}, Base.Dict{Any, Any}, typeof(SpineOpt.nonspin_ramp_up_unit_flow_indices)}, Array{Any, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Array{Any, 1}, SpineOpt.var"#1056#1057"{JuMP.GenericModel{Float64}, Base.Dict{Any, Any}, typeof(SpineOpt.nonspin_ramp_up_unit_flow_indices)}}})
precompile(Tuple{typeof(SpineOpt.add_variable_ramp_down_unit_flow!), JuMP.GenericModel{Float64}})
precompile(Tuple{SpineOpt.var"##add_variable!#1053", Nothing, Nothing, SpineOpt.Constant, Nothing, SpineInterface.Parameter, SpineInterface.Parameter, Nothing, Nothing, Nothing, Nothing, typeof(SpineOpt.add_variable!), JuMP.GenericModel{Float64}, Symbol, typeof(SpineOpt.ramp_down_unit_flow_indices)})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:t,), Tuple{Array{SpineInterface.TimeSlice, 1}}}, typeof(SpineOpt.ramp_down_unit_flow_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{SpineOpt.var"##ramp_down_unit_flow_indices#1148", SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, Array{SpineInterface.TimeSlice, 1}, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, typeof(SpineOpt.ramp_down_unit_flow_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1150#1151"{SpineInterface.Anything, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}, Array{Any, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{Any, 1}, SpineOpt.var"#1150#1151"{SpineInterface.Anything, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.unique), Base.Iterators.Flatten{Base.Generator{Array{Any, 1}, SpineOpt.var"#1150#1151"{SpineInterface.Anything, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}}}})
precompile(Tuple{typeof(SpineOpt._representative_periods_mapping), JuMP.GenericModel{Float64}, Base.Dict{Any, Any}, typeof(SpineOpt.ramp_down_unit_flow_indices)})
precompile(Tuple{SpineOpt.var"##ramp_down_unit_flow_indices#1148", SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, typeof(SpineOpt.ramp_down_unit_flow_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1150#1151"{SpineInterface.Anything, SpineInterface.Anything, JuMP.GenericModel{Float64}}, Array{Any, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{Any, 1}, SpineOpt.var"#1150#1151"{SpineInterface.Anything, SpineInterface.Anything, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.unique), Base.Iterators.Flatten{Base.Generator{Array{Any, 1}, SpineOpt.var"#1150#1151"{SpineInterface.Anything, SpineInterface.Anything, JuMP.GenericModel{Float64}}}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:temporal_block,), Tuple{SpineInterface.Anything}}, typeof(SpineOpt.ramp_down_unit_flow_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{SpineOpt.var"##ramp_down_unit_flow_indices#1148", SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, typeof(SpineOpt.ramp_down_unit_flow_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1056#1057"{JuMP.GenericModel{Float64}, Base.Dict{Any, Any}, typeof(SpineOpt.ramp_down_unit_flow_indices)}, Array{Any, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Array{Any, 1}, SpineOpt.var"#1056#1057"{JuMP.GenericModel{Float64}, Base.Dict{Any, Any}, typeof(SpineOpt.ramp_down_unit_flow_indices)}}})
precompile(Tuple{typeof(SpineOpt.add_variable_shut_down_unit_flow!), JuMP.GenericModel{Float64}})
precompile(Tuple{SpineOpt.var"##add_variable!#1053", Nothing, Nothing, SpineOpt.Constant, Nothing, SpineInterface.Parameter, SpineInterface.Parameter, Nothing, Nothing, Nothing, Nothing, typeof(SpineOpt.add_variable!), JuMP.GenericModel{Float64}, Symbol, typeof(SpineOpt.shut_down_unit_flow_indices)})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:t,), Tuple{Array{SpineInterface.TimeSlice, 1}}}, typeof(SpineOpt.shut_down_unit_flow_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{SpineOpt.var"##shut_down_unit_flow_indices#1143", SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, Array{SpineInterface.TimeSlice, 1}, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, typeof(SpineOpt.shut_down_unit_flow_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1145#1146"{SpineInterface.Anything, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}, Array{Any, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{Any, 1}, SpineOpt.var"#1145#1146"{SpineInterface.Anything, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.unique), Base.Iterators.Flatten{Base.Generator{Array{Any, 1}, SpineOpt.var"#1145#1146"{SpineInterface.Anything, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}}}})
precompile(Tuple{typeof(SpineOpt._representative_periods_mapping), JuMP.GenericModel{Float64}, Base.Dict{Any, Any}, typeof(SpineOpt.shut_down_unit_flow_indices)})
precompile(Tuple{SpineOpt.var"##shut_down_unit_flow_indices#1143", SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, typeof(SpineOpt.shut_down_unit_flow_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1145#1146"{SpineInterface.Anything, SpineInterface.Anything, JuMP.GenericModel{Float64}}, Array{Any, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{Any, 1}, SpineOpt.var"#1145#1146"{SpineInterface.Anything, SpineInterface.Anything, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.unique), Base.Iterators.Flatten{Base.Generator{Array{Any, 1}, SpineOpt.var"#1145#1146"{SpineInterface.Anything, SpineInterface.Anything, JuMP.GenericModel{Float64}}}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:temporal_block,), Tuple{SpineInterface.Anything}}, typeof(SpineOpt.shut_down_unit_flow_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{SpineOpt.var"##shut_down_unit_flow_indices#1143", SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, typeof(SpineOpt.shut_down_unit_flow_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1056#1057"{JuMP.GenericModel{Float64}, Base.Dict{Any, Any}, typeof(SpineOpt.shut_down_unit_flow_indices)}, Array{Any, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Array{Any, 1}, SpineOpt.var"#1056#1057"{JuMP.GenericModel{Float64}, Base.Dict{Any, Any}, typeof(SpineOpt.shut_down_unit_flow_indices)}}})
precompile(Tuple{typeof(SpineOpt.add_variable_nonspin_units_shut_down!), JuMP.GenericModel{Float64}})
precompile(Tuple{SpineOpt.var"##add_variable!#1053", typeof(SpineOpt.units_on_bin), typeof(SpineOpt.units_on_int), SpineOpt.Constant, Nothing, SpineInterface.Parameter, SpineInterface.Parameter, Nothing, Nothing, Nothing, Nothing, typeof(SpineOpt.add_variable!), JuMP.GenericModel{Float64}, Symbol, typeof(SpineOpt.nonspin_units_shut_down_indices)})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:t,), Tuple{Array{SpineInterface.TimeSlice, 1}}}, typeof(SpineOpt.nonspin_units_shut_down_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{SpineOpt.var"##nonspin_units_shut_down_indices#1158", SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, Array{SpineInterface.TimeSlice, 1}, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, typeof(SpineOpt.nonspin_units_shut_down_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{SpineOpt.var"##nonspin_ramp_down_unit_flow_indices#1153", SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, Array{SpineInterface.TimeSlice, 1}, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, typeof(SpineOpt.nonspin_ramp_down_unit_flow_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1155#1156"{SpineInterface.Anything, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}, Array{Any, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{Any, 1}, SpineOpt.var"#1155#1156"{SpineInterface.Anything, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.collect), Base.Iterators.Flatten{Base.Generator{Array{Any, 1}, SpineOpt.var"#1155#1156"{SpineInterface.Anything, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1160#1161"{JuMP.GenericModel{Float64}}, Array{Any, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{Any, 1}, SpineOpt.var"#1160#1161"{JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.unique), Base.Iterators.Flatten{Base.Generator{Array{Any, 1}, SpineOpt.var"#1160#1161"{JuMP.GenericModel{Float64}}}}})
precompile(Tuple{typeof(SpineOpt._representative_periods_mapping), JuMP.GenericModel{Float64}, Base.Dict{Any, Any}, typeof(SpineOpt.nonspin_units_shut_down_indices)})
precompile(Tuple{SpineOpt.var"##nonspin_units_shut_down_indices#1158", SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, typeof(SpineOpt.nonspin_units_shut_down_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{SpineOpt.var"##nonspin_ramp_down_unit_flow_indices#1153", SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, typeof(SpineOpt.nonspin_ramp_down_unit_flow_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1155#1156"{SpineInterface.Anything, SpineInterface.Anything, JuMP.GenericModel{Float64}}, Array{Any, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{Any, 1}, SpineOpt.var"#1155#1156"{SpineInterface.Anything, SpineInterface.Anything, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.collect), Base.Iterators.Flatten{Base.Generator{Array{Any, 1}, SpineOpt.var"#1155#1156"{SpineInterface.Anything, SpineInterface.Anything, JuMP.GenericModel{Float64}}}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:temporal_block,), Tuple{SpineInterface.Anything}}, typeof(SpineOpt.nonspin_units_shut_down_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{SpineOpt.var"##nonspin_units_shut_down_indices#1158", SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, typeof(SpineOpt.nonspin_units_shut_down_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{SpineOpt.var"##nonspin_ramp_down_unit_flow_indices#1153", SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, typeof(SpineOpt.nonspin_ramp_down_unit_flow_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1056#1057"{JuMP.GenericModel{Float64}, Base.Dict{Any, Any}, typeof(SpineOpt.nonspin_units_shut_down_indices)}, Array{Any, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Array{Any, 1}, SpineOpt.var"#1056#1057"{JuMP.GenericModel{Float64}, Base.Dict{Any, Any}, typeof(SpineOpt.nonspin_units_shut_down_indices)}}})
precompile(Tuple{typeof(SpineOpt.add_variable_nonspin_ramp_down_unit_flow!), JuMP.GenericModel{Float64}})
precompile(Tuple{SpineOpt.var"##add_variable!#1053", Nothing, Nothing, SpineOpt.Constant, Nothing, SpineInterface.Parameter, SpineInterface.Parameter, Nothing, Nothing, Nothing, Nothing, typeof(SpineOpt.add_variable!), JuMP.GenericModel{Float64}, Symbol, typeof(SpineOpt.nonspin_ramp_down_unit_flow_indices)})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:t,), Tuple{Array{SpineInterface.TimeSlice, 1}}}, typeof(SpineOpt.nonspin_ramp_down_unit_flow_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{typeof(SpineOpt._representative_periods_mapping), JuMP.GenericModel{Float64}, Base.Dict{Any, Any}, typeof(SpineOpt.nonspin_ramp_down_unit_flow_indices)})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:temporal_block,), Tuple{SpineInterface.Anything}}, typeof(SpineOpt.nonspin_ramp_down_unit_flow_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1056#1057"{JuMP.GenericModel{Float64}, Base.Dict{Any, Any}, typeof(SpineOpt.nonspin_ramp_down_unit_flow_indices)}, Array{Any, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Array{Any, 1}, SpineOpt.var"#1056#1057"{JuMP.GenericModel{Float64}, Base.Dict{Any, Any}, typeof(SpineOpt.nonspin_ramp_down_unit_flow_indices)}}})
precompile(Tuple{Type{NamedTuple{(:has_pressure,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(SpineOpt.add_variable_node_pressure!), JuMP.GenericModel{Float64}})
precompile(Tuple{SpineOpt.var"##add_variable!#1053", Nothing, Nothing, SpineOpt.Constant, Nothing, SpineInterface.Parameter, SpineInterface.Parameter, Nothing, Nothing, Nothing, Nothing, typeof(SpineOpt.add_variable!), JuMP.GenericModel{Float64}, Symbol, typeof(SpineOpt.node_pressure_indices)})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:t,), Tuple{Array{SpineInterface.TimeSlice, 1}}}, typeof(SpineOpt.node_pressure_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{SpineOpt.var"##node_pressure_indices#1163", SpineInterface.Anything, SpineInterface.Anything, Array{SpineInterface.TimeSlice, 1}, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, typeof(SpineOpt.node_pressure_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:has_pressure,), Tuple{Bool}}, SpineInterface.ObjectClass})
precompile(Tuple{typeof(Base.intersect), SpineInterface.Anything, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}})
precompile(Tuple{Type{NamedTuple{(:node, :stochastic_scenario, :t, :temporal_block), T} where T<:Tuple}, Tuple{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, SpineInterface.Anything, Array{SpineInterface.TimeSlice, 1}, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:node, :stochastic_scenario, :t, :temporal_block), Tuple{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, SpineInterface.Anything, Array{SpineInterface.TimeSlice, 1}, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}}}, typeof(SpineOpt.node_stochastic_time_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#469#470"{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}, Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#469#470"{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.unique), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#469#470"{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}}}})
precompile(Tuple{SpineOpt.var"#469#470"{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}, NamedTuple{(:model, :temporal_block), Tuple{SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:node, :temporal_block, :_compact), Tuple{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, SpineInterface.Object, Bool}}, SpineInterface.RelationshipClass})
precompile(Tuple{typeof(Base._array_for), Type{Tuple{}}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{}, 1}, Tuple{}, Base.Generator{Array{Symbol, 1}, SpineInterface.var"#208#214"{Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:node, :temporal_block), Tuple{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, SpineInterface.Object}}}}}, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Tuple{}, 1}, SpineInterface.Object, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Any, 1}, Base.Generator{Array{Symbol, 1}, SpineInterface.var"#208#214"{Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:node, :temporal_block), Tuple{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, SpineInterface.Object}}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.get!), SpineInterface.var"#209#215"{Bool, Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:node, :temporal_block), Tuple{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, SpineInterface.Object}}}, SpineInterface.RelationshipClass}, Base.Dict{Any, Any}, Tuple{Tuple{}, SpineInterface.Object}})
precompile(Tuple{SpineInterface.var"#cond#216"{Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:node, :temporal_block), Tuple{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, SpineInterface.Object}}}}, NamedTuple{(:node, :temporal_block), Tuple{SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#468#471"{SpineInterface.Object, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}, Array{Any, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{Any, 1}, SpineOpt.var"#468#471"{SpineInterface.Object, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Flatten{Base.Generator{Array{Any, 1}, SpineOpt.var"#468#471"{SpineInterface.Object, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}}}, Tuple{}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#614#615"{SpineInterface.Anything, JuMP.GenericModel{Float64}}, Array{Any, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{Any, 1}, SpineOpt.var"#614#615"{SpineInterface.Anything, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.unique), Base.Iterators.Flatten{Base.Generator{Array{Any, 1}, SpineOpt.var"#614#615"{SpineInterface.Anything, JuMP.GenericModel{Float64}}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1164#1165", Array{Any, 1}})
precompile(Tuple{typeof(Base.unique), Base.Generator{Array{Any, 1}, SpineOpt.var"#1164#1165"}})
precompile(Tuple{typeof(SpineOpt._representative_periods_mapping), JuMP.GenericModel{Float64}, Base.Dict{Any, Any}, typeof(SpineOpt.node_pressure_indices)})
precompile(Tuple{SpineOpt.var"##node_pressure_indices#1163", SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, typeof(SpineOpt.node_pressure_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{NamedTuple{(:node, :stochastic_scenario, :t, :temporal_block), T} where T<:Tuple}, Tuple{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, SpineInterface.Anything, SpineInterface.Anything, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:node, :stochastic_scenario, :t, :temporal_block), Tuple{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, SpineInterface.Anything, SpineInterface.Anything, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}}}, typeof(SpineOpt.node_stochastic_time_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#469#470"{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, SpineInterface.Anything, JuMP.GenericModel{Float64}}, Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#469#470"{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, SpineInterface.Anything, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.unique), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#469#470"{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, SpineInterface.Anything, JuMP.GenericModel{Float64}}}}})
precompile(Tuple{SpineOpt.var"#469#470"{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, SpineInterface.Anything, JuMP.GenericModel{Float64}}, NamedTuple{(:model, :temporal_block), Tuple{SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#468#471"{SpineInterface.Object, SpineInterface.Anything, JuMP.GenericModel{Float64}}, Array{Any, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{Any, 1}, SpineOpt.var"#468#471"{SpineInterface.Object, SpineInterface.Anything, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Flatten{Base.Generator{Array{Any, 1}, SpineOpt.var"#468#471"{SpineInterface.Object, SpineInterface.Anything, JuMP.GenericModel{Float64}}}}, Tuple{}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:temporal_block,), Tuple{SpineInterface.Anything}}, typeof(SpineOpt.node_pressure_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{SpineOpt.var"##node_pressure_indices#1163", SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, typeof(SpineOpt.node_pressure_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{NamedTuple{(:node, :stochastic_scenario, :t, :temporal_block), T} where T<:Tuple}, Tuple{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:node, :stochastic_scenario, :t, :temporal_block), Tuple{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything}}, typeof(SpineOpt.node_stochastic_time_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1056#1057"{JuMP.GenericModel{Float64}, Base.Dict{Any, Any}, typeof(SpineOpt.node_pressure_indices)}, Array{Any, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Array{Any, 1}, SpineOpt.var"#1056#1057"{JuMP.GenericModel{Float64}, Base.Dict{Any, Any}, typeof(SpineOpt.node_pressure_indices)}}})
precompile(Tuple{Type{NamedTuple{(:has_voltage_angle,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(SpineOpt.add_variable_node_voltage_angle!), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{NamedTuple{(:fix_value, :initial_value), T} where T<:Tuple}, Tuple{SpineInterface.Parameter, SpineInterface.Parameter}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:fix_value, :initial_value), Tuple{SpineInterface.Parameter, SpineInterface.Parameter}}, typeof(SpineOpt.add_variable!), JuMP.GenericModel{Float64}, Symbol, Function})
precompile(Tuple{SpineOpt.var"##add_variable!#1053", Nothing, Nothing, Nothing, Nothing, SpineInterface.Parameter, SpineInterface.Parameter, Nothing, Nothing, Nothing, Nothing, typeof(SpineOpt.add_variable!), JuMP.GenericModel{Float64}, Symbol, typeof(SpineOpt.node_voltage_angle_indices)})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:t,), Tuple{Array{SpineInterface.TimeSlice, 1}}}, typeof(SpineOpt.node_voltage_angle_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{SpineOpt.var"##node_voltage_angle_indices#1166", SpineInterface.Anything, SpineInterface.Anything, Array{SpineInterface.TimeSlice, 1}, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, typeof(SpineOpt.node_voltage_angle_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:has_voltage_angle,), Tuple{Bool}}, SpineInterface.ObjectClass})
precompile(Tuple{SpineOpt.var"##node_voltage_angle_indices#1166", SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, typeof(SpineOpt.node_voltage_angle_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:temporal_block,), Tuple{SpineInterface.Anything}}, typeof(SpineOpt.node_voltage_angle_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{SpineOpt.var"##node_voltage_angle_indices#1166", SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, typeof(SpineOpt.node_voltage_angle_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{NamedTuple{(:has_binary_gas_flow,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(SpineOpt.add_variable_binary_gas_connection_flow!), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{NamedTuple{(:bin, :fix_value, :initial_value), T} where T<:Tuple}, Tuple{typeof(SpineOpt.set_bin), SpineInterface.Parameter, SpineInterface.Parameter}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:bin, :fix_value, :initial_value), Tuple{typeof(SpineOpt.set_bin), SpineInterface.Parameter, SpineInterface.Parameter}}, typeof(SpineOpt.add_variable!), JuMP.GenericModel{Float64}, Symbol, Function})
precompile(Tuple{SpineOpt.var"##add_variable!#1053", typeof(SpineOpt.set_bin), Nothing, Nothing, Nothing, SpineInterface.Parameter, SpineInterface.Parameter, Nothing, Nothing, Nothing, Nothing, typeof(SpineOpt.add_variable!), JuMP.GenericModel{Float64}, Symbol, typeof(SpineOpt.binary_gas_connection_flow_indices)})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:t,), Tuple{Array{SpineInterface.TimeSlice, 1}}}, typeof(SpineOpt.binary_gas_connection_flow_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{SpineInterface.ObjectClass, Symbol})
precompile(Tuple{SpineOpt.var"##binary_gas_connection_flow_indices#1167", SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Object, SpineInterface.Anything, Array{SpineInterface.TimeSlice, 1}, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, typeof(SpineOpt.binary_gas_connection_flow_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:has_binary_gas_flow,), Tuple{Bool}}, SpineInterface.ObjectClass})
precompile(Tuple{Type{NamedTuple{(:connection, :node, :stochastic_scenario, :direction, :t, :temporal_block), T} where T<:Tuple}, Tuple{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, SpineInterface.Anything, SpineInterface.Object, Array{SpineInterface.TimeSlice, 1}, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:connection, :node, :stochastic_scenario, :direction, :t, :temporal_block), Tuple{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, SpineInterface.Anything, SpineInterface.Object, Array{SpineInterface.TimeSlice, 1}, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}}}, typeof(SpineOpt.connection_flow_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:connection, :node, :direction, :temporal_block, :_compact), Tuple{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, Array{SpineInterface.Object, 1}, SpineInterface.Object, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, Bool}}, SpineInterface.RelationshipClass})
precompile(Tuple{typeof(SpineInterface._immutable), Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{}, 1}, Tuple{}, Base.Generator{Array{Symbol, 1}, SpineInterface.var"#208#214"{Base.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:connection, :node, :direction, :temporal_block), Tuple{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, Array{SpineInterface.Object, 1}, SpineInterface.Object, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}}}}}}, Int64})
precompile(Tuple{typeof(SpineInterface._immutable), Array{SpineInterface.Object, 1}})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Tuple{}, 1}, NTuple{11, SpineInterface.Object}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Vararg{SpineInterface.Object}}, 1}, Base.Generator{Array{Symbol, 1}, SpineInterface.var"#208#214"{Base.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:connection, :node, :direction, :temporal_block), Tuple{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, Array{SpineInterface.Object, 1}, SpineInterface.Object, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}}}}}}, Int64, Int64})
precompile(Tuple{typeof(SpineInterface._immutable), SpineInterface.Object})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Tuple{Vararg{SpineInterface.Object}}, 1}, SpineInterface.Object, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Any, 1}, Base.Generator{Array{Symbol, 1}, SpineInterface.var"#208#214"{Base.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:connection, :node, :direction, :temporal_block), Tuple{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, Array{SpineInterface.Object, 1}, SpineInterface.Object, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}}}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.get!), SpineInterface.var"#209#215"{Bool, Base.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:connection, :node, :direction, :temporal_block), Tuple{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, Array{SpineInterface.Object, 1}, SpineInterface.Object, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}}}}, SpineInterface.RelationshipClass}, Base.Dict{Any, Any}, Tuple{Tuple{}, NTuple{11, SpineInterface.Object}, SpineInterface.Object, SpineInterface.Object}})
precompile(Tuple{SpineInterface.var"#cond#216"{Base.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:connection, :node, :direction, :temporal_block), Tuple{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, Array{SpineInterface.Object, 1}, SpineInterface.Object, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}}}}}, NamedTuple{(:connection, :node, :direction, :temporal_block), NTuple{4, SpineInterface.Object}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1084#1085"{SpineInterface.Anything, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}, Array{Any, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{Any, 1}, SpineOpt.var"#1084#1085"{SpineInterface.Anything, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.unique), Base.Iterators.Flatten{Base.Generator{Array{Any, 1}, SpineOpt.var"#1084#1085"{SpineInterface.Anything, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1168#1169", Array{Any, 1}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Any, 1}, SpineOpt.var"#1168#1169"}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1054#1055"{typeof(SpineOpt.set_bin), Nothing, Nothing, Nothing, SpineInterface.Parameter, Nothing, Nothing, JuMP.GenericModel{Float64}, Symbol}, Array{Any, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Array{Any, 1}, SpineOpt.var"#1054#1055"{typeof(SpineOpt.set_bin), Nothing, Nothing, Nothing, SpineInterface.Parameter, Nothing, Nothing, JuMP.GenericModel{Float64}, Symbol}}})
precompile(Tuple{typeof(SpineOpt._representative_periods_mapping), JuMP.GenericModel{Float64}, Base.Dict{Any, Any}, typeof(SpineOpt.binary_gas_connection_flow_indices)})
precompile(Tuple{SpineOpt.var"##binary_gas_connection_flow_indices#1167", SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Object, SpineInterface.Anything, SpineInterface.Anything, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, typeof(SpineOpt.binary_gas_connection_flow_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{NamedTuple{(:connection, :node, :stochastic_scenario, :direction, :t, :temporal_block), T} where T<:Tuple}, Tuple{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, SpineInterface.Anything, SpineInterface.Object, SpineInterface.Anything, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:connection, :node, :stochastic_scenario, :direction, :t, :temporal_block), Tuple{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, SpineInterface.Anything, SpineInterface.Object, SpineInterface.Anything, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}}}, typeof(SpineOpt.connection_flow_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1084#1085"{SpineInterface.Anything, SpineInterface.Anything, JuMP.GenericModel{Float64}}, Array{Any, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{Any, 1}, SpineOpt.var"#1084#1085"{SpineInterface.Anything, SpineInterface.Anything, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.unique), Base.Iterators.Flatten{Base.Generator{Array{Any, 1}, SpineOpt.var"#1084#1085"{SpineInterface.Anything, SpineInterface.Anything, JuMP.GenericModel{Float64}}}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:temporal_block,), Tuple{SpineInterface.Anything}}, typeof(SpineOpt.binary_gas_connection_flow_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{SpineOpt.var"##binary_gas_connection_flow_indices#1167", SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Object, SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, typeof(SpineOpt.binary_gas_connection_flow_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{NamedTuple{(:connection, :node, :stochastic_scenario, :direction, :t, :temporal_block), T} where T<:Tuple}, Tuple{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, SpineInterface.Anything, SpineInterface.Object, SpineInterface.Anything, SpineInterface.Anything}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:connection, :node, :stochastic_scenario, :direction, :t, :temporal_block), Tuple{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, SpineInterface.Anything, SpineInterface.Object, SpineInterface.Anything, SpineInterface.Anything}}, typeof(SpineOpt.connection_flow_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:connection, :node, :direction, :temporal_block, :_compact), Tuple{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, Array{SpineInterface.Object, 1}, SpineInterface.Object, SpineInterface.Anything, Bool}}, SpineInterface.RelationshipClass})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{}, 1}, Tuple{}, Base.Generator{Array{Symbol, 1}, SpineInterface.var"#208#214"{Base.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:connection, :node, :direction, :temporal_block), Tuple{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, Array{SpineInterface.Object, 1}, SpineInterface.Object, SpineInterface.Anything}}}}}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Vararg{SpineInterface.Object}}, 1}, Base.Generator{Array{Symbol, 1}, SpineInterface.var"#208#214"{Base.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:connection, :node, :direction, :temporal_block), Tuple{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, Array{SpineInterface.Object, 1}, SpineInterface.Object, SpineInterface.Anything}}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Any, 1}, Base.Generator{Array{Symbol, 1}, SpineInterface.var"#208#214"{Base.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:connection, :node, :direction, :temporal_block), Tuple{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, Array{SpineInterface.Object, 1}, SpineInterface.Object, SpineInterface.Anything}}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.get!), SpineInterface.var"#209#215"{Bool, Base.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:connection, :node, :direction, :temporal_block), Tuple{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, Array{SpineInterface.Object, 1}, SpineInterface.Object, SpineInterface.Anything}}}, SpineInterface.RelationshipClass}, Base.Dict{Any, Any}, Tuple{Tuple{}, NTuple{11, SpineInterface.Object}, SpineInterface.Object, SpineInterface.Anything}})
precompile(Tuple{SpineInterface.var"#cond#216"{Base.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:connection, :node, :direction, :temporal_block), Tuple{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, Array{SpineInterface.Object, 1}, SpineInterface.Object, SpineInterface.Anything}}}}, NamedTuple{(:connection, :node, :direction, :temporal_block), NTuple{4, SpineInterface.Object}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1056#1057"{JuMP.GenericModel{Float64}, Base.Dict{Any, Any}, typeof(SpineOpt.binary_gas_connection_flow_indices)}, Array{Any, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Array{Any, 1}, SpineOpt.var"#1056#1057"{JuMP.GenericModel{Float64}, Base.Dict{Any, Any}, typeof(SpineOpt.binary_gas_connection_flow_indices)}}})
precompile(Tuple{Type{NamedTuple{(:add_constraints, :log_level), T} where T<:Tuple}, Tuple{SpineOpt.var"#63#73", Int64}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:add_constraints, :log_level), Tuple{SpineOpt.var"#63#73", Int64}}, typeof(SpineOpt._add_constraints!), JuMP.GenericModel{Float64}})
precompile(Tuple{typeof(SpineOpt.add_constraint_unit_pw_heat_rate!), JuMP.GenericModel{Float64}})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Symbol, Base.Dict{K, V} where V where K}, Symbol})
precompile(Tuple{SpineInterface.var"#243#246"{SpineInterface.RelationshipClass, SpineInterface.Parameter}, NamedTuple{(:unit, :node1, :node2), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{SpineOpt.var"#1868#1869"{JuMP.GenericModel{Float64}}, NamedTuple{(:unit, :node1, :node2), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{Type{NamedTuple{(:unit, :node, :direction), T} where T<:Tuple}, Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:unit, :node, :direction), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}}, typeof(SpineOpt.unit_flow_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{SpineOpt.var"##unit_flow_indices#1058", SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Anything, SpineInterface.Anything, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, typeof(SpineOpt.unit_flow_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:unit, :node, :direction, :temporal_block, :_compact), Tuple{Array{SpineInterface.Object, 1}, Array{SpineInterface.Object, 1}, SpineInterface.Object, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, Bool}}, SpineInterface.RelationshipClass})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{SpineInterface.Object, 1}, SpineInterface.Object, Base.Generator{Array{Symbol, 1}, SpineInterface.var"#208#214"{Base.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:unit, :node, :direction, :temporal_block), Tuple{Array{SpineInterface.Object, 1}, Array{SpineInterface.Object, 1}, SpineInterface.Object, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}}}}}}, Int64})
precompile(Tuple{typeof(Base.get!), SpineInterface.var"#209#215"{Bool, Base.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:unit, :node, :direction, :temporal_block), Tuple{Array{SpineInterface.Object, 1}, Array{SpineInterface.Object, 1}, SpineInterface.Object, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}}}}, SpineInterface.RelationshipClass}, Base.Dict{Any, Any}, NTuple{4, SpineInterface.Object}})
precompile(Tuple{SpineInterface.var"#cond#216"{Base.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:unit, :node, :direction, :temporal_block), Tuple{Array{SpineInterface.Object, 1}, Array{SpineInterface.Object, 1}, SpineInterface.Object, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}}}}}, NamedTuple{(:unit, :node, :direction, :temporal_block), NTuple{4, SpineInterface.Object}}})
precompile(Tuple{SpineOpt.var"##units_on_indices#1107", SpineInterface.Object, SpineInterface.Anything, SpineInterface.Anything, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, typeof(SpineOpt.units_on_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:unit, :temporal_block, :_compact), Tuple{SpineInterface.Object, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, Bool}}, SpineInterface.RelationshipClass})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{SpineInterface.Object, 1}, SpineInterface.Object, Base.Generator{Array{Symbol, 1}, SpineInterface.var"#208#214"{Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:unit, :temporal_block), Tuple{SpineInterface.Object, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}}}}}}, Int64})
precompile(Tuple{typeof(Base.get!), SpineInterface.var"#209#215"{Bool, Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:unit, :temporal_block), Tuple{SpineInterface.Object, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}}}}, SpineInterface.RelationshipClass}, Base.Dict{Any, Any}, Tuple{SpineInterface.Object, SpineInterface.Object}})
precompile(Tuple{typeof(Base.vcat), Array{NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, Array{NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, Array{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}})
precompile(Tuple{typeof(SpineOpt.t_lowest_resolution_path), JuMP.GenericModel{Float64}, Array{NamedTuple{names, T} where T<:Tuple where names, 1}})
precompile(Tuple{typeof(Base.get!), SpineOpt.var"#1284#1287", Base.Dict{Any, Any}, SpineInterface.TimeSlice})
precompile(Tuple{typeof(Base.push!), Base.Set{SpineInterface.Object}, SpineInterface.Object})
precompile(Tuple{typeof(Base.setdiff), Base.KeySet{Any, Base.Dict{Any, Any}}, SpineInterface.TimeSlice})
precompile(Tuple{typeof(SpineInterface.contains), SpineInterface.TimeSlice, SpineInterface.TimeSlice})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.Iterators.Flatten{Base.Generator{Base.Dict{Any, Any}, SpineOpt.var"#1286#1288"{JuMP.GenericModel{Float64}}}}, SpineOpt.var"#1867#1870"{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{typeof(SpineOpt.active_stochastic_paths), JuMP.GenericModel{Float64}, Base.Set{SpineInterface.Object}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#586#587"{Base.Set{SpineInterface.Object}}, Array{Array{SpineInterface.Object, 1}, 1}})
precompile(Tuple{typeof(Base.unique), Base.Generator{Array{Array{SpineInterface.Object, 1}, 1}, SpineOpt.var"#586#587"{Base.Set{SpineInterface.Object}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1285#1289"{Base.Set{SpineInterface.Object}, SpineInterface.TimeSlice}, Array{Array{SpineInterface.Object, 1}, 1}})
precompile(Tuple{typeof(Base.iterate), Array{Array{SpineInterface.Object, 1}, 1}})
precompile(Tuple{SpineOpt.var"#1285#1289"{Base.Set{SpineInterface.Object}, SpineInterface.TimeSlice}, Array{SpineInterface.Object, 1}})
precompile(Tuple{SpineOpt.var"#1867#1870"{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}, Tuple{SpineInterface.TimeSlice, Array{SpineInterface.Object, 1}}})
precompile(Tuple{typeof(Base.getindex), Type{NamedTuple{(:unit, :node_from, :node_to, :stochastic_path, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice}}}, NamedTuple{(:unit, :node_from, :node_to, :stochastic_path, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice}}})
precompile(Tuple{Type{Base.Set{NamedTuple{(:unit, :node_from, :node_to, :stochastic_path, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice}}}}, Tuple{NamedTuple{(:unit, :node_from, :node_to, :stochastic_path, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice}}}})
precompile(Tuple{typeof(Base._unique_from), Base.Iterators.Flatten{Base.Generator{Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SpineInterface.Parameter}}}, SpineOpt.var"#1868#1869"{JuMP.GenericModel{Float64}}}}, Array{NamedTuple{(:unit, :node_from, :node_to, :stochastic_path, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice}}, 1}, Base.Set{NamedTuple{(:unit, :node_from, :node_to, :stochastic_path, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice}}}, Tuple{Tuple{Int64, Base.Generator{Base.Iterators.Filter{SpineInterface.var"#243#246"{SpineInterface.RelationshipClass, SpineInterface.Parameter}, Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}}, typeof(Base.identity)}, Int64}, Base.Generator{Base.Iterators.Flatten{Base.Generator{Base.Dict{Any, Any}, SpineOpt.var"#1286#1288"{JuMP.GenericModel{Float64}}}}, SpineOpt.var"#1867#1870"{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}}, Tuple{Int64, Base.Generator{Array{Array{SpineInterface.Object, 1}, 1}, SpineOpt.var"#1285#1289"{Base.Set{SpineInterface.Object}, SpineInterface.TimeSlice}}, Int64}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Flatten{Base.Generator{Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SpineInterface.Parameter}}}, SpineOpt.var"#1868#1869"{JuMP.GenericModel{Float64}}}}, Tuple{Tuple{Int64, Base.Generator{Base.Iterators.Filter{SpineInterface.var"#243#246"{SpineInterface.RelationshipClass, SpineInterface.Parameter}, Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}}, typeof(Base.identity)}, Int64}, Base.Generator{Base.Iterators.Flatten{Base.Generator{Base.Dict{Any, Any}, SpineOpt.var"#1286#1288"{JuMP.GenericModel{Float64}}}}, SpineOpt.var"#1867#1870"{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}}, Tuple{Int64, Base.Generator{Array{Array{SpineInterface.Object, 1}, 1}, SpineOpt.var"#1285#1289"{Base.Set{SpineInterface.Object}, SpineInterface.TimeSlice}}, Int64}}})
precompile(Tuple{typeof(Base.in!), NamedTuple{(:unit, :node_from, :node_to, :stochastic_path, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice}}, Base.Set{NamedTuple{(:unit, :node_from, :node_to, :stochastic_path, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice}}}})
precompile(Tuple{typeof(Base.push!), Array{NamedTuple{(:unit, :node_from, :node_to, :stochastic_path, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice}}, 1}, NamedTuple{(:unit, :node_from, :node_to, :stochastic_path, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice}}})
precompile(Tuple{typeof(Base.hashindex), NTuple{4, SpineInterface.Object}, Int64})
precompile(Tuple{typeof(Base.hashindex), NTuple{4, SpineInterface.Anything}, Int64})
precompile(Tuple{typeof(Base.hashindex), Tuple{SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Object}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1060#1061"{SpineInterface.Anything, SpineInterface.Anything, JuMP.GenericModel{Float64}}, Array{Any, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{Any, 1}, SpineOpt.var"#1060#1061"{SpineInterface.Anything, SpineInterface.Anything, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.unique), Base.Iterators.Flatten{Base.Generator{Array{Any, 1}, SpineOpt.var"#1060#1061"{SpineInterface.Anything, SpineInterface.Anything, JuMP.GenericModel{Float64}}}}})
precompile(Tuple{typeof(Base.vcat), Array{Any, 1}, Array{NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, Array{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}})
precompile(Tuple{typeof(SpineOpt.t_lowest_resolution_path), JuMP.GenericModel{Float64}, Array{Any, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1855#1861"{JuMP.GenericModel{Float64}, SpineInterface._StartRef, Base.Dict{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Base.Dict{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Base.Dict{Any, Any}, Base.Dict{NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}, Array{NamedTuple{(:unit, :node_from, :node_to, :stochastic_path, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice}}, 1}})
precompile(Tuple{typeof(JuMP._constant_to_number), Float64})
precompile(Tuple{typeof(JuMP._constant_to_number), Int64})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Array{NamedTuple{(:unit, :node_from, :node_to, :stochastic_path, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#1855#1861"{JuMP.GenericModel{Float64}, SpineInterface._StartRef, Base.Dict{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Base.Dict{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Base.Dict{Any, Any}, Base.Dict{NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Union{Nothing, SpineInterface.TimeSlice}, 1}}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{SpineInterface.TimeSlice, 1}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:t_long,), Tuple{SpineInterface.TimeSlice}}, SpineInterface.RelationshipClass})
precompile(Tuple{typeof(Base.get!), SpineInterface.var"#209#215"{Bool, Base.Pairs{Symbol, SpineInterface.TimeSlice, Tuple{Symbol}, NamedTuple{(:t_long,), Tuple{SpineInterface.TimeSlice}}}, SpineInterface.RelationshipClass}, Base.Dict{Any, Any}, Tuple{Nothing, SpineInterface.TimeSlice}})
precompile(Tuple{SpineInterface.var"#cond#216"{Base.Pairs{Symbol, SpineInterface.TimeSlice, Tuple{Symbol}, NamedTuple{(:t_long,), Tuple{SpineInterface.TimeSlice}}}}, NamedTuple{(:t_short, :t_long), Tuple{SpineInterface.TimeSlice, SpineInterface.TimeSlice}}})
precompile(Tuple{typeof(Base.getindex), Type{SpineInterface.TimeSlice}, SpineInterface.TimeSlice})
precompile(Tuple{Type{Base.Set{SpineInterface.TimeSlice}}, Tuple{SpineInterface.TimeSlice}})
precompile(Tuple{typeof(Base._unique_from), Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineInterface.var"#211#218"{Array{Symbol, 1}}}, Array{SpineInterface.TimeSlice, 1}, Base.Set{SpineInterface.TimeSlice}, Int64})
precompile(Tuple{typeof(Base.isempty), Array{SpineInterface.TimeSlice, 1}})
precompile(Tuple{Type{NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), T} where T<:Tuple}, Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, Array{SpineInterface.Object, 1}, Array{SpineInterface.TimeSlice, 1}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, Array{SpineInterface.Object, 1}, Array{SpineInterface.TimeSlice, 1}}}, typeof(SpineOpt.unit_flow_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{SpineOpt.var"##unit_flow_indices#1058", SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, Array{SpineInterface.Object, 1}, Array{SpineInterface.TimeSlice, 1}, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, typeof(SpineOpt.unit_flow_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1060#1061"{Array{SpineInterface.Object, 1}, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}, Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#1060#1061"{Array{SpineInterface.Object, 1}, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.unique), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#1060#1061"{Array{SpineInterface.Object, 1}, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}}}})
precompile(Tuple{SpineOpt.var"#1060#1061"{Array{SpineInterface.Object, 1}, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}, NamedTuple{(:unit, :node, :direction, :temporal_block), NTuple{4, SpineInterface.Object}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#614#615"{Array{SpineInterface.Object, 1}, JuMP.GenericModel{Float64}}, Array{NamedTuple{(:node, :t), Tuple{SpineInterface.Object, SpineInterface.TimeSlice}}, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{NamedTuple{(:node, :t), Tuple{SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#614#615"{Array{SpineInterface.Object, 1}, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.unique), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{(:node, :t), Tuple{SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#614#615"{Array{SpineInterface.Object, 1}, JuMP.GenericModel{Float64}}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#613#616"{SpineInterface.TimeSlice, SpineInterface.Object, Array{SpineInterface.Object, 1}, JuMP.GenericModel{Float64}}, Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#613#616"{SpineInterface.TimeSlice, SpineInterface.Object, Array{SpineInterface.Object, 1}, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#613#616"{SpineInterface.TimeSlice, SpineInterface.Object, Array{SpineInterface.Object, 1}, JuMP.GenericModel{Float64}}}}, Tuple{}})
precompile(Tuple{SpineOpt.var"#613#616"{SpineInterface.TimeSlice, SpineInterface.Object, Array{SpineInterface.Object, 1}, JuMP.GenericModel{Float64}}, NamedTuple{(:model, :stochastic_structure), Tuple{SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{typeof(Base._unique_from), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{(:node, :t), Tuple{SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#614#615"{Array{SpineInterface.Object, 1}, JuMP.GenericModel{Float64}}}}, Array{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, Base.Set{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}}, Tuple{Int64, Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#613#616"{SpineInterface.TimeSlice, SpineInterface.Object, Array{SpineInterface.Object, 1}, JuMP.GenericModel{Float64}}}}, Tuple{Int64, Base.Generator{Array{SpineInterface.Object, 1}, SpineOpt.var"#612#617"{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice, SpineInterface.Object}}, Int64}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{(:node, :t), Tuple{SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#614#615"{Array{SpineInterface.Object, 1}, JuMP.GenericModel{Float64}}}}, Tuple{Int64, Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#613#616"{SpineInterface.TimeSlice, SpineInterface.Object, Array{SpineInterface.Object, 1}, JuMP.GenericModel{Float64}}}}, Tuple{Int64, Base.Generator{Array{SpineInterface.Object, 1}, SpineOpt.var"#612#617"{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice, SpineInterface.Object}}, Int64}}})
precompile(Tuple{typeof(Base._unique_from), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#1060#1061"{Array{SpineInterface.Object, 1}, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}}}, Array{NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, Base.Set{NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}}, Tuple{Int64, Base.Generator{Array{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#1059#1062"{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}}, Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#1060#1061"{Array{SpineInterface.Object, 1}, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}}}, Tuple{Int64, Base.Generator{Array{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#1059#1062"{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}}, Int64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1856#1862"{Base.Dict{NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}, Array{NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:init,), Tuple{Int64}}, typeof(SpineOpt.expr_sum), Base.Generator{Array{NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#1856#1862"{Base.Dict{NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, Array{SpineInterface.Object, 1}, Array{SpineInterface.TimeSlice, 1}}}, typeof(SpineOpt.unit_flow_op_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:unit, :node, :direction), Tuple{Array{SpineInterface.Object, 1}, Array{SpineInterface.Object, 1}, SpineInterface.Object}}}})
precompile(Tuple{SpineOpt.var"##unit_flow_op_indices#1068", SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Anything, Array{SpineInterface.Object, 1}, Array{SpineInterface.TimeSlice, 1}, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, typeof(SpineOpt.unit_flow_op_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{SpineInterface.Object, 1}, SpineInterface.Object, Base.Generator{Array{Symbol, 1}, SpineInterface.var"#208#214"{Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:unit, :node, :direction), Tuple{Array{SpineInterface.Object, 1}, Array{SpineInterface.Object, 1}, SpineInterface.Object}}}}}, Int64})
precompile(Tuple{typeof(Base.get!), SpineInterface.var"#209#215"{Bool, Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:unit, :node, :direction), Tuple{Array{SpineInterface.Object, 1}, Array{SpineInterface.Object, 1}, SpineInterface.Object}}}, SpineInterface.RelationshipClass}, Base.Dict{Any, Any}, Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}})
precompile(Tuple{SpineInterface.var"#cond#216"{Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:unit, :node, :direction), Tuple{Array{SpineInterface.Object, 1}, Array{SpineInterface.Object, 1}, SpineInterface.Object}}}}, NamedTuple{(:unit, :node, :direction), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{Type{Base.Iterators.Filter{F, I} where I where F}, SpineInterface.var"#243#246"{SpineInterface.RelationshipClass, SpineInterface.Parameter}, Array{Any, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.identity), Base.Iterators.Filter{SpineInterface.var"#243#246"{SpineInterface.RelationshipClass, SpineInterface.Parameter}, Array{Any, 1}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Filter{SpineInterface.var"#243#246"{SpineInterface.RelationshipClass, SpineInterface.Parameter}, Array{Any, 1}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1857#1863"{SpineInterface.Object, SpineInterface._StartRef, Base.Dict{Any, Any}}, Array{Any, 1}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:init,), Tuple{Int64}}, typeof(SpineOpt.expr_sum), Base.Generator{Array{Any, 1}, SpineOpt.var"#1857#1863"{SpineInterface.Object, SpineInterface._StartRef, Base.Dict{Any, Any}}}})
precompile(Tuple{Type{Base.Iterators.Filter{F, I} where I where F}, SpineOpt.var"#1859#1865"{JuMP.GenericModel{Float64}}, Array{NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1858#1864"{SpineInterface.Object, SpineInterface._StartRef, Base.Dict{NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}, Base.Iterators.Filter{SpineOpt.var"#1859#1865"{JuMP.GenericModel{Float64}}, Array{NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:init,), Tuple{Int64}}, typeof(SpineOpt.expr_sum), Base.Generator{Base.Iterators.Filter{SpineOpt.var"#1859#1865"{JuMP.GenericModel{Float64}}, Array{NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}}, SpineOpt.var"#1858#1864"{SpineInterface.Object, SpineInterface._StartRef, Base.Dict{NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}}})
precompile(Tuple{SpineOpt.var"##unit_flow_op_indices#1068", SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Anything, SpineInterface.Anything, SpineInterface.TimeSlice, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, typeof(SpineOpt.unit_flow_op_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:unit, :node1, :node2, :i, :stochastic_scenario, :analysis_time, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, Int64, SpineInterface.Object, SpineInterface._StartRef, SpineInterface.TimeSlice}}}})
precompile(Tuple{typeof(Base.getindex), SpineInterface.Parameter, NamedTuple{(:unit, :node1, :node2, :i, :stochastic_scenario, :analysis_time, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, Int64, SpineInterface.Object, SpineInterface._StartRef, SpineInterface.TimeSlice}}})
precompile(Tuple{Type{NamedTuple{(:i, :stochastic_scenario, :analysis_time, :t), T} where T<:Tuple}, Tuple{Int64, SpineInterface.Object, SpineInterface._StartRef, SpineInterface.TimeSlice}})
precompile(Tuple{Type{SpineInterface.Call}, SpineInterface.ParameterValue{Int64}, NamedTuple{(:i, :stochastic_scenario, :analysis_time, :t), Tuple{Int64, SpineInterface.Object, SpineInterface._StartRef, SpineInterface.TimeSlice}}, Tuple{Symbol, NamedTuple{(:unit, :node1, :node2, :i, :stochastic_scenario, :analysis_time, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, Int64, SpineInterface.Object, SpineInterface._StartRef, SpineInterface.TimeSlice}}}})
precompile(Tuple{typeof(Base.:(*)), JuMP.GenericVariableRef{Float64}, SpineInterface.Call})
precompile(Tuple{typeof(Base.:(*)), JuMP.GenericAffExpr{SpineInterface.Call, JuMP.GenericVariableRef{Float64}}, Float64})
precompile(Tuple{typeof(SpineInterface._args), Function, Nothing, SpineInterface.Call})
precompile(Tuple{typeof(Base.getindex), Array{Float64, 1}, Int64})
precompile(Tuple{typeof(Base.vcat), Float64, Float64})
precompile(Tuple{typeof(SpineInterface._args), Function, SpineInterface.ParameterValue{Int64}, SpineInterface.Call})
precompile(Tuple{typeof(Base.vcat), Float64, SpineInterface.Call})
precompile(Tuple{typeof(Base.one), Type{Any}})
precompile(Tuple{typeof(Base.reduce_empty), typeof(Base.:(*)), Type{Any}})
precompile(Tuple{typeof(Base.reduce_empty), Base.BottomRF{typeof(Base.:(*))}, Type{Any}})
precompile(Tuple{typeof(SpineInterface._prod_call), Array{Any, 1}})
precompile(Tuple{typeof(Base.:(*)), Float64, Float64})
precompile(Tuple{typeof(Base.:(+)), JuMP.GenericAffExpr{Float64, JuMP.GenericVariableRef{Float64}}, JuMP.GenericAffExpr{SpineInterface.Call, JuMP.GenericVariableRef{Float64}}})
precompile(Tuple{typeof(SpineInterface._sum_call), Array{Float64, 1}})
precompile(Tuple{typeof(MutableArithmetics.operate!!), typeof(MutableArithmetics.add_mul), JuMP.GenericAffExpr{Float64, JuMP.GenericVariableRef{Float64}}, JuMP.GenericAffExpr{SpineInterface.Call, JuMP.GenericVariableRef{Float64}}})
precompile(Tuple{SpineOpt.TOverlapsT, SpineInterface.TimeSlice})
precompile(Tuple{typeof(Base._unique_from), Base.Iterators.Flatten{Base.Generator{SpineInterface.TimeSlice, SpineOpt.var"#400#401"{SpineOpt.TOverlapsT}}}, Array{SpineInterface.TimeSlice, 1}, Base.Set{SpineInterface.TimeSlice}, Tuple{Int64, Base.Generator{Array{SpineInterface.TimeSlice, 1}, typeof(Base.identity)}, Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Array{SpineInterface.TimeSlice, 1}, typeof(Base.identity)}, Int64})
precompile(Tuple{Type{NamedTuple{(:unit, :stochastic_scenario, :t), T} where T<:Tuple}, Tuple{SpineInterface.Object, Array{SpineInterface.Object, 1}, Array{SpineInterface.TimeSlice, 1}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, Array{SpineInterface.Object, 1}, Array{SpineInterface.TimeSlice, 1}}}, typeof(SpineOpt.units_on_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{SpineOpt.var"##units_on_indices#1107", SpineInterface.Object, Array{SpineInterface.Object, 1}, Array{SpineInterface.TimeSlice, 1}, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, typeof(SpineOpt.units_on_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1109#1110"{Array{SpineInterface.Object, 1}, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}, Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#1109#1110"{Array{SpineInterface.Object, 1}, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.unique), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#1109#1110"{Array{SpineInterface.Object, 1}, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}}}})
precompile(Tuple{SpineOpt.var"#1109#1110"{Array{SpineInterface.Object, 1}, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}, NamedTuple{(:unit, :temporal_block), Tuple{SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#621#622"{Array{SpineInterface.Object, 1}, JuMP.GenericModel{Float64}}, Array{NamedTuple{(:unit, :t), Tuple{SpineInterface.Object, SpineInterface.TimeSlice}}, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{NamedTuple{(:unit, :t), Tuple{SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#621#622"{Array{SpineInterface.Object, 1}, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.unique), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{(:unit, :t), Tuple{SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#621#622"{Array{SpineInterface.Object, 1}, JuMP.GenericModel{Float64}}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#620#623"{SpineInterface.TimeSlice, SpineInterface.Object, Array{SpineInterface.Object, 1}, JuMP.GenericModel{Float64}}, Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#620#623"{SpineInterface.TimeSlice, SpineInterface.Object, Array{SpineInterface.Object, 1}, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#620#623"{SpineInterface.TimeSlice, SpineInterface.Object, Array{SpineInterface.Object, 1}, JuMP.GenericModel{Float64}}}}, Tuple{}})
precompile(Tuple{SpineOpt.var"#620#623"{SpineInterface.TimeSlice, SpineInterface.Object, Array{SpineInterface.Object, 1}, JuMP.GenericModel{Float64}}, NamedTuple{(:model, :stochastic_structure), Tuple{SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{typeof(Base._unique_from), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{(:unit, :t), Tuple{SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#621#622"{Array{SpineInterface.Object, 1}, JuMP.GenericModel{Float64}}}}, Array{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, Base.Set{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}}, Tuple{Int64, Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#620#623"{SpineInterface.TimeSlice, SpineInterface.Object, Array{SpineInterface.Object, 1}, JuMP.GenericModel{Float64}}}}, Tuple{Int64, Base.Generator{Array{SpineInterface.Object, 1}, SpineOpt.var"#619#624"{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice, SpineInterface.Object}}, Int64}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{(:unit, :t), Tuple{SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#621#622"{Array{SpineInterface.Object, 1}, JuMP.GenericModel{Float64}}}}, Tuple{Int64, Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#620#623"{SpineInterface.TimeSlice, SpineInterface.Object, Array{SpineInterface.Object, 1}, JuMP.GenericModel{Float64}}}}, Tuple{Int64, Base.Generator{Array{SpineInterface.Object, 1}, SpineOpt.var"#619#624"{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice, SpineInterface.Object}}, Int64}}})
precompile(Tuple{typeof(Base._unique_from), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#1109#1110"{Array{SpineInterface.Object, 1}, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}}}, Array{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, Base.Set{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}}, Tuple{Int64, Base.Generator{Array{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#1108#1111"{SpineInterface.Object}}, Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#1109#1110"{Array{SpineInterface.Object, 1}, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}}}, Tuple{Int64, Base.Generator{Array{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#1108#1111"{SpineInterface.Object}}, Int64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1860#1866"{SpineInterface.TimeSlice, SpineInterface.Object, SpineInterface.Object, SpineInterface._StartRef, Base.Dict{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Base.Dict{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}, Array{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:init,), Tuple{Int64}}, typeof(SpineOpt.expr_sum), Base.Generator{Array{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#1860#1866"{SpineInterface.TimeSlice, SpineInterface.Object, SpineInterface.Object, SpineInterface._StartRef, Base.Dict{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Base.Dict{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:unit, :node1, :node2, :stochastic_scenario, :analysis_time, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface._StartRef, SpineInterface.TimeSlice}}}})
precompile(Tuple{typeof(Base.getindex), SpineInterface.Parameter, NamedTuple{(:unit, :node1, :node2, :stochastic_scenario, :analysis_time, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface._StartRef, SpineInterface.TimeSlice}}})
precompile(Tuple{Type{NamedTuple{(:stochastic_scenario, :analysis_time, :t), T} where T<:Tuple}, Tuple{SpineInterface.Object, SpineInterface._StartRef, SpineInterface.TimeSlice}})
precompile(Tuple{Type{SpineInterface.Call}, SpineInterface.ParameterValue{Int64}, NamedTuple{(:stochastic_scenario, :analysis_time, :t), Tuple{SpineInterface.Object, SpineInterface._StartRef, SpineInterface.TimeSlice}}, Tuple{Symbol, NamedTuple{(:unit, :node1, :node2, :stochastic_scenario, :analysis_time, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface._StartRef, SpineInterface.TimeSlice}}}})
precompile(Tuple{typeof(Base.:(*)), JuMP.GenericAffExpr{Float64, JuMP.GenericVariableRef{Float64}}, SpineInterface.Call})
precompile(Tuple{typeof(Base.vcat), SpineInterface.Call, Float64})
precompile(Tuple{typeof(Base.:(+)), JuMP.GenericAffExpr{SpineInterface.Call, JuMP.GenericVariableRef{Float64}}, JuMP.GenericAffExpr{SpineInterface.Call, JuMP.GenericVariableRef{Float64}}})
precompile(Tuple{typeof(MutableArithmetics.operate!!), typeof(MutableArithmetics.add_mul), JuMP.GenericAffExpr{SpineInterface.Call, JuMP.GenericVariableRef{Float64}}, JuMP.GenericAffExpr{SpineInterface.Call, JuMP.GenericVariableRef{Float64}}})
precompile(Tuple{typeof(MutableArithmetics.operate!!), typeof(MutableArithmetics.sub_mul), JuMP.GenericAffExpr{Float64, JuMP.GenericVariableRef{Float64}}, JuMP.GenericAffExpr{SpineInterface.Call, JuMP.GenericVariableRef{Float64}}})
precompile(Tuple{typeof(SpineInterface._args), Function, typeof(Base.:(-)), SpineInterface.Call})
precompile(Tuple{typeof(Base.zero), Type{Any}})
precompile(Tuple{typeof(Base.reduce_empty), typeof(Base.:(+)), Type{Any}})
precompile(Tuple{typeof(Base.reduce_empty), typeof(Base.add_sum), Type{Any}})
precompile(Tuple{typeof(Base.reduce_empty), Base.BottomRF{typeof(Base.add_sum)}, Type{Any}})
precompile(Tuple{typeof(SpineInterface._sum_call), Array{Any, 1}})
precompile(Tuple{typeof(Base.add_sum), Float64, Float64})
precompile(Tuple{typeof(Base.in!), SpineInterface.Call, Base.Set{Any}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineInterface.var"#64#73"{SpineInterface.Call}, Array{Any, 1}})
precompile(Tuple{typeof(Base._simple_count_helper), Base.Generator{Array{Any, 1}, SpineInterface.var"#64#73"{SpineInterface.Call}}, Int64})
precompile(Tuple{SpineInterface.var"#65#74", Tuple{SpineInterface.Call, Int64}})
precompile(Tuple{typeof(Base._array_for), Type{SpineInterface.Call}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{SpineInterface.Call, 1}, SpineInterface.Call, Base.Generator{Base.Generator{Array{Any, 1}, SpineInterface.var"#63#72"{Array{Any, 1}}}, SpineInterface.var"#65#74"}, Int64})
precompile(Tuple{typeof(Base.getindex), Array{SpineInterface.Call, 1}, Int64})
precompile(Tuple{typeof(SpineInterface._arg), typeof(Base.:(*)), SpineInterface.Call})
precompile(Tuple{typeof(Base.vect), SpineInterface.Call})
precompile(Tuple{typeof(SpineInterface._arg), SpineInterface.ParameterValue{Int64}, SpineInterface.Call})
precompile(Tuple{typeof(JuMP.flatten!), JuMP.GenericAffExpr{SpineInterface.Call, JuMP.GenericVariableRef{Float64}}})
precompile(Tuple{typeof(JuMP._functionize), JuMP.GenericAffExpr{SpineInterface.Call, JuMP.GenericVariableRef{Float64}}})
precompile(Tuple{typeof(JuMP.build_constraint), Function, JuMP.GenericAffExpr{SpineInterface.Call, JuMP.GenericVariableRef{Float64}}, JuMP.Zeros})
precompile(Tuple{typeof(SpineInterface._arg), typeof(Base.:(-)), SpineInterface.Call})
precompile(Tuple{typeof(Base.vcat), Bool, SpineInterface.Call})
precompile(Tuple{typeof(Base.add_sum), Float64, Bool})
precompile(Tuple{typeof(JuMP.model_convert), JuMP.GenericModel{Float64}, JuMP.ScalarConstraint{JuMP.GenericAffExpr{SpineInterface.Call, JuMP.GenericVariableRef{Float64}}, SpineInterface._EqualToCall}})
precompile(Tuple{typeof(JuMP.add_constraint), JuMP.GenericModel{Float64}, JuMP.ScalarConstraint{JuMP.GenericAffExpr{SpineInterface.Call, JuMP.GenericVariableRef{Float64}}, SpineInterface._EqualToCall}, String})
precompile(Tuple{typeof(SpineInterface._iszero), Nothing, SpineInterface.Call})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineInterface.var"#57#58", Array{Float64, 1}})
precompile(Tuple{typeof(Base.all), Base.Generator{Array{Float64, 1}, SpineInterface.var"#57#58"}})
precompile(Tuple{typeof(SpineInterface._iszero), typeof(Base.:(-)), SpineInterface.Call})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineInterface.var"#57#58", Array{SpineInterface.Call, 1}})
precompile(Tuple{typeof(Base.all), Base.Generator{Array{SpineInterface.Call, 1}, SpineInterface.var"#57#58"}})
precompile(Tuple{typeof(SpineInterface._iszero), typeof(Base.:(*)), SpineInterface.Call})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineInterface.var"#59#60", Array{Any, 1}})
precompile(Tuple{typeof(Base.any), Base.Generator{Array{Any, 1}, SpineInterface.var"#59#60"}})
precompile(Tuple{SpineInterface.var"#59#60", SpineInterface.Call})
precompile(Tuple{typeof(SpineInterface._iszero), SpineInterface.ParameterValue{Int64}, SpineInterface.Call})
precompile(Tuple{SpineInterface.var"#59#60", Float64})
precompile(Tuple{Type{OrderedCollections.OrderedDict{JuMP.GenericVariableRef{Float64}, Float64}}, Base.Generator{OrderedCollections.OrderedDict{JuMP.GenericVariableRef{Float64}, SpineInterface.Call}, SpineInterface.var"#379#380"{Base.RefValue{JuMP.ConstraintRef{M, C, Shape} where Shape<:JuMP.AbstractShape where C where M<:JuMP.AbstractModel}}}})
precompile(Tuple{typeof(SpineInterface._do_realize), typeof(Base.:(-)), SpineInterface.Call, Function})
precompile(Tuple{Type{SpineInterface._CallNode}, SpineInterface.Call, SpineInterface._CallNode, Int64})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:i, :stochastic_scenario, :analysis_time, :t), Tuple{Int64, SpineInterface.Object, SpineInterface._StartRef, SpineInterface.TimeSlice}}, SpineInterface.ParameterValue{Int64}, Function})
precompile(Tuple{typeof(Base.setindex!), Base.RefValue{Any}, Int64})
precompile(Tuple{Type{SpineInterface._CallNode}, Float64, SpineInterface._CallNode, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.RefValue{Any}, Float64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Array{SpineInterface._CallNode, 1}, SpineInterface.var"#23#24"}, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Int64, 1}, Float64, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Real, 1}, Base.Generator{Array{SpineInterface._CallNode, 1}, SpineInterface.var"#23#24"}, Int64, Int64})
precompile(Tuple{typeof(Base.reduce), Function, Array{Real, 1}})
precompile(Tuple{typeof(Base._mapreduce_dim), Function, Function, Base._InitialValue, Array{Real, 1}, Base.Colon})
precompile(Tuple{typeof(Base.convert), Type{Real}, Int64})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.identity), typeof(Base.:(*)), Base.IndexLinear, Array{Real, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 1}, Float64, Base.Generator{Array{SpineInterface._CallNode, 1}, SpineInterface.var"#23#24"}, Int64})
precompile(Tuple{Type{Pair{A, B} where B where A}, JuMP.GenericVariableRef{Float64}, Float64})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{JuMP.GenericVariableRef{Float64}, Float64}, Float64, JuMP.GenericVariableRef{Float64}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:stochastic_scenario, :analysis_time, :t), Tuple{SpineInterface.Object, SpineInterface._StartRef, SpineInterface.TimeSlice}}, SpineInterface.ParameterValue{Int64}, Function})
precompile(Tuple{Type{JuMP.GenericAffExpr{CoefType, VarType} where VarType where CoefType}, Float64, OrderedCollections.OrderedDict{JuMP.GenericVariableRef{Float64}, Float64}})
precompile(Tuple{Type{JuMP.ScalarConstraint{F, S} where S<:MathOptInterface.AbstractScalarSet where F<:Union{Number, JuMP.AbstractJuMPScalar}}, JuMP.GenericAffExpr{Float64, JuMP.GenericVariableRef{Float64}}, MathOptInterface.EqualTo{Float64}})
precompile(Tuple{typeof(JuMP._moi_add_constraint), MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{HiGHS.Optimizer}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.GenericModel{Float64, MathOptInterface.Utilities.ObjectiveContainer{Float64}, MathOptInterface.Utilities.VariablesContainer{Float64}, MathOptInterface.Utilities.ModelFunctionConstraints{Float64}}}}, MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.EqualTo{Float64}})
precompile(Tuple{Type{Pair{A, B} where B where A}, NamedTuple{(:unit, :node1, :node2, :stochastic_path, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice}}, JuMP.ConstraintRef{JuMP.GenericModel{Float64}, MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.EqualTo{Float64}}, JuMP.ScalarShape}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{NamedTuple{(:unit, :node1, :node2, :stochastic_path, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice}}}, Type{JuMP.ConstraintRef{JuMP.GenericModel{Float64}, MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.EqualTo{Float64}}, JuMP.ScalarShape}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{NamedTuple{(:unit, :node1, :node2, :stochastic_path, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice}}, JuMP.ConstraintRef{JuMP.GenericModel{Float64}, MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.EqualTo{Float64}}, JuMP.ScalarShape}}, JuMP.ConstraintRef{JuMP.GenericModel{Float64}, MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.EqualTo{Float64}}, JuMP.ScalarShape}, NamedTuple{(:unit, :node1, :node2, :stochastic_path, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{NamedTuple{(:unit, :node1, :node2, :stochastic_path, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice}}, JuMP.ConstraintRef{JuMP.GenericModel{Float64}, MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.EqualTo{Float64}}, JuMP.ScalarShape}}, Base.Generator{Array{NamedTuple{(:unit, :node_from, :node_to, :stochastic_path, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#1855#1861"{JuMP.GenericModel{Float64}, SpineInterface._StartRef, Base.Dict{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Base.Dict{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Base.Dict{Any, Any}, Base.Dict{NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1060#1061"{Array{SpineInterface.Object, 1}, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}, Array{Any, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{Any, 1}, SpineOpt.var"#1060#1061"{Array{SpineInterface.Object, 1}, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.unique), Base.Iterators.Flatten{Base.Generator{Array{Any, 1}, SpineOpt.var"#1060#1061"{Array{SpineInterface.Object, 1}, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1856#1862"{Base.Dict{NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}, Array{Any, 1}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:init,), Tuple{Int64}}, typeof(SpineOpt.expr_sum), Base.Generator{Array{Any, 1}, SpineOpt.var"#1856#1862"{Base.Dict{NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Base.Dict{K, V} where V where K}, Base.Dict{NamedTuple{(:unit, :node1, :node2, :stochastic_path, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice}}, JuMP.ConstraintRef{JuMP.GenericModel{Float64}, MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.EqualTo{Float64}}, JuMP.ScalarShape}}, Symbol})
precompile(Tuple{typeof(SpineOpt.add_constraint_user_constraint!), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1774#1775"{JuMP.GenericModel{Float64}}, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, SpineOpt.var"#1774#1775"{JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.unique), Base.Iterators.Flatten{Base.Generator{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, SpineOpt.var"#1774#1775"{JuMP.GenericModel{Float64}}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1717#1745"{JuMP.GenericModel{Float64}, SpineInterface._StartRef, Base.Dict{Any, Any}, Base.Dict{Any, Any}, Base.Dict{Any, Any}, Base.Dict{Any, Any}, Base.Dict{Any, Any}, Base.Dict{Any, Any}, Base.Dict{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Base.Dict{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Base.Dict{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Base.Dict{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Base.Dict{NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Base.Dict{Any, Any}}, Array{Any, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Array{Any, 1}, SpineOpt.var"#1717#1745"{JuMP.GenericModel{Float64}, SpineInterface._StartRef, Base.Dict{Any, Any}, Base.Dict{Any, Any}, Base.Dict{Any, Any}, Base.Dict{Any, Any}, Base.Dict{Any, Any}, Base.Dict{Any, Any}, Base.Dict{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Base.Dict{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Base.Dict{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Base.Dict{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Base.Dict{NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Base.Dict{Any, Any}}}})
precompile(Tuple{typeof(SpineOpt.add_constraint_node_injection!), JuMP.GenericModel{Float64}})
precompile(Tuple{SpineOpt.var"##node_dynamic_time_indices#473", SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, typeof(SpineOpt.node_dynamic_time_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#476#477"{SpineInterface.Anything, JuMP.GenericModel{Float64}}, Array{NamedTuple{(:node, :t), Tuple{SpineInterface.Object, SpineInterface.TimeSlice}}, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{NamedTuple{(:node, :t), Tuple{SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#476#477"{SpineInterface.Anything, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.unique), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{(:node, :t), Tuple{SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#476#477"{SpineInterface.Anything, JuMP.GenericModel{Float64}}}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:t_before, :t_after, :_compact), Tuple{SpineInterface.Anything, SpineInterface.TimeSlice, Bool}}, SpineInterface.RelationshipClass})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{SpineInterface.Anything, 1}, SpineInterface.Anything, Base.Generator{Array{Symbol, 1}, SpineInterface.var"#208#214"{Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:t_before, :t_after), Tuple{SpineInterface.Anything, SpineInterface.TimeSlice}}}}}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{SpineInterface.Anything, 1}, Base.Generator{Array{Symbol, 1}, SpineInterface.var"#208#214"{Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:t_before, :t_after), Tuple{SpineInterface.Anything, SpineInterface.TimeSlice}}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.get!), SpineInterface.var"#209#215"{Bool, Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:t_before, :t_after), Tuple{SpineInterface.Anything, SpineInterface.TimeSlice}}}, SpineInterface.RelationshipClass}, Base.Dict{Any, Any}, Tuple{SpineInterface.Anything, SpineInterface.TimeSlice}})
precompile(Tuple{SpineInterface.var"#cond#216"{Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:t_before, :t_after), Tuple{SpineInterface.Anything, SpineInterface.TimeSlice}}}}, NamedTuple{(:t_before, :t_after), Tuple{SpineInterface.TimeSlice, SpineInterface.TimeSlice}}})
precompile(Tuple{typeof(Base.in), SpineInterface.TimeSlice, SpineInterface.Anything})
precompile(Tuple{typeof(Base.in), SpineInterface.TimeSlice, SpineInterface.TimeSlice})
precompile(Tuple{typeof(Base.map), Function, Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#475#479", Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#475#479"}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{SpineInterface.TimeSlice, 1}, SpineInterface.TimeSlice, Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#475#479"}, Int64})
precompile(Tuple{Type{NamedTuple{(:node, :t), T} where T<:Tuple}, Tuple{SpineInterface.Object, Array{SpineInterface.TimeSlice, 1}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:node, :t), Tuple{SpineInterface.Object, Array{SpineInterface.TimeSlice, 1}}}, typeof(SpineOpt.node_time_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{SpineOpt.var"##node_time_indices#466", SpineInterface.Object, SpineInterface.Anything, Array{SpineInterface.TimeSlice, 1}, typeof(SpineOpt.node_time_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#474#478"{SpineInterface.TimeSlice}, Array{NamedTuple{(:node, :t), Tuple{SpineInterface.Object, SpineInterface.TimeSlice}}, 1}})
precompile(Tuple{typeof(Base.iterate), Array{NamedTuple{(:node, :t), Tuple{SpineInterface.Object, SpineInterface.TimeSlice}}, 1}})
precompile(Tuple{SpineOpt.var"#474#478"{SpineInterface.TimeSlice}, NamedTuple{(:node, :t), Tuple{SpineInterface.Object, SpineInterface.TimeSlice}}})
precompile(Tuple{typeof(Base.getindex), Type{NamedTuple{(:node, :t_before, :t_after), Tuple{SpineInterface.Object, SpineInterface.TimeSlice, SpineInterface.TimeSlice}}}, NamedTuple{(:node, :t_before, :t_after), Tuple{SpineInterface.Object, SpineInterface.TimeSlice, SpineInterface.TimeSlice}}})
precompile(Tuple{Type{Base.Set{NamedTuple{(:node, :t_before, :t_after), Tuple{SpineInterface.Object, SpineInterface.TimeSlice, SpineInterface.TimeSlice}}}}, Tuple{NamedTuple{(:node, :t_before, :t_after), Tuple{SpineInterface.Object, SpineInterface.TimeSlice, SpineInterface.TimeSlice}}}})
precompile(Tuple{typeof(Base._unique_from), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{(:node, :t), Tuple{SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#476#477"{SpineInterface.Anything, JuMP.GenericModel{Float64}}}}, Array{NamedTuple{(:node, :t_before, :t_after), Tuple{SpineInterface.Object, SpineInterface.TimeSlice, SpineInterface.TimeSlice}}, 1}, Base.Set{NamedTuple{(:node, :t_before, :t_after), Tuple{SpineInterface.Object, SpineInterface.TimeSlice, SpineInterface.TimeSlice}}}, Tuple{Int64, Base.Generator{Array{NamedTuple{(:node, :t), Tuple{SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#474#478"{SpineInterface.TimeSlice}}, Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{(:node, :t), Tuple{SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#476#477"{SpineInterface.Anything, JuMP.GenericModel{Float64}}}}, Tuple{Int64, Base.Generator{Array{NamedTuple{(:node, :t), Tuple{SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#474#478"{SpineInterface.TimeSlice}}, Int64}})
precompile(Tuple{typeof(Base.in!), NamedTuple{(:node, :t_before, :t_after), Tuple{SpineInterface.Object, SpineInterface.TimeSlice, SpineInterface.TimeSlice}}, Base.Set{NamedTuple{(:node, :t_before, :t_after), Tuple{SpineInterface.Object, SpineInterface.TimeSlice, SpineInterface.TimeSlice}}}})
precompile(Tuple{typeof(Base.push!), Array{NamedTuple{(:node, :t_before, :t_after), Tuple{SpineInterface.Object, SpineInterface.TimeSlice, SpineInterface.TimeSlice}}, 1}, NamedTuple{(:node, :t_before, :t_after), Tuple{SpineInterface.Object, SpineInterface.TimeSlice, SpineInterface.TimeSlice}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1385#1386"{JuMP.GenericModel{Float64}}, Array{NamedTuple{(:node, :t_before, :t_after), Tuple{SpineInterface.Object, SpineInterface.TimeSlice, SpineInterface.TimeSlice}}, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{NamedTuple{(:node, :t_before, :t_after), Tuple{SpineInterface.Object, SpineInterface.TimeSlice, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#1385#1386"{JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.unique), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{(:node, :t_before, :t_after), Tuple{SpineInterface.Object, SpineInterface.TimeSlice, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#1385#1386"{JuMP.GenericModel{Float64}}}}})
precompile(Tuple{SpineOpt.var"##node_stochastic_time_indices#611", SpineInterface.Object, SpineInterface.Anything, SpineInterface.Anything, SpineInterface.TimeSlice, typeof(SpineOpt.node_stochastic_time_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#469#470"{SpineInterface.Object, SpineInterface.TimeSlice, JuMP.GenericModel{Float64}}, Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#469#470"{SpineInterface.Object, SpineInterface.TimeSlice, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.unique), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#469#470"{SpineInterface.Object, SpineInterface.TimeSlice, JuMP.GenericModel{Float64}}}}})
precompile(Tuple{SpineOpt.var"#469#470"{SpineInterface.Object, SpineInterface.TimeSlice, JuMP.GenericModel{Float64}}, NamedTuple{(:model, :temporal_block), Tuple{SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#468#471"{SpineInterface.Object, SpineInterface.TimeSlice, JuMP.GenericModel{Float64}}, Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#468#471"{SpineInterface.Object, SpineInterface.TimeSlice, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#468#471"{SpineInterface.Object, SpineInterface.TimeSlice, JuMP.GenericModel{Float64}}}}, Tuple{}})
precompile(Tuple{SpineOpt.var"#468#471"{SpineInterface.Object, SpineInterface.TimeSlice, JuMP.GenericModel{Float64}}, NamedTuple{(:node, :temporal_block), Tuple{SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:temporal_block, :t), Tuple{Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice}}, SpineOpt.TimeSliceSet})
precompile(Tuple{typeof(Base._unique_from), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#469#470"{SpineInterface.Object, SpineInterface.TimeSlice, JuMP.GenericModel{Float64}}}}, Array{NamedTuple{(:node, :t), Tuple{SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, Base.Set{NamedTuple{(:node, :t), Tuple{SpineInterface.Object, SpineInterface.TimeSlice}}}, Tuple{Int64, Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#468#471"{SpineInterface.Object, SpineInterface.TimeSlice, JuMP.GenericModel{Float64}}}}, Tuple{Int64, Base.Generator{Array{SpineInterface.TimeSlice, 1}, SpineOpt.var"#467#472"{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}}, Int64}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#469#470"{SpineInterface.Object, SpineInterface.TimeSlice, JuMP.GenericModel{Float64}}}}, Tuple{Int64, Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#468#471"{SpineInterface.Object, SpineInterface.TimeSlice, JuMP.GenericModel{Float64}}}}, Tuple{Int64, Base.Generator{Array{SpineInterface.TimeSlice, 1}, SpineOpt.var"#467#472"{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}}, Int64}}})
precompile(Tuple{SpineOpt.var"##node_state_indices#1102", SpineInterface.Object, SpineInterface.Anything, SpineInterface.TimeSlice, SpineInterface.Anything, typeof(SpineOpt.node_state_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:node, :temporal_block, :_compact), Tuple{SpineInterface.Object, SpineInterface.Anything, Bool}}, SpineInterface.RelationshipClass})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{SpineInterface.Object, 1}, SpineInterface.Object, Base.Generator{Array{Symbol, 1}, SpineInterface.var"#208#214"{Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:node, :temporal_block), Tuple{SpineInterface.Object, SpineInterface.Anything}}}}}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{SpineInterface.Object, 1}, Base.Generator{Array{Symbol, 1}, SpineInterface.var"#208#214"{Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:node, :temporal_block), Tuple{SpineInterface.Object, SpineInterface.Anything}}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.get!), SpineInterface.var"#209#215"{Bool, Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:node, :temporal_block), Tuple{SpineInterface.Object, SpineInterface.Anything}}}, SpineInterface.RelationshipClass}, Base.Dict{Any, Any}, Tuple{SpineInterface.Object, SpineInterface.Anything}})
precompile(Tuple{SpineInterface.var"#cond#216"{Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:node, :temporal_block), Tuple{SpineInterface.Object, SpineInterface.Anything}}}}, NamedTuple{(:node, :temporal_block), Tuple{SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1104#1105"{SpineInterface.Anything, SpineInterface.TimeSlice, JuMP.GenericModel{Float64}}, Array{Any, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{Any, 1}, SpineOpt.var"#1104#1105"{SpineInterface.Anything, SpineInterface.TimeSlice, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.unique), Base.Iterators.Flatten{Base.Generator{Array{Any, 1}, SpineOpt.var"#1104#1105"{SpineInterface.Anything, SpineInterface.TimeSlice, JuMP.GenericModel{Float64}}}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:node2,), Tuple{SpineInterface.Object}}, SpineInterface.RelationshipClass})
precompile(Tuple{typeof(Base.get!), SpineInterface.var"#209#215"{Bool, Base.Pairs{Symbol, SpineInterface.Object, Tuple{Symbol}, NamedTuple{(:node2,), Tuple{SpineInterface.Object}}}, SpineInterface.RelationshipClass}, Base.Dict{Any, Any}, Tuple{Nothing, SpineInterface.Object}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:node1,), Tuple{SpineInterface.Object}}, SpineInterface.RelationshipClass})
precompile(Tuple{typeof(Base.get!), SpineInterface.var"#209#215"{Bool, Base.Pairs{Symbol, SpineInterface.Object, Tuple{Symbol}, NamedTuple{(:node1,), Tuple{SpineInterface.Object}}}, SpineInterface.RelationshipClass}, Base.Dict{Any, Any}, Tuple{SpineInterface.Object, Nothing}})
precompile(Tuple{Type{NamedTuple{(:node, :t), T} where T<:Tuple}, Tuple{Array{Any, 1}, SpineInterface.TimeSlice}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:node, :t), Tuple{Array{Any, 1}, SpineInterface.TimeSlice}}, typeof(SpineOpt.node_state_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{SpineOpt.var"##node_state_indices#1102", Array{Any, 1}, SpineInterface.Anything, SpineInterface.TimeSlice, SpineInterface.Anything, typeof(SpineOpt.node_state_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:node, :temporal_block, :_compact), Tuple{Array{Any, 1}, SpineInterface.Anything, Bool}}, SpineInterface.RelationshipClass})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{}, 1}, Tuple{}, Base.Generator{Array{Symbol, 1}, SpineInterface.var"#208#214"{Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:node, :temporal_block), Tuple{Array{Any, 1}, SpineInterface.Anything}}}}}, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Tuple{}, 1}, SpineInterface.Anything, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Any, 1}, Base.Generator{Array{Symbol, 1}, SpineInterface.var"#208#214"{Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:node, :temporal_block), Tuple{Array{Any, 1}, SpineInterface.Anything}}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.get!), SpineInterface.var"#209#215"{Bool, Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:node, :temporal_block), Tuple{Array{Any, 1}, SpineInterface.Anything}}}, SpineInterface.RelationshipClass}, Base.Dict{Any, Any}, Tuple{Tuple{}, SpineInterface.Anything}})
precompile(Tuple{SpineInterface.var"#cond#216"{Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:node, :temporal_block), Tuple{Array{Any, 1}, SpineInterface.Anything}}}}, NamedTuple{(:node, :temporal_block), Tuple{SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{typeof(Base.vcat), Array{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, Array{Any, 1}, Array{Any, 1}})
precompile(Tuple{typeof(SpineOpt.active_stochastic_paths), JuMP.GenericModel{Float64}, Array{Any, 1}})
precompile(Tuple{SpineOpt.var"#584#585", NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#586#587"{Array{SpineInterface.Object, 1}}, Array{Array{SpineInterface.Object, 1}, 1}})
precompile(Tuple{typeof(Base.unique), Base.Generator{Array{Array{SpineInterface.Object, 1}, 1}, SpineOpt.var"#586#587"{Array{SpineInterface.Object, 1}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1384#1387"{SpineInterface.TimeSlice, SpineInterface.TimeSlice, SpineInterface.Object}, Array{Array{SpineInterface.Object, 1}, 1}})
precompile(Tuple{SpineOpt.var"#1384#1387"{SpineInterface.TimeSlice, SpineInterface.TimeSlice, SpineInterface.Object}, Array{SpineInterface.Object, 1}})
precompile(Tuple{typeof(Base.getindex), Type{NamedTuple{(:node, :stochastic_path, :t_before, :t_after), Tuple{SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice, SpineInterface.TimeSlice}}}, NamedTuple{(:node, :stochastic_path, :t_before, :t_after), Tuple{SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice, SpineInterface.TimeSlice}}})
precompile(Tuple{Type{Base.Set{NamedTuple{(:node, :stochastic_path, :t_before, :t_after), Tuple{SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice, SpineInterface.TimeSlice}}}}, Tuple{NamedTuple{(:node, :stochastic_path, :t_before, :t_after), Tuple{SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice, SpineInterface.TimeSlice}}}})
precompile(Tuple{typeof(Base._unique_from), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{(:node, :t_before, :t_after), Tuple{SpineInterface.Object, SpineInterface.TimeSlice, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#1385#1386"{JuMP.GenericModel{Float64}}}}, Array{NamedTuple{(:node, :stochastic_path, :t_before, :t_after), Tuple{SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice, SpineInterface.TimeSlice}}, 1}, Base.Set{NamedTuple{(:node, :stochastic_path, :t_before, :t_after), Tuple{SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice, SpineInterface.TimeSlice}}}, Tuple{Int64, Base.Generator{Array{Array{SpineInterface.Object, 1}, 1}, SpineOpt.var"#1384#1387"{SpineInterface.TimeSlice, SpineInterface.TimeSlice, SpineInterface.Object}}, Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{(:node, :t_before, :t_after), Tuple{SpineInterface.Object, SpineInterface.TimeSlice, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#1385#1386"{JuMP.GenericModel{Float64}}}}, Tuple{Int64, Base.Generator{Array{Array{SpineInterface.Object, 1}, 1}, SpineOpt.var"#1384#1387"{SpineInterface.TimeSlice, SpineInterface.TimeSlice, SpineInterface.Object}}, Int64}})
precompile(Tuple{typeof(Base.in!), NamedTuple{(:node, :stochastic_path, :t_before, :t_after), Tuple{SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice, SpineInterface.TimeSlice}}, Base.Set{NamedTuple{(:node, :stochastic_path, :t_before, :t_after), Tuple{SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice, SpineInterface.TimeSlice}}}})
precompile(Tuple{typeof(Base.push!), Array{NamedTuple{(:node, :stochastic_path, :t_before, :t_after), Tuple{SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice, SpineInterface.TimeSlice}}, 1}, NamedTuple{(:node, :stochastic_path, :t_before, :t_after), Tuple{SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice, SpineInterface.TimeSlice}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1104#1105"{SpineInterface.Anything, SpineInterface.TimeSlice, JuMP.GenericModel{Float64}}, Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#1104#1105"{SpineInterface.Anything, SpineInterface.TimeSlice, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.unique), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#1104#1105"{SpineInterface.Anything, SpineInterface.TimeSlice, JuMP.GenericModel{Float64}}}}})
precompile(Tuple{SpineOpt.var"#1104#1105"{SpineInterface.Anything, SpineInterface.TimeSlice, JuMP.GenericModel{Float64}}, NamedTuple{(:node, :temporal_block), Tuple{SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{typeof(Base._unique_from), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#1104#1105"{SpineInterface.Anything, SpineInterface.TimeSlice, JuMP.GenericModel{Float64}}}}, Array{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, Base.Set{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}}, Tuple{Int64, Base.Generator{Array{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#1103#1106"{SpineInterface.Object}}, Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#1104#1105"{SpineInterface.Anything, SpineInterface.TimeSlice, JuMP.GenericModel{Float64}}}}, Tuple{Int64, Base.Generator{Array{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#1103#1106"{SpineInterface.Object}}, Int64}})
precompile(Tuple{typeof(Base.hashindex), Tuple{Nothing, SpineInterface.Object}, Int64})
precompile(Tuple{typeof(Base.vcat), Array{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, Array{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, Array{Any, 1}})
precompile(Tuple{typeof(Base.hashindex), Tuple{SpineInterface.Object, SpineInterface.Anything}, Int64})
precompile(Tuple{typeof(Base.hashindex), Tuple{SpineInterface.Anything, SpineInterface.Anything}, Int64})
precompile(Tuple{typeof(Base.hashindex), Tuple{Tuple{}, SpineInterface.Anything}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1362#1373"{JuMP.GenericModel{Float64}, SpineInterface._StartRef, Base.Dict{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Base.Dict{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Base.Dict{NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Base.Dict{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Base.Dict{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}, Array{NamedTuple{(:node, :stochastic_path, :t_before, :t_after), Tuple{SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice, SpineInterface.TimeSlice}}, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Array{NamedTuple{(:node, :stochastic_path, :t_before, :t_after), Tuple{SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#1362#1373"{JuMP.GenericModel{Float64}, SpineInterface._StartRef, Base.Dict{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Base.Dict{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Base.Dict{NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Base.Dict{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Base.Dict{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}}})
precompile(Tuple{Type{NamedTuple{(:node, :stochastic_scenario, :t, :temporal_block), T} where T<:Tuple}, Tuple{SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice, SpineInterface.Anything}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:node, :stochastic_scenario, :t, :temporal_block), Tuple{SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice, SpineInterface.Anything}}, typeof(SpineOpt.node_injection_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1363#1374"{JuMP.GenericModel{Float64}, SpineInterface._StartRef, Base.Dict{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Base.Dict{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Base.Dict{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}, Array{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:init,), Tuple{Int64}}, typeof(SpineOpt.expr_sum), Base.Generator{Array{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#1363#1374"{JuMP.GenericModel{Float64}, SpineInterface._StartRef, Base.Dict{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Base.Dict{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Base.Dict{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}}})
precompile(Tuple{typeof(Base.get), Base.Dict{Any, Any}, SpineInterface.TimeSlice, SpineInterface.TimeSlice})
precompile(Tuple{Type{NamedTuple{(:node, :stochastic_scenario, :analysis_time, :t), T} where T<:Tuple}, Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface._StartRef, SpineInterface.TimeSlice}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:node, :stochastic_scenario, :analysis_time, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface._StartRef, SpineInterface.TimeSlice}}}})
precompile(Tuple{typeof(Base.getindex), SpineInterface.Parameter, NamedTuple{(:node, :stochastic_scenario, :analysis_time, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface._StartRef, SpineInterface.TimeSlice}}})
precompile(Tuple{Type{SpineInterface.Call}, SpineInterface.ParameterValue{Int64}, NamedTuple{(:stochastic_scenario, :analysis_time, :t), Tuple{SpineInterface.Object, SpineInterface._StartRef, SpineInterface.TimeSlice}}, Tuple{Symbol, NamedTuple{(:node, :stochastic_scenario, :analysis_time, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface._StartRef, SpineInterface.TimeSlice}}}})
precompile(Tuple{typeof(Base.:(+)), JuMP.GenericVariableRef{Float64}, SpineInterface.Call})
precompile(Tuple{typeof(Base.:(-)), JuMP.GenericAffExpr{SpineInterface.Call, JuMP.GenericVariableRef{Float64}}, JuMP.GenericVariableRef{Float64}})
precompile(Tuple{typeof(Base.:(+)), JuMP.GenericAffExpr{SpineInterface.Call, JuMP.GenericVariableRef{Float64}}, JuMP.GenericVariableRef{Float64}})
precompile(Tuple{typeof(MutableArithmetics.copy_if_mutable), JuMP.GenericAffExpr{SpineInterface.Call, JuMP.GenericVariableRef{Float64}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1365#1375"{SpineInterface._StartRef}, Array{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#1365#1375"{SpineInterface._StartRef}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:init,), Tuple{Int64}}, typeof(SpineOpt.expr_sum), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#1365#1375"{SpineInterface._StartRef}}}})
precompile(Tuple{typeof(MutableArithmetics.operate!!), typeof(MutableArithmetics.add_mul), JuMP.GenericAffExpr{SpineInterface.Call, JuMP.GenericVariableRef{Float64}}, JuMP.GenericAffExpr{Float64, JuMP.GenericVariableRef{Float64}}})
precompile(Tuple{typeof(Base.vcat), Int64, SpineInterface.Call})
precompile(Tuple{typeof(SpineInterface._diff_call), Float64, Float64})
precompile(Tuple{typeof(Base.:(/)), SpineInterface.Call, Float64})
precompile(Tuple{typeof(SpineInterface._ratio_call), Float64, Float64})
precompile(Tuple{typeof(Base.:(+)), JuMP.GenericAffExpr{Float64, JuMP.GenericVariableRef{Float64}}, SpineInterface.Call})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1368#1378"{SpineInterface.TimeSlice, Array{SpineInterface.Object, 1}, SpineInterface.Object, SpineInterface._StartRef, Base.Dict{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}, Array{Any, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{Any, 1}, SpineOpt.var"#1368#1378"{SpineInterface.TimeSlice, Array{SpineInterface.Object, 1}, SpineInterface.Object, SpineInterface._StartRef, Base.Dict{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:init,), Tuple{Int64}}, typeof(SpineOpt.expr_sum), Base.Iterators.Flatten{Base.Generator{Array{Any, 1}, SpineOpt.var"#1368#1378"{SpineInterface.TimeSlice, Array{SpineInterface.Object, 1}, SpineInterface.Object, SpineInterface._StartRef, Base.Dict{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1370#1380"{SpineInterface.TimeSlice, Array{SpineInterface.Object, 1}, SpineInterface.Object, SpineInterface._StartRef, Base.Dict{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}, Array{Any, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{Any, 1}, SpineOpt.var"#1370#1380"{SpineInterface.TimeSlice, Array{SpineInterface.Object, 1}, SpineInterface.Object, SpineInterface._StartRef, Base.Dict{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:init,), Tuple{Int64}}, typeof(SpineOpt.expr_sum), Base.Iterators.Flatten{Base.Generator{Array{Any, 1}, SpineOpt.var"#1370#1380"{SpineInterface.TimeSlice, Array{SpineInterface.Object, 1}, SpineInterface.Object, SpineInterface._StartRef, Base.Dict{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}}}})
precompile(Tuple{typeof(MutableArithmetics.operate!!), typeof(MutableArithmetics.sub_mul), JuMP.GenericAffExpr{SpineInterface.Call, JuMP.GenericVariableRef{Float64}}, JuMP.GenericAffExpr{Float64, JuMP.GenericVariableRef{Float64}}})
precompile(Tuple{Type{NamedTuple{(:node, :direction, :stochastic_scenario, :t, :temporal_block), T} where T<:Tuple}, Tuple{SpineInterface.Object, SpineInterface.Object, Array{SpineInterface.Object, 1}, Array{SpineInterface.TimeSlice, 1}, SpineInterface.Anything}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:node, :direction, :stochastic_scenario, :t, :temporal_block), Tuple{SpineInterface.Object, SpineInterface.Object, Array{SpineInterface.Object, 1}, Array{SpineInterface.TimeSlice, 1}, SpineInterface.Anything}}, typeof(SpineOpt.unit_flow_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{SpineOpt.var"##unit_flow_indices#1058", SpineInterface.Anything, SpineInterface.Object, SpineInterface.Object, Array{SpineInterface.Object, 1}, Array{SpineInterface.TimeSlice, 1}, SpineInterface.Anything, typeof(SpineOpt.unit_flow_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{NamedTuple{(:unit, :node, :direction, :temporal_block, :_compact), T} where T<:Tuple}, Tuple{SpineInterface.Anything, Array{SpineInterface.Object, 1}, SpineInterface.Object, SpineInterface.Anything, Bool}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:unit, :node, :direction, :temporal_block, :_compact), Tuple{SpineInterface.Anything, Array{SpineInterface.Object, 1}, SpineInterface.Object, SpineInterface.Anything, Bool}}, SpineInterface.RelationshipClass})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{SpineInterface.Anything, 1}, SpineInterface.Anything, Base.Generator{Array{Symbol, 1}, SpineInterface.var"#208#214"{Base.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:unit, :node, :direction, :temporal_block), Tuple{SpineInterface.Anything, Array{SpineInterface.Object, 1}, SpineInterface.Object, SpineInterface.Anything}}}}}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Any, 1}, Base.Generator{Array{Symbol, 1}, SpineInterface.var"#208#214"{Base.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:unit, :node, :direction, :temporal_block), Tuple{SpineInterface.Anything, Array{SpineInterface.Object, 1}, SpineInterface.Object, SpineInterface.Anything}}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.get!), SpineInterface.var"#209#215"{Bool, Base.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:unit, :node, :direction, :temporal_block), Tuple{SpineInterface.Anything, Array{SpineInterface.Object, 1}, SpineInterface.Object, SpineInterface.Anything}}}, SpineInterface.RelationshipClass}, Base.Dict{Any, Any}, Tuple{SpineInterface.Anything, SpineInterface.Object, SpineInterface.Object, SpineInterface.Anything}})
precompile(Tuple{SpineInterface.var"#cond#216"{Base.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:unit, :node, :direction, :temporal_block), Tuple{SpineInterface.Anything, Array{SpineInterface.Object, 1}, SpineInterface.Object, SpineInterface.Anything}}}}, NamedTuple{(:unit, :node, :direction, :temporal_block), NTuple{4, SpineInterface.Object}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1371#1382"{Base.Dict{NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}, Array{Any, 1}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:init,), Tuple{Int64}}, typeof(SpineOpt.expr_sum), Base.Generator{Array{Any, 1}, SpineOpt.var"#1371#1382"{Base.Dict{NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1372#1383"{Base.Dict{NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}, Array{NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:init,), Tuple{Int64}}, typeof(SpineOpt.expr_sum), Base.Generator{Array{NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#1372#1383"{Base.Dict{NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}}})
precompile(Tuple{typeof(MutableArithmetics.operate!!), typeof(MutableArithmetics.sub_mul), JuMP.GenericAffExpr{SpineInterface.Call, JuMP.GenericVariableRef{Float64}}, JuMP.GenericAffExpr{SpineInterface.Call, JuMP.GenericVariableRef{Float64}}})
precompile(Tuple{typeof(Base.vcat), SpineInterface.Call, SpineInterface.Call})
precompile(Tuple{typeof(SpineInterface._prod_call), Array{SpineInterface.Call, 1}})
precompile(Tuple{typeof(SpineInterface._do_realize), typeof(Base.:(*)), SpineInterface.Call, Function})
precompile(Tuple{typeof(Base.reduce), Function, Array{Float64, 1}})
precompile(Tuple{typeof(Base._mapreduce_dim), Function, Function, Base._InitialValue, Array{Float64, 1}, Base.Colon})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.identity), typeof(Base.:(*)), Base.IndexLinear, Array{Float64, 1}})
precompile(Tuple{Type{Pair{A, B} where B where A}, NamedTuple{(:node, :stochastic_path, :t_before, :t_after), Tuple{SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice, SpineInterface.TimeSlice}}, JuMP.ConstraintRef{JuMP.GenericModel{Float64}, MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.EqualTo{Float64}}, JuMP.ScalarShape}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{NamedTuple{(:node, :stochastic_path, :t_before, :t_after), Tuple{SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice, SpineInterface.TimeSlice}}}, Type{JuMP.ConstraintRef{JuMP.GenericModel{Float64}, MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.EqualTo{Float64}}, JuMP.ScalarShape}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{NamedTuple{(:node, :stochastic_path, :t_before, :t_after), Tuple{SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice, SpineInterface.TimeSlice}}, JuMP.ConstraintRef{JuMP.GenericModel{Float64}, MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.EqualTo{Float64}}, JuMP.ScalarShape}}, JuMP.ConstraintRef{JuMP.GenericModel{Float64}, MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.EqualTo{Float64}}, JuMP.ScalarShape}, NamedTuple{(:node, :stochastic_path, :t_before, :t_after), Tuple{SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice, SpineInterface.TimeSlice}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{NamedTuple{(:node, :stochastic_path, :t_before, :t_after), Tuple{SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice, SpineInterface.TimeSlice}}, JuMP.ConstraintRef{JuMP.GenericModel{Float64}, MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.EqualTo{Float64}}, JuMP.ScalarShape}}, Base.Generator{Array{NamedTuple{(:node, :stochastic_path, :t_before, :t_after), Tuple{SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#1362#1373"{JuMP.GenericModel{Float64}, SpineInterface._StartRef, Base.Dict{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Base.Dict{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Base.Dict{NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Base.Dict{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Base.Dict{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}}, Int64})
precompile(Tuple{typeof(Base.:(-)), JuMP.GenericAffExpr{SpineInterface.Call, JuMP.GenericVariableRef{Float64}}, Int64})
precompile(Tuple{typeof(Base.vcat), SpineInterface.Call, Int64})
precompile(Tuple{typeof(Base.add_sum), Float64, Int64})
precompile(Tuple{typeof(Base.:(+)), JuMP.GenericAffExpr{SpineInterface.Call, JuMP.GenericVariableRef{Float64}}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1372#1383"{Base.Dict{NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}, Array{Any, 1}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:init,), Tuple{Int64}}, typeof(SpineOpt.expr_sum), Base.Generator{Array{Any, 1}, SpineOpt.var"#1372#1383"{Base.Dict{NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}}})
precompile(Tuple{Type{SpineInterface.Call}, SpineInterface.ParameterValue{SpineInterface.TimeSeries{Float64}}, NamedTuple{(:stochastic_scenario, :analysis_time, :t), Tuple{SpineInterface.Object, SpineInterface._StartRef, SpineInterface.TimeSlice}}, Tuple{Symbol, NamedTuple{(:node, :stochastic_scenario, :analysis_time, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface._StartRef, SpineInterface.TimeSlice}}}})
precompile(Tuple{typeof(SpineInterface._args), Function, SpineInterface.ParameterValue{SpineInterface.TimeSeries{Float64}}, SpineInterface.Call})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1371#1382"{Base.Dict{NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}, Array{NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:init,), Tuple{Int64}}, typeof(SpineOpt.expr_sum), Base.Generator{Array{NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#1371#1382"{Base.Dict{NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}}})
precompile(Tuple{typeof(SpineInterface._arg), SpineInterface.ParameterValue{SpineInterface.TimeSeries{Float64}}, SpineInterface.Call})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:stochastic_scenario, :analysis_time, :t), Tuple{SpineInterface.Object, SpineInterface._StartRef, SpineInterface.TimeSlice}}, SpineInterface.ParameterValue{SpineInterface.TimeSeries{Float64}}, Function})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Nothing}, Nothing, SpineInterface.var"#285#286"{SpineInterface.Call, SpineInterface._RHSUpdate}})
precompile(Tuple{typeof(Base.:(-)), JuMP.GenericAffExpr{SpineInterface.Call, JuMP.GenericVariableRef{Float64}}, JuMP.GenericAffExpr{SpineInterface.Call, JuMP.GenericVariableRef{Float64}}})
precompile(Tuple{typeof(Base.:(/)), JuMP.GenericAffExpr{SpineInterface.Call, JuMP.GenericVariableRef{Float64}}, Float64})
precompile(Tuple{typeof(SpineInterface._ratio_call), SpineInterface.Call, Float64})
precompile(Tuple{typeof(SpineInterface._args), Function, typeof(Base.:(/)), SpineInterface.Call})
precompile(Tuple{typeof(Base.iszero), Nothing})
precompile(Tuple{typeof(Base.:(==)), Nothing, Function})
precompile(Tuple{typeof(SpineInterface._sum_call), Array{SpineInterface.Call, 1}})
precompile(Tuple{typeof(Base.findall), SpineInterface.var"#66#75", Array{SpineInterface.Call, 1}})
precompile(Tuple{typeof(Base.getindex), Array{SpineInterface.Call, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.deleteat!), Array{SpineInterface.Call, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{SpineInterface.Call, 1}, SpineInterface.Call, Base.Generator{Array{SpineInterface.Call, 1}, SpineInterface.var"#69#78"}, Int64})
precompile(Tuple{typeof(Base.append!), Array{Any, 1}, Array{SpineInterface.Call, 1}})
precompile(Tuple{typeof(SpineInterface._final_sum_call), Array{Any, 1}})
precompile(Tuple{typeof(SpineInterface._final_sum_call), Array{SpineInterface.Call, 1}})
precompile(Tuple{typeof(SpineInterface._arg), typeof(Base.:(/)), SpineInterface.Call})
precompile(Tuple{typeof(SpineInterface._diff_call), SpineInterface.Call, SpineInterface.Call})
precompile(Tuple{typeof(SpineInterface._iszero), typeof(Base.:(/)), SpineInterface.Call})
precompile(Tuple{typeof(Base.:(==)), Function, SpineInterface.ParameterValue{Int64}})
precompile(Tuple{typeof(SpineInterface._args), Function, typeof(Base.:(*)), SpineInterface.Call})
precompile(Tuple{typeof(SpineInterface._arg), typeof(Base.:(+)), SpineInterface.Call})
precompile(Tuple{typeof(Base.reduce_empty), Base.MappingRF{typeof(Base.identity), typeof(Base.:(/))}, Type{Real}})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.identity), typeof(Base.:(/)), Base.IndexLinear, Array{Real, 1}})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Float64, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.reduce_empty), Base.MappingRF{typeof(Base.identity), typeof(Base.:(-))}, Type{Real}})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.identity), typeof(Base.:(-)), Base.IndexLinear, Array{Real, 1}})
precompile(Tuple{typeof(Base.:(-)), Float64, Int64})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.identity), typeof(Base.:(+)), Base.IndexLinear, Array{Real, 1}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Base.Dict{K, V} where V where K}, Base.Dict{NamedTuple{(:node, :stochastic_path, :t_before, :t_after), Tuple{SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice, SpineInterface.TimeSlice}}, JuMP.ConstraintRef{JuMP.GenericModel{Float64}, MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.EqualTo{Float64}}, JuMP.ScalarShape}}, Symbol})
precompile(Tuple{typeof(SpineOpt.add_constraint_nodal_balance!), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Iterators.Filter{F, I} where I where F}, SpineOpt.var"#1352#1360", Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1351#1354"{JuMP.GenericModel{Float64}, Base.Dict{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Base.Dict{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}, Base.Iterators.Filter{SpineOpt.var"#1352#1360", Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Base.Iterators.Filter{SpineOpt.var"#1352#1360", Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}}, SpineOpt.var"#1351#1354"{JuMP.GenericModel{Float64}, Base.Dict{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Base.Dict{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Iterators.Flatten{Base.Generator{Base.Iterators.Filter{SpineOpt.var"#1352#1360", Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}}, SpineOpt.var"#1351#1354"{JuMP.GenericModel{Float64}, Base.Dict{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Base.Dict{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}}}})
precompile(Tuple{SpineOpt.var"##node_injection_indices#1122", SpineInterface.Object, SpineInterface.Anything, SpineInterface.Anything, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, typeof(SpineOpt.node_injection_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1346#1355"{JuMP.GenericModel{Float64}, Base.Dict{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Base.Dict{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}, Array{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}})
precompile(Tuple{SpineOpt.var"#1346#1355"{JuMP.GenericModel{Float64}, Base.Dict{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Base.Dict{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}, NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}})
precompile(Tuple{Type{NamedTuple{(:node, :direction, :stochastic_scenario, :t), T} where T<:Tuple}, Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, typeof(SpineOpt.connection_flow_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{SpineOpt.var"##connection_flow_indices#1082", SpineInterface.Anything, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, typeof(SpineOpt.connection_flow_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:connection, :node, :direction, :temporal_block, :_compact), Tuple{SpineInterface.Anything, Array{SpineInterface.Object, 1}, SpineInterface.Object, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, Bool}}, SpineInterface.RelationshipClass})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{SpineInterface.Anything, 1}, SpineInterface.Anything, Base.Generator{Array{Symbol, 1}, SpineInterface.var"#208#214"{Base.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:connection, :node, :direction, :temporal_block), Tuple{SpineInterface.Anything, Array{SpineInterface.Object, 1}, SpineInterface.Object, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}}}}}}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Any, 1}, Base.Generator{Array{Symbol, 1}, SpineInterface.var"#208#214"{Base.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:connection, :node, :direction, :temporal_block), Tuple{SpineInterface.Anything, Array{SpineInterface.Object, 1}, SpineInterface.Object, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}}}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.get!), SpineInterface.var"#209#215"{Bool, Base.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:connection, :node, :direction, :temporal_block), Tuple{SpineInterface.Anything, Array{SpineInterface.Object, 1}, SpineInterface.Object, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}}}}, SpineInterface.RelationshipClass}, Base.Dict{Any, Any}, Tuple{SpineInterface.Anything, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}})
precompile(Tuple{SpineInterface.var"#cond#216"{Base.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:connection, :node, :direction, :temporal_block), Tuple{SpineInterface.Anything, Array{SpineInterface.Object, 1}, SpineInterface.Object, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}}}}}, NamedTuple{(:connection, :node, :direction, :temporal_block), NTuple{4, SpineInterface.Object}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1084#1085"{SpineInterface.Object, SpineInterface.TimeSlice, JuMP.GenericModel{Float64}}, Array{Any, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{Any, 1}, SpineOpt.var"#1084#1085"{SpineInterface.Object, SpineInterface.TimeSlice, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.unique), Base.Iterators.Flatten{Base.Generator{Array{Any, 1}, SpineOpt.var"#1084#1085"{SpineInterface.Object, SpineInterface.TimeSlice, JuMP.GenericModel{Float64}}}}})
precompile(Tuple{Type{Base.Iterators.Filter{F, I} where I where F}, SpineOpt.var"#1348#1357"{SpineInterface.Object}, Array{Any, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1347#1356"{Base.Dict{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}, Base.Iterators.Filter{SpineOpt.var"#1348#1357"{SpineInterface.Object}, Array{Any, 1}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:init,), Tuple{Int64}}, typeof(SpineOpt.expr_sum), Base.Generator{Base.Iterators.Filter{SpineOpt.var"#1348#1357"{SpineInterface.Object}, Array{Any, 1}}, SpineOpt.var"#1347#1356"{Base.Dict{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1084#1085"{SpineInterface.Object, SpineInterface.TimeSlice, JuMP.GenericModel{Float64}}, Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#1084#1085"{SpineInterface.Object, SpineInterface.TimeSlice, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.unique), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#1084#1085"{SpineInterface.Object, SpineInterface.TimeSlice, JuMP.GenericModel{Float64}}}}})
precompile(Tuple{SpineOpt.var"#1084#1085"{SpineInterface.Object, SpineInterface.TimeSlice, JuMP.GenericModel{Float64}}, NamedTuple{(:connection, :node, :direction, :temporal_block), NTuple{4, SpineInterface.Object}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#614#615"{SpineInterface.Object, JuMP.GenericModel{Float64}}, Array{NamedTuple{(:node, :t), Tuple{SpineInterface.Object, SpineInterface.TimeSlice}}, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{NamedTuple{(:node, :t), Tuple{SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#614#615"{SpineInterface.Object, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.unique), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{(:node, :t), Tuple{SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#614#615"{SpineInterface.Object, JuMP.GenericModel{Float64}}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#613#616"{SpineInterface.TimeSlice, SpineInterface.Object, SpineInterface.Object, JuMP.GenericModel{Float64}}, Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#613#616"{SpineInterface.TimeSlice, SpineInterface.Object, SpineInterface.Object, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#613#616"{SpineInterface.TimeSlice, SpineInterface.Object, SpineInterface.Object, JuMP.GenericModel{Float64}}}}, Tuple{}})
precompile(Tuple{SpineOpt.var"#613#616"{SpineInterface.TimeSlice, SpineInterface.Object, SpineInterface.Object, JuMP.GenericModel{Float64}}, NamedTuple{(:model, :stochastic_structure), Tuple{SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#612#617"{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice, SpineInterface.Object}, Array{Any, 1}})
precompile(Tuple{typeof(Base._unique_from), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{(:node, :t), Tuple{SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#614#615"{SpineInterface.Object, JuMP.GenericModel{Float64}}}}, Array{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, Base.Set{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}}, Tuple{Int64, Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#613#616"{SpineInterface.TimeSlice, SpineInterface.Object, SpineInterface.Object, JuMP.GenericModel{Float64}}}}, Tuple{Int64, Base.Generator{Array{Any, 1}, SpineOpt.var"#612#617"{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice, SpineInterface.Object}}, Int64}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{(:node, :t), Tuple{SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#614#615"{SpineInterface.Object, JuMP.GenericModel{Float64}}}}, Tuple{Int64, Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#613#616"{SpineInterface.TimeSlice, SpineInterface.Object, SpineInterface.Object, JuMP.GenericModel{Float64}}}}, Tuple{Int64, Base.Generator{Array{Any, 1}, SpineOpt.var"#612#617"{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice, SpineInterface.Object}}, Int64}}})
precompile(Tuple{typeof(Base._unique_from), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#1084#1085"{SpineInterface.Object, SpineInterface.TimeSlice, JuMP.GenericModel{Float64}}}}, Array{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, Base.Set{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}}, Tuple{Int64, Base.Generator{Array{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#1083#1086"{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}}, Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#1084#1085"{SpineInterface.Object, SpineInterface.TimeSlice, JuMP.GenericModel{Float64}}}}, Tuple{Int64, Base.Generator{Array{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#1083#1086"{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}}, Int64}})
precompile(Tuple{Type{Base.Iterators.Filter{F, I} where I where F}, SpineOpt.var"#1350#1359"{SpineInterface.Object}, Array{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1349#1358"{Base.Dict{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}, Base.Iterators.Filter{SpineOpt.var"#1350#1359"{SpineInterface.Object}, Array{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:init,), Tuple{Int64}}, typeof(SpineOpt.expr_sum), Base.Generator{Base.Iterators.Filter{SpineOpt.var"#1350#1359"{SpineInterface.Object}, Array{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}}, SpineOpt.var"#1349#1358"{Base.Dict{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}}})
precompile(Tuple{Type{NamedTuple{(:connection, :direction), T} where T<:Tuple}, Tuple{SpineInterface.Object, SpineInterface.Object}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:connection, :direction), Tuple{SpineInterface.Object, SpineInterface.Object}}, SpineInterface.RelationshipClass})
precompile(Tuple{typeof(Base.get!), SpineInterface.var"#209#215"{Bool, Base.Pairs{Symbol, SpineInterface.Object, Tuple{Symbol, Symbol}, NamedTuple{(:connection, :direction), Tuple{SpineInterface.Object, SpineInterface.Object}}}, SpineInterface.RelationshipClass}, Base.Dict{Any, Any}, Tuple{SpineInterface.Object, Nothing, SpineInterface.Object}})
precompile(Tuple{SpineInterface.var"#cond#216"{Base.Pairs{Symbol, SpineInterface.Object, Tuple{Symbol, Symbol}, NamedTuple{(:connection, :direction), Tuple{SpineInterface.Object, SpineInterface.Object}}}}, NamedTuple{(:connection, :node, :direction), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{typeof(SpineOpt._issubset), Array{SpineInterface.Object, 1}, Array{Any, 1}})
precompile(Tuple{typeof(SpineOpt.sense_constraint), JuMP.GenericModel{Float64}, JuMP.GenericAffExpr{Float64, JuMP.GenericVariableRef{Float64}}, typeof(Base.:(==)), Int64})
precompile(Tuple{Type{Pair{A, B} where B where A}, NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.ConstraintRef{JuMP.GenericModel{Float64}, MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.EqualTo{Float64}}, JuMP.ScalarShape}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}}, Type{JuMP.ConstraintRef{JuMP.GenericModel{Float64}, MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.EqualTo{Float64}}, JuMP.ScalarShape}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.ConstraintRef{JuMP.GenericModel{Float64}, MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.EqualTo{Float64}}, JuMP.ScalarShape}}, JuMP.ConstraintRef{JuMP.GenericModel{Float64}, MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.EqualTo{Float64}}, JuMP.ScalarShape}, NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.ConstraintRef{JuMP.GenericModel{Float64}, MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.EqualTo{Float64}}, JuMP.ScalarShape}}, Base.Iterators.Flatten{Base.Generator{Base.Iterators.Filter{SpineOpt.var"#1352#1360", Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}}, SpineOpt.var"#1351#1354"{JuMP.GenericModel{Float64}, Base.Dict{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Base.Dict{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}}}, Tuple{Int64, Base.Generator{Array{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#1346#1355"{JuMP.GenericModel{Float64}, Base.Dict{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Base.Dict{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}}, Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Flatten{Base.Generator{Base.Iterators.Filter{SpineOpt.var"#1352#1360", Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}}, SpineOpt.var"#1351#1354"{JuMP.GenericModel{Float64}, Base.Dict{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Base.Dict{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}}}, Tuple{Int64, Base.Generator{Array{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#1346#1355"{JuMP.GenericModel{Float64}, Base.Dict{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Base.Dict{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}}, Int64}})
precompile(Tuple{Type{Base.Iterators.Filter{F, I} where I where F}, SpineOpt.var"#1348#1357"{SpineInterface.Object}, Array{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1347#1356"{Base.Dict{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}, Base.Iterators.Filter{SpineOpt.var"#1348#1357"{SpineInterface.Object}, Array{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:init,), Tuple{Int64}}, typeof(SpineOpt.expr_sum), Base.Generator{Base.Iterators.Filter{SpineOpt.var"#1348#1357"{SpineInterface.Object}, Array{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}}, SpineOpt.var"#1347#1356"{Base.Dict{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}}})
precompile(Tuple{typeof(Base.hashindex), Tuple{SpineInterface.Anything, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}, Int64})
precompile(Tuple{typeof(Base.hashindex), Tuple{Tuple{}, NTuple{11, SpineInterface.Object}, SpineInterface.Object, SpineInterface.Object}, Int64})
precompile(Tuple{typeof(Base.hashindex), Tuple{Tuple{}, NTuple{11, SpineInterface.Object}, SpineInterface.Object, SpineInterface.Anything}, Int64})
precompile(Tuple{Type{Base.Iterators.Filter{F, I} where I where F}, SpineOpt.var"#1350#1359"{SpineInterface.Object}, Array{Any, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1349#1358"{Base.Dict{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}, Base.Iterators.Filter{SpineOpt.var"#1350#1359"{SpineInterface.Object}, Array{Any, 1}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:init,), Tuple{Int64}}, typeof(SpineOpt.expr_sum), Base.Generator{Base.Iterators.Filter{SpineOpt.var"#1350#1359"{SpineInterface.Object}, Array{Any, 1}}, SpineOpt.var"#1349#1358"{Base.Dict{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Base.Dict{K, V} where V where K}, Base.Dict{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.ConstraintRef{JuMP.GenericModel{Float64}, MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.EqualTo{Float64}}, JuMP.ScalarShape}}, Symbol})
precompile(Tuple{Type{NamedTuple{(:is_candidate, :has_ptdf), T} where T<:Tuple}, Tuple{Bool, Bool}})
precompile(Tuple{typeof(SpineOpt.add_constraint_candidate_connection_flow_ub!), JuMP.GenericModel{Float64}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:is_candidate, :has_ptdf), Tuple{Bool, Bool}}, SpineInterface.ObjectClass})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1557#1558"{JuMP.GenericModel{Float64}, Base.Dict{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Base.Dict{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, SpineOpt.var"#1557#1558"{JuMP.GenericModel{Float64}, Base.Dict{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Base.Dict{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Iterators.Flatten{Base.Generator{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, SpineOpt.var"#1557#1558"{JuMP.GenericModel{Float64}, Base.Dict{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Base.Dict{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}}}})
precompile(Tuple{typeof(SpineOpt.add_constraint_candidate_connection_flow_lb!), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{NamedTuple{(:connection,), T} where T<:Tuple}, Tuple{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:connection,), Tuple{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}}}, typeof(SpineOpt.connection_flow_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{SpineOpt.var"##connection_flow_indices#1082", Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, typeof(SpineOpt.connection_flow_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{NamedTuple{(:connection, :node, :direction, :temporal_block, :_compact), T} where T<:Tuple}, Tuple{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, SpineInterface.Anything, SpineInterface.Anything, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, Bool}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:connection, :node, :direction, :temporal_block, :_compact), Tuple{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, SpineInterface.Anything, SpineInterface.Anything, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, Bool}}, SpineInterface.RelationshipClass})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{}, 1}, Tuple{}, Base.Generator{Array{Symbol, 1}, SpineInterface.var"#208#214"{Base.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:connection, :node, :direction, :temporal_block), Tuple{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, SpineInterface.Anything, SpineInterface.Anything, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}}}}}}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Any, 1}, Base.Generator{Array{Symbol, 1}, SpineInterface.var"#208#214"{Base.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:connection, :node, :direction, :temporal_block), Tuple{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, SpineInterface.Anything, SpineInterface.Anything, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}}}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.get!), SpineInterface.var"#209#215"{Bool, Base.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:connection, :node, :direction, :temporal_block), Tuple{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, SpineInterface.Anything, SpineInterface.Anything, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}}}}, SpineInterface.RelationshipClass}, Base.Dict{Any, Any}, Tuple{Tuple{}, SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Object}})
precompile(Tuple{SpineInterface.var"#cond#216"{Base.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:connection, :node, :direction, :temporal_block), Tuple{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, SpineInterface.Anything, SpineInterface.Anything, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}}}}}, NamedTuple{(:connection, :node, :direction, :temporal_block), NTuple{4, SpineInterface.Object}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1569#1570"{JuMP.GenericModel{Float64}}, Array{Any, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{Any, 1}, SpineOpt.var"#1569#1570"{JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.unique), Base.Iterators.Flatten{Base.Generator{Array{Any, 1}, SpineOpt.var"#1569#1570"{JuMP.GenericModel{Float64}}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1560#1564"{JuMP.GenericModel{Float64}, SpineInterface._StartRef, Base.Dict{Any, Any}, Base.Dict{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Base.Dict{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}, Array{Any, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Array{Any, 1}, SpineOpt.var"#1560#1564"{JuMP.GenericModel{Float64}, SpineInterface._StartRef, Base.Dict{Any, Any}, Base.Dict{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Base.Dict{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}}})
precompile(Tuple{Type{NamedTuple{(:connection_monitored, :has_ptdf), T} where T<:Tuple}, Tuple{Bool, Bool}})
precompile(Tuple{typeof(SpineOpt.add_constraint_connection_intact_flow_ptdf!), JuMP.GenericModel{Float64}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:connection_monitored, :has_ptdf), Tuple{Bool, Bool}}, SpineInterface.ObjectClass})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1549#1550"{JuMP.GenericModel{Float64}}, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, SpineOpt.var"#1549#1550"{JuMP.GenericModel{Float64}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1520#1533"{JuMP.GenericModel{Float64}, Base.Dict{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Base.Dict{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Base.Dict{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}, Base.Iterators.Flatten{Base.Generator{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, SpineOpt.var"#1549#1550"{JuMP.GenericModel{Float64}}}}})
precompile(Tuple{Type{NamedTuple{(:is_boundary_node,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Base.Iterators.Flatten{Base.Generator{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, SpineOpt.var"#1549#1550"{JuMP.GenericModel{Float64}}}}, SpineOpt.var"#1520#1533"{JuMP.GenericModel{Float64}, Base.Dict{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Base.Dict{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Base.Dict{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}}})
precompile(Tuple{Type{NamedTuple{(:connection_monitored, :has_ptdf, :is_candidate), T} where T<:Tuple}, Tuple{Bool, Bool, Bool}})
precompile(Tuple{typeof(SpineOpt.add_constraint_connection_flow_intact_flow!), JuMP.GenericModel{Float64}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:connection_monitored, :has_ptdf, :is_candidate), Tuple{Bool, Bool, Bool}}, SpineInterface.ObjectClass})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1511#1512"{JuMP.GenericModel{Float64}}, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, SpineOpt.var"#1511#1512"{JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.unique), Base.Iterators.Flatten{Base.Generator{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, SpineOpt.var"#1511#1512"{JuMP.GenericModel{Float64}}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1498#1503"{JuMP.GenericModel{Float64}, Base.Dict{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Base.Dict{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}, Array{Any, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Array{Any, 1}, SpineOpt.var"#1498#1503"{JuMP.GenericModel{Float64}, Base.Dict{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Base.Dict{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}}})
precompile(Tuple{typeof(SpineOpt.add_constraint_connection_flow_lodf!), JuMP.GenericModel{Float64}})
precompile(Tuple{typeof(Base.get), Base.Dict{Any, Any}, SpineInterface.Object, Array{Any, 1}})
precompile(Tuple{Type{Base.Iterators.Filter{F, I} where I where F}, SpineOpt.var"#1587#1591", Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1586#1588"{JuMP.GenericModel{Float64}}, Base.Iterators.Filter{SpineOpt.var"#1587#1591", Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Base.Iterators.Filter{SpineOpt.var"#1587#1591", Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}}, SpineOpt.var"#1586#1588"{JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.unique), Base.Iterators.Flatten{Base.Generator{Base.Iterators.Filter{SpineOpt.var"#1587#1591", Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}}, SpineOpt.var"#1586#1588"{JuMP.GenericModel{Float64}}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1574#1575"{JuMP.GenericModel{Float64}, Base.Dict{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, SpineInterface._StartRef}, Array{Any, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Array{Any, 1}, SpineOpt.var"#1574#1575"{JuMP.GenericModel{Float64}, Base.Dict{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, SpineInterface._StartRef}}})
precompile(Tuple{typeof(SpineOpt.add_constraint_connection_flow_capacity!), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1468#1473"{JuMP.GenericModel{Float64}, SpineInterface._StartRef, Base.Dict{Any, Any}, Base.Dict{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}, Base.Iterators.Flatten{Base.Generator{Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SpineInterface.Parameter}}}, SpineOpt.var"#1479#1480"{JuMP.GenericModel{Float64}}}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Base.Iterators.Flatten{Base.Generator{Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SpineInterface.Parameter}}}, SpineOpt.var"#1479#1480"{JuMP.GenericModel{Float64}}}}, SpineOpt.var"#1468#1473"{JuMP.GenericModel{Float64}, SpineInterface._StartRef, Base.Dict{Any, Any}, Base.Dict{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}}})
precompile(Tuple{SpineInterface.var"#243#246"{SpineInterface.RelationshipClass, SpineInterface.Parameter}, NamedTuple{(:connection, :node, :direction), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{SpineOpt.var"#1479#1480"{JuMP.GenericModel{Float64}}, NamedTuple{(:connection, :node, :direction), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{SpineOpt.var"##connection_flow_indices#1082", SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Anything, SpineInterface.Anything, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, typeof(SpineOpt.connection_flow_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:connection, :node, :direction, :temporal_block, :_compact), Tuple{SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.Object, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, Bool}}, SpineInterface.RelationshipClass})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{SpineInterface.Object, 1}, SpineInterface.Object, Base.Generator{Array{Symbol, 1}, SpineInterface.var"#208#214"{Base.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:connection, :node, :direction, :temporal_block), Tuple{SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.Object, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}}}}}}, Int64})
precompile(Tuple{typeof(Base.get!), SpineInterface.var"#209#215"{Bool, Base.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:connection, :node, :direction, :temporal_block), Tuple{SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.Object, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}}}}, SpineInterface.RelationshipClass}, Base.Dict{Any, Any}, NTuple{4, SpineInterface.Object}})
precompile(Tuple{SpineInterface.var"#cond#216"{Base.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:connection, :node, :direction, :temporal_block), Tuple{SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.Object, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}}}}}, NamedTuple{(:connection, :node, :direction, :temporal_block), NTuple{4, SpineInterface.Object}}})
precompile(Tuple{SpineOpt.var"##connections_invested_available_indices#1092", SpineInterface.Object, SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, typeof(SpineOpt.connections_invested_available_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:connection, :temporal_block, :_compact), Tuple{Array{SpineInterface.Object, 1}, SpineInterface.Anything, Bool}}, SpineInterface.RelationshipClass})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{SpineInterface.Object, 1}, SpineInterface.Object, Base.Generator{Array{Symbol, 1}, SpineInterface.var"#208#214"{Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:connection, :temporal_block), Tuple{Array{SpineInterface.Object, 1}, SpineInterface.Anything}}}}}, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{SpineInterface.Object, 1}, SpineInterface.Anything, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Any, 1}, Base.Generator{Array{Symbol, 1}, SpineInterface.var"#208#214"{Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:connection, :temporal_block), Tuple{Array{SpineInterface.Object, 1}, SpineInterface.Anything}}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.get!), SpineInterface.var"#209#215"{Bool, Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:connection, :temporal_block), Tuple{Array{SpineInterface.Object, 1}, SpineInterface.Anything}}}, SpineInterface.RelationshipClass}, Base.Dict{Any, Any}, Tuple{SpineInterface.Object, SpineInterface.Anything}})
precompile(Tuple{typeof(Base.vcat), Array{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, Array{Any, 1}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.Iterators.Flatten{Base.Generator{Base.Dict{Any, Any}, SpineOpt.var"#1286#1288"{JuMP.GenericModel{Float64}}}}, SpineOpt.var"#1478#1481"{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{SpineOpt.var"#1478#1481"{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}, Tuple{SpineInterface.TimeSlice, Array{SpineInterface.Object, 1}}})
precompile(Tuple{SpineOpt.var"#1468#1473"{JuMP.GenericModel{Float64}, SpineInterface._StartRef, Base.Dict{Any, Any}, Base.Dict{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}, NamedTuple{(:connection, :node, :direction, :stochastic_path, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice}}})
precompile(Tuple{Type{NamedTuple{(:connection, :direction, :node, :stochastic_scenario, :t), T} where T<:Tuple}, Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, Array{SpineInterface.Object, 1}, Array{SpineInterface.TimeSlice, 1}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:connection, :direction, :node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, Array{SpineInterface.Object, 1}, Array{SpineInterface.TimeSlice, 1}}}, typeof(SpineOpt.connection_flow_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{SpineOpt.var"##connection_flow_indices#1082", SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, Array{SpineInterface.Object, 1}, Array{SpineInterface.TimeSlice, 1}, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, typeof(SpineOpt.connection_flow_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1084#1085"{Array{SpineInterface.Object, 1}, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}, Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#1084#1085"{Array{SpineInterface.Object, 1}, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.unique), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#1084#1085"{Array{SpineInterface.Object, 1}, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}}}})
precompile(Tuple{SpineOpt.var"#1084#1085"{Array{SpineInterface.Object, 1}, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}, NamedTuple{(:connection, :node, :direction, :temporal_block), NTuple{4, SpineInterface.Object}}})
precompile(Tuple{typeof(Base._unique_from), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#1084#1085"{Array{SpineInterface.Object, 1}, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}}}, Array{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, Base.Set{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}}, Tuple{Int64, Base.Generator{Array{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#1083#1086"{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}}, Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#1084#1085"{Array{SpineInterface.Object, 1}, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}}}, Tuple{Int64, Base.Generator{Array{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#1083#1086"{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}}, Int64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1469#1474"{Base.Dict{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}, Array{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:init,), Tuple{Int64}}, typeof(SpineOpt.expr_sum), Base.Generator{Array{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#1469#1474"{Base.Dict{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :analysis_time, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface._StartRef, SpineInterface.TimeSlice}}}})
precompile(Tuple{typeof(Base.getindex), SpineInterface.Parameter, NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :analysis_time, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface._StartRef, SpineInterface.TimeSlice}}})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{Symbol, Any}, Array{SpineInterface.Object, 1}, Symbol})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, Array{SpineInterface.Object, 1}})
precompile(Tuple{Type{NamedTuple{(:stochastic_scenario, :analysis_time, :t), T} where T<:Tuple}, Tuple{Array{SpineInterface.Object, 1}, SpineInterface._StartRef, SpineInterface.TimeSlice}})
precompile(Tuple{Type{SpineInterface.Call}, SpineInterface.ParameterValue{Int64}, NamedTuple{(:stochastic_scenario, :analysis_time, :t), Tuple{Array{SpineInterface.Object, 1}, SpineInterface._StartRef, SpineInterface.TimeSlice}}, Tuple{Symbol, NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :analysis_time, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface._StartRef, SpineInterface.TimeSlice}}}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:connection, :stochastic_scenario, :analysis_time, :t), Tuple{SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface._StartRef, SpineInterface.TimeSlice}}}})
precompile(Tuple{typeof(Base.getindex), SpineInterface.Parameter, NamedTuple{(:connection, :stochastic_scenario, :analysis_time, :t), Tuple{SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface._StartRef, SpineInterface.TimeSlice}}})
precompile(Tuple{Type{SpineInterface.Call}, SpineInterface.ParameterValue{Int64}, NamedTuple{(:stochastic_scenario, :analysis_time, :t), Tuple{Array{SpineInterface.Object, 1}, SpineInterface._StartRef, SpineInterface.TimeSlice}}, Tuple{Symbol, NamedTuple{(:connection, :stochastic_scenario, :analysis_time, :t), Tuple{SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface._StartRef, SpineInterface.TimeSlice}}}})
precompile(Tuple{typeof(MutableArithmetics.operate), typeof(Base.:(*)), SpineInterface.Call, SpineInterface.Call})
precompile(Tuple{typeof(SpineInterface._args), typeof(Base.:(*)), typeof(Base.:(*)), SpineInterface.Call})
precompile(Tuple{typeof(Base.vcat), Array{SpineInterface.Call, 1}, SpineInterface.Call})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:connection,), Tuple{SpineInterface.Object}}, SpineInterface.Parameter})
precompile(Tuple{typeof(MutableArithmetics.operate), typeof(Base.:(*)), SpineInterface.Call, Int64})
precompile(Tuple{typeof(Base.vcat), Array{SpineInterface.Call, 1}, Int64})
precompile(Tuple{typeof(MutableArithmetics.operate), typeof(Base.:(*)), SpineInterface.Call, Float64})
precompile(Tuple{typeof(Base.vcat), Array{Any, 1}, Float64})
precompile(Tuple{typeof(MutableArithmetics.operate!!), typeof(MutableArithmetics.sub_mul), JuMP.GenericAffExpr{Float64, JuMP.GenericVariableRef{Float64}}, SpineInterface.Call})
precompile(Tuple{Type{NamedTuple{(:connection, :node, :stochastic_scenario, :t), T} where T<:Tuple}, Tuple{SpineInterface.Object, SpineInterface.Object, Array{SpineInterface.Object, 1}, Array{SpineInterface.TimeSlice, 1}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:connection, :node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, Array{SpineInterface.Object, 1}, Array{SpineInterface.TimeSlice, 1}}}, typeof(SpineOpt.connection_flow_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{SpineOpt.var"##connection_flow_indices#1082", SpineInterface.Object, SpineInterface.Object, SpineInterface.Anything, Array{SpineInterface.Object, 1}, Array{SpineInterface.TimeSlice, 1}, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, typeof(SpineOpt.connection_flow_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:connection, :node, :direction, :temporal_block, :_compact), Tuple{SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.Anything, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, Bool}}, SpineInterface.RelationshipClass})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{SpineInterface.Object, 1}, SpineInterface.Object, Base.Generator{Array{Symbol, 1}, SpineInterface.var"#208#214"{Base.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:connection, :node, :direction, :temporal_block), Tuple{SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.Anything, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}}}}}}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Any, 1}, Base.Generator{Array{Symbol, 1}, SpineInterface.var"#208#214"{Base.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:connection, :node, :direction, :temporal_block), Tuple{SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.Anything, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}}}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.get!), SpineInterface.var"#209#215"{Bool, Base.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:connection, :node, :direction, :temporal_block), Tuple{SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.Anything, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}}}}, SpineInterface.RelationshipClass}, Base.Dict{Any, Any}, Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Anything, SpineInterface.Object}})
precompile(Tuple{SpineInterface.var"#cond#216"{Base.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:connection, :node, :direction, :temporal_block), Tuple{SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.Anything, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}}}}}, NamedTuple{(:connection, :node, :direction, :temporal_block), NTuple{4, SpineInterface.Object}}})
precompile(Tuple{Type{Base.Iterators.Filter{F, I} where I where F}, SpineOpt.var"#1472#1477"{SpineInterface.Object}, Array{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1471#1476"{Base.Dict{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}, Base.Iterators.Filter{SpineOpt.var"#1472#1477"{SpineInterface.Object}, Array{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:init,), Tuple{Int64}}, typeof(SpineOpt.expr_sum), Base.Generator{Base.Iterators.Filter{SpineOpt.var"#1472#1477"{SpineInterface.Object}, Array{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}}, SpineOpt.var"#1471#1476"{Base.Dict{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcast_shape), Tuple{}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{JuMP.NonlinearOperator{typeof(Base.:(&))}, Bool, Bool})
precompile(Tuple{typeof(JuMP.build_constraint), Function, JuMP.GenericAffExpr{SpineInterface.Call, JuMP.GenericVariableRef{Float64}}, JuMP.Nonpositives})
precompile(Tuple{typeof(JuMP.model_convert), JuMP.GenericModel{Float64}, JuMP.ScalarConstraint{JuMP.GenericAffExpr{SpineInterface.Call, JuMP.GenericVariableRef{Float64}}, SpineInterface._LessThanCall}})
precompile(Tuple{typeof(JuMP.add_constraint), JuMP.GenericModel{Float64}, JuMP.ScalarConstraint{JuMP.GenericAffExpr{SpineInterface.Call, JuMP.GenericVariableRef{Float64}}, SpineInterface._LessThanCall}, String})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:stochastic_scenario, :analysis_time, :t), Tuple{Array{SpineInterface.Object, 1}, SpineInterface._StartRef, SpineInterface.TimeSlice}}, SpineInterface.ParameterValue{Int64}, Function})
precompile(Tuple{Type{JuMP.ScalarConstraint{F, S} where S<:MathOptInterface.AbstractScalarSet where F<:Union{Number, JuMP.AbstractJuMPScalar}}, JuMP.GenericAffExpr{Float64, JuMP.GenericVariableRef{Float64}}, MathOptInterface.LessThan{Float64}})
precompile(Tuple{typeof(JuMP._moi_add_constraint), MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{HiGHS.Optimizer}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.GenericModel{Float64, MathOptInterface.Utilities.ObjectiveContainer{Float64}, MathOptInterface.Utilities.VariablesContainer{Float64}, MathOptInterface.Utilities.ModelFunctionConstraints{Float64}}}}, MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.LessThan{Float64}})
precompile(Tuple{Type{Pair{A, B} where B where A}, NamedTuple{(:connection, :node, :direction, :stochastic_path, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice}}, JuMP.ConstraintRef{JuMP.GenericModel{Float64}, MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.LessThan{Float64}}, JuMP.ScalarShape}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{NamedTuple{(:connection, :node, :direction, :stochastic_path, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice}}}, Type{JuMP.ConstraintRef{JuMP.GenericModel{Float64}, MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.LessThan{Float64}}, JuMP.ScalarShape}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{NamedTuple{(:connection, :node, :direction, :stochastic_path, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice}}, JuMP.ConstraintRef{JuMP.GenericModel{Float64}, MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.LessThan{Float64}}, JuMP.ScalarShape}}, JuMP.ConstraintRef{JuMP.GenericModel{Float64}, MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.LessThan{Float64}}, JuMP.ScalarShape}, NamedTuple{(:connection, :node, :direction, :stochastic_path, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{NamedTuple{(:connection, :node, :direction, :stochastic_path, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice}}, JuMP.ConstraintRef{JuMP.GenericModel{Float64}, MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.LessThan{Float64}}, JuMP.ScalarShape}}, Base.Generator{Base.Iterators.Flatten{Base.Generator{Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SpineInterface.Parameter}}}, SpineOpt.var"#1479#1480"{JuMP.GenericModel{Float64}}}}, SpineOpt.var"#1468#1473"{JuMP.GenericModel{Float64}, SpineInterface._StartRef, Base.Dict{Any, Any}, Base.Dict{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}}, Tuple{Tuple{Int64, Base.Generator{Base.Iterators.Filter{SpineInterface.var"#243#246"{SpineInterface.RelationshipClass, SpineInterface.Parameter}, Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}}, typeof(Base.identity)}, Int64}, Base.Generator{Base.Iterators.Flatten{Base.Generator{Base.Dict{Any, Any}, SpineOpt.var"#1286#1288"{JuMP.GenericModel{Float64}}}}, SpineOpt.var"#1478#1481"{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}}, Tuple{Int64, Base.Generator{Array{Array{SpineInterface.Object, 1}, 1}, SpineOpt.var"#1285#1289"{Base.Set{SpineInterface.Object}, SpineInterface.TimeSlice}}, Int64}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Flatten{Base.Generator{Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SpineInterface.Parameter}}}, SpineOpt.var"#1479#1480"{JuMP.GenericModel{Float64}}}}, Tuple{Tuple{Int64, Base.Generator{Base.Iterators.Filter{SpineInterface.var"#243#246"{SpineInterface.RelationshipClass, SpineInterface.Parameter}, Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}}, typeof(Base.identity)}, Int64}, Base.Generator{Base.Iterators.Flatten{Base.Generator{Base.Dict{Any, Any}, SpineOpt.var"#1286#1288"{JuMP.GenericModel{Float64}}}}, SpineOpt.var"#1478#1481"{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}}, Tuple{Int64, Base.Generator{Array{Array{SpineInterface.Object, 1}, 1}, SpineOpt.var"#1285#1289"{Base.Set{SpineInterface.Object}, SpineInterface.TimeSlice}}, Int64}}})
precompile(Tuple{Type{SpineInterface.Call}, SpineInterface.ParameterValue{Float64}, NamedTuple{(:stochastic_scenario, :analysis_time, :t), Tuple{Array{SpineInterface.Object, 1}, SpineInterface._StartRef, SpineInterface.TimeSlice}}, Tuple{Symbol, NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :analysis_time, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface._StartRef, SpineInterface.TimeSlice}}}})
precompile(Tuple{typeof(SpineInterface._args), Function, SpineInterface.ParameterValue{Float64}, SpineInterface.Call})
precompile(Tuple{typeof(SpineInterface._do_realize), SpineInterface.ParameterValue{Float64}, SpineInterface.Call, Function})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:stochastic_scenario, :analysis_time, :t), Tuple{Array{SpineInterface.Object, 1}, SpineInterface._StartRef, SpineInterface.TimeSlice}}, SpineInterface.ParameterValue{Float64}, Function})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Base.Dict{K, V} where V where K}, Base.Dict{NamedTuple{(:connection, :node, :direction, :stochastic_path, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice}}, JuMP.ConstraintRef{JuMP.GenericModel{Float64}, MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.LessThan{Float64}}, JuMP.ScalarShape}}, Symbol})
precompile(Tuple{typeof(SpineOpt.add_constraint_connection_intact_flow_capacity!), JuMP.GenericModel{Float64}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:connection,), Tuple{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}}}, typeof(SpineInterface.indices), SpineInterface.Parameter})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1493#1494"{JuMP.GenericModel{Float64}}, Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, Tuple{Symbol}, NamedTuple{(:connection,), Tuple{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}}}}, SpineInterface.Parameter}}}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, Tuple{Symbol}, NamedTuple{(:connection,), Tuple{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}}}}, SpineInterface.Parameter}}}, SpineOpt.var"#1493#1494"{JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:connection,), Tuple{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}}}}})
precompile(Tuple{typeof(Base.unique), Base.Iterators.Flatten{Base.Generator{Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, Tuple{Symbol}, NamedTuple{(:connection,), Tuple{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}}}}, SpineInterface.Parameter}}}, SpineOpt.var"#1493#1494"{JuMP.GenericModel{Float64}}}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{}, 1}, Tuple{}, Base.Generator{Array{Symbol, 1}, SpineInterface.var"#208#214"{Base.Pairs{Symbol, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, Tuple{Symbol}, NamedTuple{(:connection,), Tuple{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}}}}}}, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Tuple{}, 1}, Nothing, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Union{Nothing, Tuple{}}, 1}, Base.Generator{Array{Symbol, 1}, SpineInterface.var"#208#214"{Base.Pairs{Symbol, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, Tuple{Symbol}, NamedTuple{(:connection,), Tuple{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}}}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.get!), SpineInterface.var"#209#215"{Bool, Base.Pairs{Symbol, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, Tuple{Symbol}, NamedTuple{(:connection,), Tuple{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}}}}, SpineInterface.RelationshipClass}, Base.Dict{Any, Any}, Tuple{Tuple{}, Nothing, Nothing}})
precompile(Tuple{SpineInterface.var"#cond#216"{Base.Pairs{Symbol, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, Tuple{Symbol}, NamedTuple{(:connection,), Tuple{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}}}}}, NamedTuple{(:connection, :node, :direction), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1484#1488"{JuMP.GenericModel{Float64}, SpineInterface._StartRef, Base.Dict{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}, Array{Any, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Array{Any, 1}, SpineOpt.var"#1484#1488"{JuMP.GenericModel{Float64}, SpineInterface._StartRef, Base.Dict{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}}})
precompile(Tuple{typeof(SpineOpt.add_constraint_unit_flow_capacity!), JuMP.GenericModel{Float64}})
precompile(Tuple{SpineOpt.var"#1307#1308"{JuMP.GenericModel{Float64}}, NamedTuple{(:unit, :node, :direction), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{typeof(Base.vcat), Array{NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, Array{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.Iterators.Flatten{Base.Generator{Base.Dict{Any, Any}, SpineOpt.var"#1286#1288"{JuMP.GenericModel{Float64}}}}, SpineOpt.var"#1306#1309"{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{SpineOpt.var"#1306#1309"{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}, Tuple{SpineInterface.TimeSlice, Array{SpineInterface.Object, 1}}})
precompile(Tuple{typeof(Base.getindex), Type{NamedTuple{(:unit, :node, :direction, :stochastic_path, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice}}}, NamedTuple{(:unit, :node, :direction, :stochastic_path, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice}}})
precompile(Tuple{Type{Base.Set{NamedTuple{(:unit, :node, :direction, :stochastic_path, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice}}}}, Tuple{NamedTuple{(:unit, :node, :direction, :stochastic_path, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice}}}})
precompile(Tuple{typeof(Base._unique_from), Base.Iterators.Flatten{Base.Generator{Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SpineInterface.Parameter}}}, SpineOpt.var"#1307#1308"{JuMP.GenericModel{Float64}}}}, Array{NamedTuple{(:unit, :node, :direction, :stochastic_path, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice}}, 1}, Base.Set{NamedTuple{(:unit, :node, :direction, :stochastic_path, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice}}}, Tuple{Tuple{Int64, Base.Generator{Base.Iterators.Filter{SpineInterface.var"#243#246"{SpineInterface.RelationshipClass, SpineInterface.Parameter}, Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}}, typeof(Base.identity)}, Int64}, Base.Generator{Base.Iterators.Flatten{Base.Generator{Base.Dict{Any, Any}, SpineOpt.var"#1286#1288"{JuMP.GenericModel{Float64}}}}, SpineOpt.var"#1306#1309"{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}}, Tuple{Int64, Base.Generator{Array{Array{SpineInterface.Object, 1}, 1}, SpineOpt.var"#1285#1289"{Base.Set{SpineInterface.Object}, SpineInterface.TimeSlice}}, Int64}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Flatten{Base.Generator{Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SpineInterface.Parameter}}}, SpineOpt.var"#1307#1308"{JuMP.GenericModel{Float64}}}}, Tuple{Tuple{Int64, Base.Generator{Base.Iterators.Filter{SpineInterface.var"#243#246"{SpineInterface.RelationshipClass, SpineInterface.Parameter}, Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}}, typeof(Base.identity)}, Int64}, Base.Generator{Base.Iterators.Flatten{Base.Generator{Base.Dict{Any, Any}, SpineOpt.var"#1286#1288"{JuMP.GenericModel{Float64}}}}, SpineOpt.var"#1306#1309"{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}}, Tuple{Int64, Base.Generator{Array{Array{SpineInterface.Object, 1}, 1}, SpineOpt.var"#1285#1289"{Base.Set{SpineInterface.Object}, SpineInterface.TimeSlice}}, Int64}}})
precompile(Tuple{typeof(Base.in!), NamedTuple{(:unit, :node, :direction, :stochastic_path, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice}}, Base.Set{NamedTuple{(:unit, :node, :direction, :stochastic_path, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice}}}})
precompile(Tuple{typeof(Base.push!), Array{NamedTuple{(:unit, :node, :direction, :stochastic_path, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice}}, 1}, NamedTuple{(:unit, :node, :direction, :stochastic_path, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1298#1302"{JuMP.GenericModel{Float64}, SpineInterface._StartRef, Base.Dict{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Base.Dict{NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}, Array{NamedTuple{(:unit, :node, :direction, :stochastic_path, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice}}, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Array{NamedTuple{(:unit, :node, :direction, :stochastic_path, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#1298#1302"{JuMP.GenericModel{Float64}, SpineInterface._StartRef, Base.Dict{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Base.Dict{NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}}})
precompile(Tuple{Type{Base.Iterators.Filter{F, I} where I where F}, SpineOpt.var"#1300#1304", Array{NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1299#1303"{Base.Dict{NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}, Base.Iterators.Filter{SpineOpt.var"#1300#1304", Array{NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:init,), Tuple{Int64}}, typeof(SpineOpt.expr_sum), Base.Generator{Base.Iterators.Filter{SpineOpt.var"#1300#1304", Array{NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}}, SpineOpt.var"#1299#1303"{Base.Dict{NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1301#1305"{SpineInterface.TimeSlice, SpineInterface.Object, SpineInterface.Object, SpineInterface._StartRef, Base.Dict{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}, Array{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:init,), Tuple{Int64}}, typeof(SpineOpt.expr_sum), Base.Generator{Array{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#1301#1305"{SpineInterface.TimeSlice, SpineInterface.Object, SpineInterface.Object, SpineInterface._StartRef, Base.Dict{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:unit, :stochastic_scenario, :analysis_time, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface._StartRef, SpineInterface.TimeSlice}}}})
precompile(Tuple{typeof(Base.getindex), SpineInterface.Parameter, NamedTuple{(:unit, :stochastic_scenario, :analysis_time, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface._StartRef, SpineInterface.TimeSlice}}})
precompile(Tuple{Type{SpineInterface.Call}, SpineInterface.ParameterValue{Int64}, NamedTuple{(:stochastic_scenario, :analysis_time, :t), Tuple{SpineInterface.Object, SpineInterface._StartRef, SpineInterface.TimeSlice}}, Tuple{Symbol, NamedTuple{(:unit, :stochastic_scenario, :analysis_time, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface._StartRef, SpineInterface.TimeSlice}}}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :analysis_time, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface._StartRef, SpineInterface.TimeSlice}}}})
precompile(Tuple{typeof(Base.getindex), SpineInterface.Parameter, NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :analysis_time, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface._StartRef, SpineInterface.TimeSlice}}})
precompile(Tuple{Type{SpineInterface.Call}, SpineInterface.ParameterValue{Int64}, NamedTuple{(:stochastic_scenario, :analysis_time, :t), Tuple{SpineInterface.Object, SpineInterface._StartRef, SpineInterface.TimeSlice}}, Tuple{Symbol, NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :analysis_time, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface._StartRef, SpineInterface.TimeSlice}}}})
precompile(Tuple{typeof(Base.:(*)), JuMP.GenericVariableRef{Float64}, Float64, SpineInterface.Call, SpineInterface.Call, SpineInterface.Call})
precompile(Tuple{typeof(Base.vcat), SpineInterface.Call, Array{Any, 1}})
precompile(Tuple{Type{Pair{A, B} where B where A}, NamedTuple{(:unit, :node, :direction, :stochastic_path, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice}}, JuMP.ConstraintRef{JuMP.GenericModel{Float64}, MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.LessThan{Float64}}, JuMP.ScalarShape}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{NamedTuple{(:unit, :node, :direction, :stochastic_path, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice}}}, Type{JuMP.ConstraintRef{JuMP.GenericModel{Float64}, MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.LessThan{Float64}}, JuMP.ScalarShape}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{NamedTuple{(:unit, :node, :direction, :stochastic_path, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice}}, JuMP.ConstraintRef{JuMP.GenericModel{Float64}, MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.LessThan{Float64}}, JuMP.ScalarShape}}, JuMP.ConstraintRef{JuMP.GenericModel{Float64}, MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.LessThan{Float64}}, JuMP.ScalarShape}, NamedTuple{(:unit, :node, :direction, :stochastic_path, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{NamedTuple{(:unit, :node, :direction, :stochastic_path, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice}}, JuMP.ConstraintRef{JuMP.GenericModel{Float64}, MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.LessThan{Float64}}, JuMP.ScalarShape}}, Base.Generator{Array{NamedTuple{(:unit, :node, :direction, :stochastic_path, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#1298#1302"{JuMP.GenericModel{Float64}, SpineInterface._StartRef, Base.Dict{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Base.Dict{NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Base.Dict{K, V} where V where K}, Base.Dict{NamedTuple{(:unit, :node, :direction, :stochastic_path, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice}}, JuMP.ConstraintRef{JuMP.GenericModel{Float64}, MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.LessThan{Float64}}, JuMP.ScalarShape}}, Symbol})
precompile(Tuple{typeof(SpineOpt.add_constraint_connections_invested_available!), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1594#1595"{JuMP.GenericModel{Float64}, SpineInterface._StartRef, Base.Dict{Any, Any}}, Array{Any, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Array{Any, 1}, SpineOpt.var"#1594#1595"{JuMP.GenericModel{Float64}, SpineInterface._StartRef, Base.Dict{Any, Any}}}})
precompile(Tuple{typeof(SpineOpt.add_constraint_connection_lifetime!), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1608#1610"{JuMP.GenericModel{Float64}, Base.Dict{Any, Any}, Base.Dict{Any, Any}}, Array{Any, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Array{Any, 1}, SpineOpt.var"#1608#1610"{JuMP.GenericModel{Float64}, Base.Dict{Any, Any}, Base.Dict{Any, Any}}}})
precompile(Tuple{typeof(SpineOpt.add_constraint_connections_invested_transition!), JuMP.GenericModel{Float64}})
precompile(Tuple{SpineOpt.var"##connection_investment_dynamic_time_indices#522", SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, typeof(SpineOpt.connection_investment_dynamic_time_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{SpineOpt.var"##connection_investment_time_indices#501", SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, typeof(SpineOpt.connection_investment_time_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Iterators.Filter{F, I} where I where F}, SpineOpt.var"#504#507"{JuMP.GenericModel{Float64}}, Array{Any, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#503#505"{SpineInterface.Anything, JuMP.GenericModel{Float64}}, Base.Iterators.Filter{SpineOpt.var"#504#507"{JuMP.GenericModel{Float64}}, Array{Any, 1}}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Base.Iterators.Filter{SpineOpt.var"#504#507"{JuMP.GenericModel{Float64}}, Array{Any, 1}}, SpineOpt.var"#503#505"{SpineInterface.Anything, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.unique), Base.Iterators.Flatten{Base.Generator{Base.Iterators.Filter{SpineOpt.var"#504#507"{JuMP.GenericModel{Float64}}, Array{Any, 1}}, SpineOpt.var"#503#505"{SpineInterface.Anything, JuMP.GenericModel{Float64}}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#525#526"{SpineInterface.Anything, JuMP.GenericModel{Float64}}, Array{Any, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{Any, 1}, SpineOpt.var"#525#526"{SpineInterface.Anything, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.unique), Base.Iterators.Flatten{Base.Generator{Array{Any, 1}, SpineOpt.var"#525#526"{SpineInterface.Anything, JuMP.GenericModel{Float64}}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1603#1604"{JuMP.GenericModel{Float64}}, Array{Any, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{Any, 1}, SpineOpt.var"#1603#1604"{JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.unique), Base.Iterators.Flatten{Base.Generator{Array{Any, 1}, SpineOpt.var"#1603#1604"{JuMP.GenericModel{Float64}}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1596#1599"{JuMP.GenericModel{Float64}, Base.Dict{Any, Any}, Base.Dict{Any, Any}, Base.Dict{Any, Any}}, Array{Any, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Array{Any, 1}, SpineOpt.var"#1596#1599"{JuMP.GenericModel{Float64}, Base.Dict{Any, Any}, Base.Dict{Any, Any}, Base.Dict{Any, Any}}}})
precompile(Tuple{typeof(SpineOpt.add_constraint_storages_invested_available!), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1620#1621"{JuMP.GenericModel{Float64}, SpineInterface._StartRef, Base.Dict{Any, Any}}, Array{Any, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Array{Any, 1}, SpineOpt.var"#1620#1621"{JuMP.GenericModel{Float64}, SpineInterface._StartRef, Base.Dict{Any, Any}}}})
precompile(Tuple{typeof(SpineOpt.add_constraint_storage_lifetime!), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1634#1636"{JuMP.GenericModel{Float64}, Base.Dict{Any, Any}, Base.Dict{Any, Any}}, Array{Any, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Array{Any, 1}, SpineOpt.var"#1634#1636"{JuMP.GenericModel{Float64}, Base.Dict{Any, Any}, Base.Dict{Any, Any}}}})
precompile(Tuple{typeof(SpineOpt.add_constraint_storages_invested_transition!), JuMP.GenericModel{Float64}})
precompile(Tuple{SpineOpt.var"##node_investment_dynamic_time_indices#529", SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, typeof(SpineOpt.node_investment_dynamic_time_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{SpineOpt.var"##node_investment_time_indices#508", SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, typeof(SpineOpt.node_investment_time_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Iterators.Filter{F, I} where I where F}, SpineOpt.var"#511#514"{JuMP.GenericModel{Float64}}, Array{Any, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#510#512"{SpineInterface.Anything, JuMP.GenericModel{Float64}}, Base.Iterators.Filter{SpineOpt.var"#511#514"{JuMP.GenericModel{Float64}}, Array{Any, 1}}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Base.Iterators.Filter{SpineOpt.var"#511#514"{JuMP.GenericModel{Float64}}, Array{Any, 1}}, SpineOpt.var"#510#512"{SpineInterface.Anything, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.unique), Base.Iterators.Flatten{Base.Generator{Base.Iterators.Filter{SpineOpt.var"#511#514"{JuMP.GenericModel{Float64}}, Array{Any, 1}}, SpineOpt.var"#510#512"{SpineInterface.Anything, JuMP.GenericModel{Float64}}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#532#533"{SpineInterface.Anything, JuMP.GenericModel{Float64}}, Array{Any, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{Any, 1}, SpineOpt.var"#532#533"{SpineInterface.Anything, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.unique), Base.Iterators.Flatten{Base.Generator{Array{Any, 1}, SpineOpt.var"#532#533"{SpineInterface.Anything, JuMP.GenericModel{Float64}}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1629#1630"{JuMP.GenericModel{Float64}}, Array{Any, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{Any, 1}, SpineOpt.var"#1629#1630"{JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.unique), Base.Iterators.Flatten{Base.Generator{Array{Any, 1}, SpineOpt.var"#1629#1630"{JuMP.GenericModel{Float64}}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1622#1625"{JuMP.GenericModel{Float64}, Base.Dict{Any, Any}, Base.Dict{Any, Any}, Base.Dict{Any, Any}}, Array{Any, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Array{Any, 1}, SpineOpt.var"#1622#1625"{JuMP.GenericModel{Float64}, Base.Dict{Any, Any}, Base.Dict{Any, Any}, Base.Dict{Any, Any}}}})
precompile(Tuple{typeof(SpineOpt.add_constraint_operating_point_bounds!), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Iterators.Filter{F, I} where I where F}, SpineOpt.var"#1320#1323", Array{Any, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1319#1321"{JuMP.GenericModel{Float64}}, Base.Iterators.Filter{SpineOpt.var"#1320#1323", Array{Any, 1}}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Base.Iterators.Filter{SpineOpt.var"#1320#1323", Array{Any, 1}}, SpineOpt.var"#1319#1321"{JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.unique), Base.Iterators.Flatten{Base.Generator{Base.Iterators.Filter{SpineOpt.var"#1320#1323", Array{Any, 1}}, SpineOpt.var"#1319#1321"{JuMP.GenericModel{Float64}}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1312#1315"{JuMP.GenericModel{Float64}, Base.Dict{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Base.Dict{Any, Any}}, Array{Any, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Array{Any, 1}, SpineOpt.var"#1312#1315"{JuMP.GenericModel{Float64}, Base.Dict{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Base.Dict{Any, Any}}}})
precompile(Tuple{typeof(SpineOpt.add_constraint_operating_point_rank!), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Iterators.Filter{F, I} where I where F}, SpineOpt.var"#1325#1327", Array{Any, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1324#1326"{JuMP.GenericModel{Float64}, Base.Dict{Any, Any}}, Base.Iterators.Filter{SpineOpt.var"#1325#1327", Array{Any, 1}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Base.Iterators.Filter{SpineOpt.var"#1325#1327", Array{Any, 1}}, SpineOpt.var"#1324#1326"{JuMP.GenericModel{Float64}, Base.Dict{Any, Any}}}})
precompile(Tuple{typeof(SpineOpt.add_constraint_unit_flow_op_bounds!), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1329#1330"{JuMP.GenericModel{Float64}, SpineInterface._StartRef, Base.Dict{Any, Any}, Base.Dict{Any, Any}, Base.Dict{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}, Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SpineInterface.Parameter}}}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SpineInterface.Parameter}}}, SpineOpt.var"#1329#1330"{JuMP.GenericModel{Float64}, SpineInterface._StartRef, Base.Dict{Any, Any}, Base.Dict{Any, Any}, Base.Dict{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Iterators.Flatten{Base.Generator{Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SpineInterface.Parameter}}}, SpineOpt.var"#1329#1330"{JuMP.GenericModel{Float64}, SpineInterface._StartRef, Base.Dict{Any, Any}, Base.Dict{Any, Any}, Base.Dict{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}}}})
precompile(Tuple{SpineOpt.var"#1329#1330"{JuMP.GenericModel{Float64}, SpineInterface._StartRef, Base.Dict{Any, Any}, Base.Dict{Any, Any}, Base.Dict{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}, NamedTuple{(:unit, :node, :direction), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{SpineOpt.var"##unit_flow_op_indices#1068", SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, typeof(SpineOpt.unit_flow_op_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1328#1331"{JuMP.GenericModel{Float64}, SpineInterface._StartRef, Base.Dict{Any, Any}, Base.Dict{Any, Any}, Base.Dict{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}, Array{Any, 1}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.Iterators.Filter{SpineInterface.var"#243#246"{SpineInterface.RelationshipClass, SpineInterface.Parameter}, Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}}, typeof(Base.identity)}, Int64})
precompile(Tuple{typeof(SpineOpt.add_constraint_unit_flow_op_rank!), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1334#1336"{JuMP.GenericModel{Float64}, SpineInterface._StartRef, Base.Dict{Any, Any}, Base.Dict{Any, Any}}, Base.Iterators.Filter{SpineOpt.var"#1335#1339", Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SpineInterface.Parameter}}}}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Base.Iterators.Filter{SpineOpt.var"#1335#1339", Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SpineInterface.Parameter}}}}, SpineOpt.var"#1334#1336"{JuMP.GenericModel{Float64}, SpineInterface._StartRef, Base.Dict{Any, Any}, Base.Dict{Any, Any}}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Iterators.Flatten{Base.Generator{Base.Iterators.Filter{SpineOpt.var"#1335#1339", Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SpineInterface.Parameter}}}}, SpineOpt.var"#1334#1336"{JuMP.GenericModel{Float64}, SpineInterface._StartRef, Base.Dict{Any, Any}, Base.Dict{Any, Any}}}}})
precompile(Tuple{SpineOpt.var"#1335#1339", NamedTuple{(:unit, :node, :direction), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:unit, :node, :direction), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:unit, :node, :direction, :_default), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, Bool}}, SpineInterface.Parameter})
precompile(Tuple{typeof(SpineInterface._get), Base.Dict{Symbol, SpineInterface.ParameterValue{T} where T}, Symbol, Base.Dict{Symbol, SpineInterface.ParameterValue{T} where T}, Bool})
precompile(Tuple{typeof(SpineOpt.add_constraint_unit_flow_op_sum!), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1342#1343"{JuMP.GenericModel{Float64}, Base.Dict{NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Base.Dict{Any, Any}}, Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SpineInterface.Parameter}}}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SpineInterface.Parameter}}}, SpineOpt.var"#1342#1343"{JuMP.GenericModel{Float64}, Base.Dict{NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Base.Dict{Any, Any}}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Iterators.Flatten{Base.Generator{Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SpineInterface.Parameter}}}, SpineOpt.var"#1342#1343"{JuMP.GenericModel{Float64}, Base.Dict{NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Base.Dict{Any, Any}}}}})
precompile(Tuple{typeof(SpineOpt.add_constraint_fix_ratio_out_in_unit_flow!), JuMP.GenericModel{Float64}})
precompile(Tuple{typeof(SpineOpt.add_constraint_ratio_unit_flow!), JuMP.GenericModel{Float64}, SpineInterface.Parameter, SpineInterface.Parameter, Function, SpineInterface.Object, SpineInterface.Object})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1422#1426"{JuMP.GenericModel{Float64}, SpineInterface.Parameter, SpineInterface.Parameter, typeof(Base.:(==)), SpineInterface.Object, SpineInterface.Object, SpineInterface._StartRef, Base.Dict{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Base.Dict{NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}, Array{Any, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Array{Any, 1}, SpineOpt.var"#1422#1426"{JuMP.GenericModel{Float64}, SpineInterface.Parameter, SpineInterface.Parameter, typeof(Base.:(==)), SpineInterface.Object, SpineInterface.Object, SpineInterface._StartRef, Base.Dict{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Base.Dict{NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}}})
precompile(Tuple{typeof(SpineOpt.add_constraint_max_ratio_out_in_unit_flow!), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1422#1426"{JuMP.GenericModel{Float64}, SpineInterface.Parameter, SpineInterface.Parameter, typeof(Base.:(<=)), SpineInterface.Object, SpineInterface.Object, SpineInterface._StartRef, Base.Dict{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Base.Dict{NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}, Array{Any, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Array{Any, 1}, SpineOpt.var"#1422#1426"{JuMP.GenericModel{Float64}, SpineInterface.Parameter, SpineInterface.Parameter, typeof(Base.:(<=)), SpineInterface.Object, SpineInterface.Object, SpineInterface._StartRef, Base.Dict{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Base.Dict{NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}}})
precompile(Tuple{typeof(SpineOpt.add_constraint_min_ratio_out_in_unit_flow!), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1422#1426"{JuMP.GenericModel{Float64}, SpineInterface.Parameter, SpineInterface.Parameter, typeof(Base.:(>=)), SpineInterface.Object, SpineInterface.Object, SpineInterface._StartRef, Base.Dict{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Base.Dict{NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}, Array{Any, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Array{Any, 1}, SpineOpt.var"#1422#1426"{JuMP.GenericModel{Float64}, SpineInterface.Parameter, SpineInterface.Parameter, typeof(Base.:(>=)), SpineInterface.Object, SpineInterface.Object, SpineInterface._StartRef, Base.Dict{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Base.Dict{NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}}})
precompile(Tuple{typeof(SpineOpt.add_constraint_fix_ratio_out_out_unit_flow!), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Int64}, Float64})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Int64, String, Vararg{String}})
precompile(Tuple{typeof(SpineOpt.add_constraint_max_ratio_out_out_unit_flow!), JuMP.GenericModel{Float64}})
precompile(Tuple{typeof(SpineOpt.add_constraint_min_ratio_out_out_unit_flow!), JuMP.GenericModel{Float64}})
precompile(Tuple{typeof(SpineOpt.add_constraint_fix_ratio_in_in_unit_flow!), JuMP.GenericModel{Float64}})
precompile(Tuple{typeof(SpineOpt.add_constraint_max_ratio_in_in_unit_flow!), JuMP.GenericModel{Float64}})
precompile(Tuple{typeof(SpineOpt.add_constraint_min_ratio_in_in_unit_flow!), JuMP.GenericModel{Float64}})
precompile(Tuple{typeof(SpineOpt.add_constraint_fix_ratio_in_out_unit_flow!), JuMP.GenericModel{Float64}})
precompile(Tuple{typeof(SpineOpt.add_constraint_max_ratio_in_out_unit_flow!), JuMP.GenericModel{Float64}})
precompile(Tuple{typeof(SpineOpt.add_constraint_min_ratio_in_out_unit_flow!), JuMP.GenericModel{Float64}})
precompile(Tuple{typeof(SpineOpt.add_constraint_ratio_out_in_connection_intact_flow!), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1462#1463"{JuMP.GenericModel{Float64}}, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, SpineOpt.var"#1462#1463"{JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.unique), Base.Iterators.Flatten{Base.Generator{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, SpineOpt.var"#1462#1463"{JuMP.GenericModel{Float64}}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1454#1457"{JuMP.GenericModel{Float64}, Base.Dict{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}, Array{Any, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Array{Any, 1}, SpineOpt.var"#1454#1457"{JuMP.GenericModel{Float64}, Base.Dict{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}}})
precompile(Tuple{typeof(SpineOpt.add_constraint_fix_ratio_out_in_connection_flow!), JuMP.GenericModel{Float64}})
precompile(Tuple{typeof(SpineOpt.add_constraint_ratio_out_in_connection_flow!), JuMP.GenericModel{Float64}, SpineInterface.Parameter, Function})
precompile(Tuple{SpineInterface.var"#243#246"{SpineInterface.RelationshipClass, SpineInterface.Parameter}, NamedTuple{(:connection, :node1, :node2), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{SpineOpt.var"#1446#1447"{JuMP.GenericModel{Float64}}, NamedTuple{(:connection, :node1, :node2), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{Type{NamedTuple{(:connection, :node, :direction), T} where T<:Tuple}, Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Flatten{Base.Generator{Base.Iterators.Flatten{Base.Generator{Base.Dict{Any, Any}, SpineOpt.var"#1286#1288"{JuMP.GenericModel{Float64}}}}, SpineOpt.var"#1445#1448"{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, JuMP.GenericModel{Float64}}}}, Tuple{}})
precompile(Tuple{typeof(SpineOpt.t_lowest_resolution_path), JuMP.GenericModel{Float64}, Array{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}})
precompile(Tuple{SpineOpt.var"#1445#1448"{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, JuMP.GenericModel{Float64}}, Tuple{SpineInterface.TimeSlice, Array{SpineInterface.Object, 1}}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:connection, :node1, :node2, :analysis_time, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface._StartRef, SpineInterface.Object, SpineInterface.TimeSlice}}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:connection, :node1, :node2, :analysis_time, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface._StartRef, SpineInterface.Object, SpineInterface.TimeSlice}}, SpineInterface.Parameter})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:analysis_time, :stochastic_scenario, :t), Tuple{SpineInterface._StartRef, SpineInterface.Object, SpineInterface.TimeSlice}}, SpineInterface.ParameterValue{Dates.Hour}})
precompile(Tuple{typeof(Base.:(-)), SpineInterface.TimeSlice, Dates.Hour})
precompile(Tuple{typeof(Base.:(+)), Dates.DateTime, Dates.Hour, Dates.Millisecond})
precompile(Tuple{typeof(Dates.tons), Dates.Millisecond})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{Base.ComposedFunction{typeof(Dates.tons), typeof(Base.oneunit)}, Base.Order.ReverseOrdering{Base.Order.ForwardOrdering}}, Dates.Millisecond, Dates.Hour})
precompile(Tuple{typeof(Base.iszero), Dates.Millisecond})
precompile(Tuple{Type{NamedTuple{(:t,), T} where T<:Tuple}, Tuple{SpineInterface.TimeSlice}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:t,), Tuple{SpineInterface.TimeSlice}}, typeof(SpineOpt.to_time_slice), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{NamedTuple{(:connection, :node, :direction, :t), T} where T<:Tuple}, Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, Array{Any, 1}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:connection, :node, :direction, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, Array{Any, 1}}}, typeof(SpineOpt.connection_flow_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{SpineOpt.var"##connection_flow_indices#1082", SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Anything, Array{Any, 1}, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, typeof(SpineOpt.connection_flow_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1084#1085"{SpineInterface.Anything, Array{Any, 1}, JuMP.GenericModel{Float64}}, Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#1084#1085"{SpineInterface.Anything, Array{Any, 1}, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.unique), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#1084#1085"{SpineInterface.Anything, Array{Any, 1}, JuMP.GenericModel{Float64}}}}})
precompile(Tuple{SpineOpt.var"#1084#1085"{SpineInterface.Anything, Array{Any, 1}, JuMP.GenericModel{Float64}}, NamedTuple{(:connection, :node, :direction, :temporal_block), NTuple{4, SpineInterface.Object}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#469#470"{SpineInterface.Object, Array{Any, 1}, JuMP.GenericModel{Float64}}, Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#469#470"{SpineInterface.Object, Array{Any, 1}, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.unique), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#469#470"{SpineInterface.Object, Array{Any, 1}, JuMP.GenericModel{Float64}}}}})
precompile(Tuple{SpineOpt.var"#469#470"{SpineInterface.Object, Array{Any, 1}, JuMP.GenericModel{Float64}}, NamedTuple{(:model, :temporal_block), Tuple{SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#468#471"{SpineInterface.Object, Array{Any, 1}, JuMP.GenericModel{Float64}}, Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#468#471"{SpineInterface.Object, Array{Any, 1}, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#468#471"{SpineInterface.Object, Array{Any, 1}, JuMP.GenericModel{Float64}}}}, Tuple{}})
precompile(Tuple{SpineOpt.var"#468#471"{SpineInterface.Object, Array{Any, 1}, JuMP.GenericModel{Float64}}, NamedTuple{(:node, :temporal_block), Tuple{SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:temporal_block, :t), Tuple{Array{SpineInterface.Object, 1}, Array{Any, 1}}}, SpineOpt.TimeSliceSet})
precompile(Tuple{SpineOpt.var"#396#397"{SpineInterface.Object}, SpineInterface.TimeSlice})
precompile(Tuple{typeof(Base.push!), Array{SpineInterface.TimeSlice, 1}, SpineInterface.TimeSlice})
precompile(Tuple{typeof(Base._unique_from), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#469#470"{SpineInterface.Object, Array{Any, 1}, JuMP.GenericModel{Float64}}}}, Array{NamedTuple{(:node, :t), Tuple{SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, Base.Set{NamedTuple{(:node, :t), Tuple{SpineInterface.Object, SpineInterface.TimeSlice}}}, Tuple{Int64, Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#468#471"{SpineInterface.Object, Array{Any, 1}, JuMP.GenericModel{Float64}}}}, Tuple{Int64, Base.Generator{Array{SpineInterface.TimeSlice, 1}, SpineOpt.var"#467#472"{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}}, Int64}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#469#470"{SpineInterface.Object, Array{Any, 1}, JuMP.GenericModel{Float64}}}}, Tuple{Int64, Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#468#471"{SpineInterface.Object, Array{Any, 1}, JuMP.GenericModel{Float64}}}}, Tuple{Int64, Base.Generator{Array{SpineInterface.TimeSlice, 1}, SpineOpt.var"#467#472"{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}}, Int64}}})
precompile(Tuple{typeof(Base._unique_from), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#1084#1085"{SpineInterface.Anything, Array{Any, 1}, JuMP.GenericModel{Float64}}}}, Array{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, Base.Set{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}}, Tuple{Int64, Base.Generator{Array{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#1083#1086"{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}}, Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#1084#1085"{SpineInterface.Anything, Array{Any, 1}, JuMP.GenericModel{Float64}}}}, Tuple{Int64, Base.Generator{Array{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#1083#1086"{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}}, Int64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1443#1451"{SpineInterface.Object}, Array{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}})
precompile(Tuple{typeof(Base.iterate), Array{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}})
precompile(Tuple{SpineOpt.var"#1443#1451"{SpineInterface.Object}, NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}})
precompile(Tuple{typeof(Base.grow_to!), Array{SpineInterface.Object, 1}, Base.Iterators.Flatten{Base.Generator{Array{SpineInterface.Object, 1}, SpineOpt.var"#1444#1450"{SpineInterface.TimeSlice, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, JuMP.GenericModel{Float64}}}}, Tuple{Int64, Base.Generator{Array{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#1443#1451"{SpineInterface.Object}}, Int64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1442#1449"{Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}, Array{Array{SpineInterface.Object, 1}, 1}})
precompile(Tuple{SpineOpt.var"#1442#1449"{Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}, Array{SpineInterface.Object, 1}})
precompile(Tuple{typeof(Base.getindex), Type{NamedTuple{(:connection, :node1, :node2, :stochastic_path, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice}}}, NamedTuple{(:connection, :node1, :node2, :stochastic_path, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice}}})
precompile(Tuple{Type{Base.Set{NamedTuple{(:connection, :node1, :node2, :stochastic_path, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice}}}}, Tuple{NamedTuple{(:connection, :node1, :node2, :stochastic_path, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice}}}})
precompile(Tuple{typeof(Base._unique_from), Base.Iterators.Flatten{Base.Generator{Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SpineInterface.Parameter}}}, SpineOpt.var"#1446#1447"{JuMP.GenericModel{Float64}}}}, Array{NamedTuple{(:connection, :node1, :node2, :stochastic_path, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice}}, 1}, Base.Set{NamedTuple{(:connection, :node1, :node2, :stochastic_path, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice}}}, Tuple{Tuple{Int64, Base.Generator{Base.Iterators.Filter{SpineInterface.var"#243#246"{SpineInterface.RelationshipClass, SpineInterface.Parameter}, Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}}, typeof(Base.identity)}, Int64}, Base.Iterators.Flatten{Base.Generator{Base.Iterators.Flatten{Base.Generator{Base.Dict{Any, Any}, SpineOpt.var"#1286#1288"{JuMP.GenericModel{Float64}}}}, SpineOpt.var"#1445#1448"{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, JuMP.GenericModel{Float64}}}}, Tuple{Tuple{Int64, Base.Generator{Array{Array{SpineInterface.Object, 1}, 1}, SpineOpt.var"#1285#1289"{Base.Set{SpineInterface.Object}, SpineInterface.TimeSlice}}, Int64}, Base.Generator{Array{Array{SpineInterface.Object, 1}, 1}, SpineOpt.var"#1442#1449"{Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}}, Int64}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Flatten{Base.Generator{Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SpineInterface.Parameter}}}, SpineOpt.var"#1446#1447"{JuMP.GenericModel{Float64}}}}, Tuple{Tuple{Int64, Base.Generator{Base.Iterators.Filter{SpineInterface.var"#243#246"{SpineInterface.RelationshipClass, SpineInterface.Parameter}, Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}}, typeof(Base.identity)}, Int64}, Base.Iterators.Flatten{Base.Generator{Base.Iterators.Flatten{Base.Generator{Base.Dict{Any, Any}, SpineOpt.var"#1286#1288"{JuMP.GenericModel{Float64}}}}, SpineOpt.var"#1445#1448"{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, JuMP.GenericModel{Float64}}}}, Tuple{Tuple{Int64, Base.Generator{Array{Array{SpineInterface.Object, 1}, 1}, SpineOpt.var"#1285#1289"{Base.Set{SpineInterface.Object}, SpineInterface.TimeSlice}}, Int64}, Base.Generator{Array{Array{SpineInterface.Object, 1}, 1}, SpineOpt.var"#1442#1449"{Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}}, Int64}}})
precompile(Tuple{typeof(Base.in!), NamedTuple{(:connection, :node1, :node2, :stochastic_path, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice}}, Base.Set{NamedTuple{(:connection, :node1, :node2, :stochastic_path, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice}}}})
precompile(Tuple{typeof(Base.push!), Array{NamedTuple{(:connection, :node1, :node2, :stochastic_path, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice}}, 1}, NamedTuple{(:connection, :node1, :node2, :stochastic_path, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1436#1439"{JuMP.GenericModel{Float64}, SpineInterface.Parameter, typeof(Base.:(==)), SpineInterface._StartRef, Base.Dict{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}, Array{NamedTuple{(:connection, :node1, :node2, :stochastic_path, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice}}, 1}})
precompile(Tuple{typeof(Base.tail), NTuple{6, Symbol}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Array{NamedTuple{(:connection, :node1, :node2, :stochastic_path, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#1436#1439"{JuMP.GenericModel{Float64}, SpineInterface.Parameter, typeof(Base.:(==)), SpineInterface._StartRef, Base.Dict{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}}})
precompile(Tuple{Type{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), T} where T<:Tuple}, Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, Array{SpineInterface.Object, 1}, Array{SpineInterface.TimeSlice, 1}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, Array{SpineInterface.Object, 1}, Array{SpineInterface.TimeSlice, 1}}}, typeof(SpineOpt.connection_flow_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1437#1440"{Base.Dict{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}, Array{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:init,), Tuple{Int64}}, typeof(SpineOpt.expr_sum), Base.Generator{Array{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#1437#1440"{Base.Dict{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:connection, :node1, :node2, :analysis_time, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface._StartRef, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice}}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:connection, :node1, :node2, :analysis_time, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface._StartRef, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice}}, SpineInterface.Parameter})
precompile(Tuple{Type{NamedTuple{(:analysis_time, :stochastic_scenario, :t), T} where T<:Tuple}, Tuple{SpineInterface._StartRef, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:analysis_time, :stochastic_scenario, :t), Tuple{SpineInterface._StartRef, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice}}, SpineInterface.ParameterValue{Dates.Hour}})
precompile(Tuple{Type{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), T} where T<:Tuple}, Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, Array{SpineInterface.Object, 1}, Array{Any, 1}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, Array{SpineInterface.Object, 1}, Array{Any, 1}}}, typeof(SpineOpt.connection_flow_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{SpineOpt.var"##connection_flow_indices#1082", SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, Array{SpineInterface.Object, 1}, Array{Any, 1}, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, typeof(SpineOpt.connection_flow_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1084#1085"{Array{SpineInterface.Object, 1}, Array{Any, 1}, JuMP.GenericModel{Float64}}, Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#1084#1085"{Array{SpineInterface.Object, 1}, Array{Any, 1}, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.unique), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#1084#1085"{Array{SpineInterface.Object, 1}, Array{Any, 1}, JuMP.GenericModel{Float64}}}}})
precompile(Tuple{SpineOpt.var"#1084#1085"{Array{SpineInterface.Object, 1}, Array{Any, 1}, JuMP.GenericModel{Float64}}, NamedTuple{(:connection, :node, :direction, :temporal_block), NTuple{4, SpineInterface.Object}}})
precompile(Tuple{typeof(Base._unique_from), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#1084#1085"{Array{SpineInterface.Object, 1}, Array{Any, 1}, JuMP.GenericModel{Float64}}}}, Array{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, Base.Set{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}}, Tuple{Int64, Base.Generator{Array{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#1083#1086"{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}}, Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#1084#1085"{Array{SpineInterface.Object, 1}, Array{Any, 1}, JuMP.GenericModel{Float64}}}}, Tuple{Int64, Base.Generator{Array{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#1083#1086"{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}}, Int64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1438#1441"{SpineInterface.TimeSlice, SpineInterface.Object, SpineInterface.Object, SpineInterface.Parameter, SpineInterface._StartRef, Base.Dict{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}, Array{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:connection, :node1, :node2, :stochastic_scenario, :analysis_time, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface._StartRef, SpineInterface.TimeSlice}}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:init,), Tuple{Int64}}, typeof(SpineOpt.expr_sum), Base.Generator{Array{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#1438#1441"{SpineInterface.TimeSlice, SpineInterface.Object, SpineInterface.Object, SpineInterface.Parameter, SpineInterface._StartRef, Base.Dict{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}}})
precompile(Tuple{Type{SpineInterface.Call}, SpineInterface.ParameterValue{Float64}, NamedTuple{(:stochastic_scenario, :analysis_time, :t), Tuple{SpineInterface.Object, SpineInterface._StartRef, SpineInterface.TimeSlice}}, Tuple{Symbol, NamedTuple{(:connection, :node1, :node2, :stochastic_scenario, :analysis_time, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface._StartRef, SpineInterface.TimeSlice}}}})
precompile(Tuple{typeof(Base.max), Dates.DateTime, Dates.DateTime})
precompile(Tuple{Type{Dates.Minute}, Dates.Millisecond})
precompile(Tuple{typeof(Base.:(/)), Dates.Minute, Dates.Minute})
precompile(Tuple{typeof(Base.:(+)), JuMP.GenericAffExpr{SpineInterface.Call, JuMP.GenericVariableRef{Float64}}})
precompile(Tuple{typeof(SpineOpt.sense_constraint), JuMP.GenericModel{Float64}, JuMP.GenericAffExpr{Float64, JuMP.GenericVariableRef{Float64}}, typeof(Base.:(==)), JuMP.GenericAffExpr{SpineInterface.Call, JuMP.GenericVariableRef{Float64}}})
precompile(Tuple{typeof(SpineInterface._iszero), SpineInterface.ParameterValue{Float64}, SpineInterface.Call})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:stochastic_scenario, :analysis_time, :t), Tuple{SpineInterface.Object, SpineInterface._StartRef, SpineInterface.TimeSlice}}, SpineInterface.ParameterValue{Float64}, Function})
precompile(Tuple{Type{Pair{A, B} where B where A}, NamedTuple{(:connection, :node1, :node2, :stochastic_path, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice}}, JuMP.ConstraintRef{JuMP.GenericModel{Float64}, MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.EqualTo{Float64}}, JuMP.ScalarShape}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{NamedTuple{(:connection, :node1, :node2, :stochastic_path, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice}}}, Type{JuMP.ConstraintRef{JuMP.GenericModel{Float64}, MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.EqualTo{Float64}}, JuMP.ScalarShape}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{NamedTuple{(:connection, :node1, :node2, :stochastic_path, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice}}, JuMP.ConstraintRef{JuMP.GenericModel{Float64}, MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.EqualTo{Float64}}, JuMP.ScalarShape}}, JuMP.ConstraintRef{JuMP.GenericModel{Float64}, MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.EqualTo{Float64}}, JuMP.ScalarShape}, NamedTuple{(:connection, :node1, :node2, :stochastic_path, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{NamedTuple{(:connection, :node1, :node2, :stochastic_path, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice}}, JuMP.ConstraintRef{JuMP.GenericModel{Float64}, MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.EqualTo{Float64}}, JuMP.ScalarShape}}, Base.Generator{Array{NamedTuple{(:connection, :node1, :node2, :stochastic_path, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#1436#1439"{JuMP.GenericModel{Float64}, SpineInterface.Parameter, typeof(Base.:(==)), SpineInterface._StartRef, Base.Dict{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Base.Dict{K, V} where V where K}, Base.Dict{NamedTuple{(:connection, :node1, :node2, :stochastic_path, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice}}, JuMP.ConstraintRef{JuMP.GenericModel{Float64}, MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.EqualTo{Float64}}, JuMP.ScalarShape}}, Symbol})
precompile(Tuple{typeof(SpineOpt.add_constraint_max_ratio_out_in_connection_flow!), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1436#1439"{JuMP.GenericModel{Float64}, SpineInterface.Parameter, typeof(Base.:(<=)), SpineInterface._StartRef, Base.Dict{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}, Array{Any, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Array{Any, 1}, SpineOpt.var"#1436#1439"{JuMP.GenericModel{Float64}, SpineInterface.Parameter, typeof(Base.:(<=)), SpineInterface._StartRef, Base.Dict{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}}})
precompile(Tuple{typeof(SpineOpt.add_constraint_min_ratio_out_in_connection_flow!), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1436#1439"{JuMP.GenericModel{Float64}, SpineInterface.Parameter, typeof(Base.:(>=)), SpineInterface._StartRef, Base.Dict{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}, Array{Any, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Array{Any, 1}, SpineOpt.var"#1436#1439"{JuMP.GenericModel{Float64}, SpineInterface.Parameter, typeof(Base.:(>=)), SpineInterface._StartRef, Base.Dict{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}}})
precompile(Tuple{typeof(SpineOpt.add_constraint_node_state_capacity!), JuMP.GenericModel{Float64}})
precompile(Tuple{SpineOpt.var"##node_time_indices#466", Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SpineInterface.Parameter}}}, SpineInterface.Anything, SpineInterface.Anything, typeof(SpineOpt.node_time_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#469#470"{Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SpineInterface.Parameter}}}, SpineInterface.Anything, JuMP.GenericModel{Float64}}, Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#469#470"{Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SpineInterface.Parameter}}}, SpineInterface.Anything, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.unique), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#469#470"{Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SpineInterface.Parameter}}}, SpineInterface.Anything, JuMP.GenericModel{Float64}}}}})
precompile(Tuple{SpineOpt.var"#469#470"{Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SpineInterface.Parameter}}}, SpineInterface.Anything, JuMP.GenericModel{Float64}}, NamedTuple{(:model, :temporal_block), Tuple{SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:node, :temporal_block, :_compact), Tuple{Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SpineInterface.Parameter}}}, SpineInterface.Object, Bool}}, SpineInterface.RelationshipClass})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SpineInterface.Parameter}}}, 1}, Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SpineInterface.Parameter}}}, Base.Generator{Array{Symbol, 1}, SpineInterface.var"#208#214"{Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:node, :temporal_block), Tuple{Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SpineInterface.Parameter}}}, SpineInterface.Object}}}}}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SpineInterface.Parameter}}}, 1}, Base.Generator{Array{Symbol, 1}, SpineInterface.var"#208#214"{Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:node, :temporal_block), Tuple{Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SpineInterface.Parameter}}}, SpineInterface.Object}}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.get!), SpineInterface.var"#209#215"{Bool, Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:node, :temporal_block), Tuple{Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SpineInterface.Parameter}}}, SpineInterface.Object}}}, SpineInterface.RelationshipClass}, Base.Dict{Any, Any}, Tuple{Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SpineInterface.Parameter}}}, SpineInterface.Object}})
precompile(Tuple{SpineInterface.var"#cond#216"{Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:node, :temporal_block), Tuple{Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SpineInterface.Parameter}}}, SpineInterface.Object}}}}, NamedTuple{(:node, :temporal_block), Tuple{SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{typeof(Base.in), SpineInterface.Object, Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SpineInterface.Parameter}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1397#1398"{JuMP.GenericModel{Float64}}, Array{Any, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{Any, 1}, SpineOpt.var"#1397#1398"{JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.unique), Base.Iterators.Flatten{Base.Generator{Array{Any, 1}, SpineOpt.var"#1397#1398"{JuMP.GenericModel{Float64}}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1390#1393"{JuMP.GenericModel{Float64}, SpineInterface._StartRef, Base.Dict{Any, Any}, Base.Dict{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}, Array{Any, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Array{Any, 1}, SpineOpt.var"#1390#1393"{JuMP.GenericModel{Float64}, SpineInterface._StartRef, Base.Dict{Any, Any}, Base.Dict{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}}})
precompile(Tuple{typeof(SpineOpt.add_constraint_cyclic_node_state!), JuMP.GenericModel{Float64}})
precompile(Tuple{SpineInterface.var"#243#246"{SpineInterface.RelationshipClass, SpineInterface.Parameter}, NamedTuple{(:node, :temporal_block), Tuple{SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{SpineOpt.var"#1413#1419", NamedTuple{(:node, :temporal_block), Tuple{SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:node, :temporal_block), Tuple{SpineInterface.Object, SpineInterface.Object}}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:node, :temporal_block), Tuple{SpineInterface.Object, SpineInterface.Object}}, SpineInterface.Parameter})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1402#1405"{JuMP.GenericModel{Float64}, Base.Dict{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}, Array{Any, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Array{Any, 1}, SpineOpt.var"#1402#1405"{JuMP.GenericModel{Float64}, Base.Dict{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}}})
precompile(Tuple{typeof(SpineOpt.add_constraint_max_total_cumulated_unit_flow_from_node!), JuMP.GenericModel{Float64}})
precompile(Tuple{typeof(SpineOpt.add_constraint_total_cumulated_unit_flow!), JuMP.GenericModel{Float64}, SpineInterface.Parameter, Function})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1290#1292"{JuMP.GenericModel{Float64}, SpineInterface.Parameter, typeof(Base.:(<=)), Base.Dict{NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}, Array{Any, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Array{Any, 1}, SpineOpt.var"#1290#1292"{JuMP.GenericModel{Float64}, SpineInterface.Parameter, typeof(Base.:(<=)), Base.Dict{NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}}})
precompile(Tuple{typeof(SpineOpt.add_constraint_min_total_cumulated_unit_flow_from_node!), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1290#1292"{JuMP.GenericModel{Float64}, SpineInterface.Parameter, typeof(Base.:(>=)), Base.Dict{NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}, Array{Any, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Array{Any, 1}, SpineOpt.var"#1290#1292"{JuMP.GenericModel{Float64}, SpineInterface.Parameter, typeof(Base.:(>=)), Base.Dict{NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}}})
precompile(Tuple{typeof(SpineOpt.add_constraint_max_total_cumulated_unit_flow_to_node!), JuMP.GenericModel{Float64}})
precompile(Tuple{typeof(SpineOpt.add_constraint_min_total_cumulated_unit_flow_to_node!), JuMP.GenericModel{Float64}})
precompile(Tuple{typeof(SpineOpt.add_constraint_units_on!), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1646#1647"{JuMP.GenericModel{Float64}, Base.Dict{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Base.Dict{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}, Array{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Array{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#1646#1647"{JuMP.GenericModel{Float64}, Base.Dict{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Base.Dict{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Base.Dict{K, V} where V where K}, Base.Dict{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.ConstraintRef{JuMP.GenericModel{Float64}, MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.LessThan{Float64}}, JuMP.ScalarShape}}, Symbol})
precompile(Tuple{typeof(SpineOpt.add_constraint_units_available!), JuMP.GenericModel{Float64}})
precompile(Tuple{SpineOpt.var"##unit_time_indices#480", SpineInterface.Anything, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, SpineInterface.Anything, typeof(SpineOpt.unit_time_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#483#484"{SpineInterface.Anything, SpineInterface.Anything, JuMP.GenericModel{Float64}}, Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#483#484"{SpineInterface.Anything, SpineInterface.Anything, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.unique), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#483#484"{SpineInterface.Anything, SpineInterface.Anything, JuMP.GenericModel{Float64}}}}})
precompile(Tuple{SpineOpt.var"#483#484"{SpineInterface.Anything, SpineInterface.Anything, JuMP.GenericModel{Float64}}, NamedTuple{(:model, :temporal_block), Tuple{SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:unit, :temporal_block, :_compact), Tuple{SpineInterface.Anything, SpineInterface.Object, Bool}}, SpineInterface.RelationshipClass})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{SpineInterface.Anything, 1}, SpineInterface.Anything, Base.Generator{Array{Symbol, 1}, SpineInterface.var"#208#214"{Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:unit, :temporal_block), Tuple{SpineInterface.Anything, SpineInterface.Object}}}}}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{SpineInterface.Anything, 1}, Base.Generator{Array{Symbol, 1}, SpineInterface.var"#208#214"{Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:unit, :temporal_block), Tuple{SpineInterface.Anything, SpineInterface.Object}}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.get!), SpineInterface.var"#209#215"{Bool, Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:unit, :temporal_block), Tuple{SpineInterface.Anything, SpineInterface.Object}}}, SpineInterface.RelationshipClass}, Base.Dict{Any, Any}, Tuple{SpineInterface.Anything, SpineInterface.Object}})
precompile(Tuple{typeof(Base._unique_from), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#483#484"{SpineInterface.Anything, SpineInterface.Anything, JuMP.GenericModel{Float64}}}}, Array{NamedTuple{(:unit, :t), Tuple{SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, Base.Set{NamedTuple{(:unit, :t), Tuple{SpineInterface.Object, SpineInterface.TimeSlice}}}, Tuple{Int64, Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#482#485"{SpineInterface.Object, SpineInterface.Anything, JuMP.GenericModel{Float64}}}}, Tuple{Int64, Base.Generator{Array{SpineInterface.TimeSlice, 1}, SpineOpt.var"#481#486"{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}}, Int64}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#483#484"{SpineInterface.Anything, SpineInterface.Anything, JuMP.GenericModel{Float64}}}}, Tuple{Int64, Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#482#485"{SpineInterface.Object, SpineInterface.Anything, JuMP.GenericModel{Float64}}}}, Tuple{Int64, Base.Generator{Array{SpineInterface.TimeSlice, 1}, SpineOpt.var"#481#486"{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}}, Int64}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1656#1657"{JuMP.GenericModel{Float64}}, Array{NamedTuple{(:unit, :t), Tuple{SpineInterface.Object, SpineInterface.TimeSlice}}, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{NamedTuple{(:unit, :t), Tuple{SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#1656#1657"{JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.unique), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{(:unit, :t), Tuple{SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#1656#1657"{JuMP.GenericModel{Float64}}}}})
precompile(Tuple{SpineOpt.var"##units_on_indices#1107", SpineInterface.Object, SpineInterface.Anything, SpineInterface.TimeSlice, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, typeof(SpineOpt.units_on_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1109#1110"{SpineInterface.Anything, SpineInterface.TimeSlice, JuMP.GenericModel{Float64}}, Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#1109#1110"{SpineInterface.Anything, SpineInterface.TimeSlice, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.unique), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#1109#1110"{SpineInterface.Anything, SpineInterface.TimeSlice, JuMP.GenericModel{Float64}}}}})
precompile(Tuple{SpineOpt.var"#1109#1110"{SpineInterface.Anything, SpineInterface.TimeSlice, JuMP.GenericModel{Float64}}, NamedTuple{(:unit, :temporal_block), Tuple{SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#483#484"{SpineInterface.Object, SpineInterface.TimeSlice, JuMP.GenericModel{Float64}}, Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#483#484"{SpineInterface.Object, SpineInterface.TimeSlice, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.unique), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#483#484"{SpineInterface.Object, SpineInterface.TimeSlice, JuMP.GenericModel{Float64}}}}})
precompile(Tuple{SpineOpt.var"#483#484"{SpineInterface.Object, SpineInterface.TimeSlice, JuMP.GenericModel{Float64}}, NamedTuple{(:model, :temporal_block), Tuple{SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#482#485"{SpineInterface.Object, SpineInterface.TimeSlice, JuMP.GenericModel{Float64}}, Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#482#485"{SpineInterface.Object, SpineInterface.TimeSlice, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#482#485"{SpineInterface.Object, SpineInterface.TimeSlice, JuMP.GenericModel{Float64}}}}, Tuple{}})
precompile(Tuple{SpineOpt.var"#482#485"{SpineInterface.Object, SpineInterface.TimeSlice, JuMP.GenericModel{Float64}}, NamedTuple{(:unit, :temporal_block), Tuple{SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{typeof(Base._unique_from), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#483#484"{SpineInterface.Object, SpineInterface.TimeSlice, JuMP.GenericModel{Float64}}}}, Array{NamedTuple{(:unit, :t), Tuple{SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, Base.Set{NamedTuple{(:unit, :t), Tuple{SpineInterface.Object, SpineInterface.TimeSlice}}}, Tuple{Int64, Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#482#485"{SpineInterface.Object, SpineInterface.TimeSlice, JuMP.GenericModel{Float64}}}}, Tuple{Int64, Base.Generator{Array{SpineInterface.TimeSlice, 1}, SpineOpt.var"#481#486"{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}}, Int64}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#483#484"{SpineInterface.Object, SpineInterface.TimeSlice, JuMP.GenericModel{Float64}}}}, Tuple{Int64, Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#482#485"{SpineInterface.Object, SpineInterface.TimeSlice, JuMP.GenericModel{Float64}}}}, Tuple{Int64, Base.Generator{Array{SpineInterface.TimeSlice, 1}, SpineOpt.var"#481#486"{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}}, Int64}}})
precompile(Tuple{typeof(Base._unique_from), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#1109#1110"{SpineInterface.Anything, SpineInterface.TimeSlice, JuMP.GenericModel{Float64}}}}, Array{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, Base.Set{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}}, Tuple{Int64, Base.Generator{Array{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#1108#1111"{SpineInterface.Object}}, Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#1109#1110"{SpineInterface.Anything, SpineInterface.TimeSlice, JuMP.GenericModel{Float64}}}}, Tuple{Int64, Base.Generator{Array{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#1108#1111"{SpineInterface.Object}}, Int64}})
precompile(Tuple{Type{NamedTuple{(:unit, :t), T} where T<:Tuple}, Tuple{SpineInterface.Object, Array{SpineInterface.TimeSlice, 1}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:unit, :t), Tuple{SpineInterface.Object, Array{SpineInterface.TimeSlice, 1}}}, typeof(SpineOpt.units_invested_available_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{SpineOpt.var"##units_invested_available_indices#1112", SpineInterface.Object, SpineInterface.Anything, Array{SpineInterface.TimeSlice, 1}, SpineInterface.Anything, typeof(SpineOpt.units_invested_available_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:unit, :temporal_block, :_compact), Tuple{Array{SpineInterface.Object, 1}, SpineInterface.Anything, Bool}}, SpineInterface.RelationshipClass})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{SpineInterface.Object, 1}, SpineInterface.Object, Base.Generator{Array{Symbol, 1}, SpineInterface.var"#208#214"{Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:unit, :temporal_block), Tuple{Array{SpineInterface.Object, 1}, SpineInterface.Anything}}}}}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Any, 1}, Base.Generator{Array{Symbol, 1}, SpineInterface.var"#208#214"{Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:unit, :temporal_block), Tuple{Array{SpineInterface.Object, 1}, SpineInterface.Anything}}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.get!), SpineInterface.var"#209#215"{Bool, Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:unit, :temporal_block), Tuple{Array{SpineInterface.Object, 1}, SpineInterface.Anything}}}, SpineInterface.RelationshipClass}, Base.Dict{Any, Any}, Tuple{SpineInterface.Object, SpineInterface.Anything}})
precompile(Tuple{typeof(Base.vcat), Array{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, Array{Any, 1}})
precompile(Tuple{SpineOpt.var"#584#585", NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1655#1658"{SpineInterface.TimeSlice, SpineInterface.Object}, Array{Array{SpineInterface.Object, 1}, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{Array{SpineInterface.Object, 1}, 1}, SpineOpt.var"#1655#1658"{SpineInterface.TimeSlice, SpineInterface.Object}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Flatten{Base.Generator{Array{Array{SpineInterface.Object, 1}, 1}, SpineOpt.var"#1655#1658"{SpineInterface.TimeSlice, SpineInterface.Object}}}, Tuple{}})
precompile(Tuple{typeof(Base._unique_from), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{(:unit, :t), Tuple{SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#1656#1657"{JuMP.GenericModel{Float64}}}}, Array{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, Base.Set{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}}, Tuple{Int64, Base.Iterators.Flatten{Base.Generator{Array{Array{SpineInterface.Object, 1}, 1}, SpineOpt.var"#1655#1658"{SpineInterface.TimeSlice, SpineInterface.Object}}}, Tuple{Int64, Base.Generator{Array{SpineInterface.Object, 1}, SpineOpt.var"#1654#1659"{Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice, SpineInterface.Object}}, Int64}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{(:unit, :t), Tuple{SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#1656#1657"{JuMP.GenericModel{Float64}}}}, Tuple{Int64, Base.Iterators.Flatten{Base.Generator{Array{Array{SpineInterface.Object, 1}, 1}, SpineOpt.var"#1655#1658"{SpineInterface.TimeSlice, SpineInterface.Object}}}, Tuple{Int64, Base.Generator{Array{SpineInterface.Object, 1}, SpineOpt.var"#1654#1659"{Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice, SpineInterface.Object}}, Int64}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1648#1651"{JuMP.GenericModel{Float64}, SpineInterface._StartRef, Base.Dict{Any, Any}, Base.Dict{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}, Array{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Array{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#1648#1651"{JuMP.GenericModel{Float64}, SpineInterface._StartRef, Base.Dict{Any, Any}, Base.Dict{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}}})
precompile(Tuple{SpineOpt.var"##units_on_indices#1107", SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, typeof(SpineOpt.units_on_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1109#1110"{SpineInterface.Object, SpineInterface.TimeSlice, JuMP.GenericModel{Float64}}, Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#1109#1110"{SpineInterface.Object, SpineInterface.TimeSlice, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.unique), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#1109#1110"{SpineInterface.Object, SpineInterface.TimeSlice, JuMP.GenericModel{Float64}}}}})
precompile(Tuple{SpineOpt.var"#1109#1110"{SpineInterface.Object, SpineInterface.TimeSlice, JuMP.GenericModel{Float64}}, NamedTuple{(:unit, :temporal_block), Tuple{SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#621#622"{SpineInterface.Object, JuMP.GenericModel{Float64}}, Array{NamedTuple{(:unit, :t), Tuple{SpineInterface.Object, SpineInterface.TimeSlice}}, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{NamedTuple{(:unit, :t), Tuple{SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#621#622"{SpineInterface.Object, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.unique), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{(:unit, :t), Tuple{SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#621#622"{SpineInterface.Object, JuMP.GenericModel{Float64}}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#620#623"{SpineInterface.TimeSlice, SpineInterface.Object, SpineInterface.Object, JuMP.GenericModel{Float64}}, Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#620#623"{SpineInterface.TimeSlice, SpineInterface.Object, SpineInterface.Object, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#620#623"{SpineInterface.TimeSlice, SpineInterface.Object, SpineInterface.Object, JuMP.GenericModel{Float64}}}}, Tuple{}})
precompile(Tuple{SpineOpt.var"#620#623"{SpineInterface.TimeSlice, SpineInterface.Object, SpineInterface.Object, JuMP.GenericModel{Float64}}, NamedTuple{(:model, :stochastic_structure), Tuple{SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#619#624"{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice, SpineInterface.Object}, Array{Any, 1}})
precompile(Tuple{typeof(Base._unique_from), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{(:unit, :t), Tuple{SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#621#622"{SpineInterface.Object, JuMP.GenericModel{Float64}}}}, Array{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, Base.Set{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}}, Tuple{Int64, Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#620#623"{SpineInterface.TimeSlice, SpineInterface.Object, SpineInterface.Object, JuMP.GenericModel{Float64}}}}, Tuple{Int64, Base.Generator{Array{Any, 1}, SpineOpt.var"#619#624"{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice, SpineInterface.Object}}, Int64}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{(:unit, :t), Tuple{SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#621#622"{SpineInterface.Object, JuMP.GenericModel{Float64}}}}, Tuple{Int64, Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#620#623"{SpineInterface.TimeSlice, SpineInterface.Object, SpineInterface.Object, JuMP.GenericModel{Float64}}}}, Tuple{Int64, Base.Generator{Array{Any, 1}, SpineOpt.var"#619#624"{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice, SpineInterface.Object}}, Int64}}})
precompile(Tuple{typeof(Base._unique_from), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#1109#1110"{SpineInterface.Object, SpineInterface.TimeSlice, JuMP.GenericModel{Float64}}}}, Array{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, Base.Set{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}}, Tuple{Int64, Base.Generator{Array{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#1108#1111"{SpineInterface.Object}}, Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#1109#1110"{SpineInterface.Object, SpineInterface.TimeSlice, JuMP.GenericModel{Float64}}}}, Tuple{Int64, Base.Generator{Array{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#1108#1111"{SpineInterface.Object}}, Int64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1649#1652"{Base.Dict{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}, Array{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:init,), Tuple{Int64}}, typeof(SpineOpt.expr_sum), Base.Generator{Array{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#1649#1652"{Base.Dict{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}}})
precompile(Tuple{Type{NamedTuple{(:unit, :stochastic_scenario, :t), T} where T<:Tuple}, Tuple{SpineInterface.Object, SpineInterface.Object, Array{SpineInterface.TimeSlice, 1}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, Array{SpineInterface.TimeSlice, 1}}}, typeof(SpineOpt.units_invested_available_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{SpineOpt.var"##units_invested_available_indices#1112", SpineInterface.Object, SpineInterface.Object, Array{SpineInterface.TimeSlice, 1}, SpineInterface.Anything, typeof(SpineOpt.units_invested_available_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1114#1115"{SpineInterface.Object, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}, Array{Any, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{Any, 1}, SpineOpt.var"#1114#1115"{SpineInterface.Object, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.unique), Base.Iterators.Flatten{Base.Generator{Array{Any, 1}, SpineOpt.var"#1114#1115"{SpineInterface.Object, Array{SpineInterface.TimeSlice, 1}, JuMP.GenericModel{Float64}}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1650#1653"{Base.Dict{Any, Any}}, Array{Any, 1}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:init,), Tuple{Int64}}, typeof(SpineOpt.expr_sum), Base.Generator{Array{Any, 1}, SpineOpt.var"#1650#1653"{Base.Dict{Any, Any}}}})
precompile(Tuple{typeof(MutableArithmetics.operate!!), typeof(MutableArithmetics.sub_mul), JuMP.GenericAffExpr{Float64, JuMP.GenericVariableRef{Float64}}, JuMP.GenericAffExpr{Float64, JuMP.GenericVariableRef{Float64}}})
precompile(Tuple{Type{Pair{A, B} where B where A}, NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.ConstraintRef{JuMP.GenericModel{Float64}, MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.LessThan{Float64}}, JuMP.ScalarShape}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}}, Type{JuMP.ConstraintRef{JuMP.GenericModel{Float64}, MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.LessThan{Float64}}, JuMP.ScalarShape}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.ConstraintRef{JuMP.GenericModel{Float64}, MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.LessThan{Float64}}, JuMP.ScalarShape}}, Base.Generator{Array{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#1648#1651"{JuMP.GenericModel{Float64}, SpineInterface._StartRef, Base.Dict{Any, Any}, Base.Dict{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}}, Int64})
precompile(Tuple{typeof(SpineOpt.add_constraint_units_invested_available!), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1799#1800"{JuMP.GenericModel{Float64}, SpineInterface._StartRef, Base.Dict{Any, Any}}, Array{Any, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Array{Any, 1}, SpineOpt.var"#1799#1800"{JuMP.GenericModel{Float64}, SpineInterface._StartRef, Base.Dict{Any, Any}}}})
precompile(Tuple{typeof(SpineOpt.add_constraint_unit_lifetime!), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1813#1815"{JuMP.GenericModel{Float64}, Base.Dict{Any, Any}, Base.Dict{Any, Any}}, Array{Any, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Array{Any, 1}, SpineOpt.var"#1813#1815"{JuMP.GenericModel{Float64}, Base.Dict{Any, Any}, Base.Dict{Any, Any}}}})
precompile(Tuple{typeof(SpineOpt.add_constraint_units_invested_transition!), JuMP.GenericModel{Float64}})
precompile(Tuple{SpineOpt.var"##unit_investment_dynamic_time_indices#515", SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, typeof(SpineOpt.unit_investment_dynamic_time_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{SpineOpt.var"##unit_investment_time_indices#494", SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, typeof(SpineOpt.unit_investment_time_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Iterators.Filter{F, I} where I where F}, SpineOpt.var"#497#500"{JuMP.GenericModel{Float64}}, Array{Any, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#496#498"{SpineInterface.Anything, JuMP.GenericModel{Float64}}, Base.Iterators.Filter{SpineOpt.var"#497#500"{JuMP.GenericModel{Float64}}, Array{Any, 1}}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Base.Iterators.Filter{SpineOpt.var"#497#500"{JuMP.GenericModel{Float64}}, Array{Any, 1}}, SpineOpt.var"#496#498"{SpineInterface.Anything, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.unique), Base.Iterators.Flatten{Base.Generator{Base.Iterators.Filter{SpineOpt.var"#497#500"{JuMP.GenericModel{Float64}}, Array{Any, 1}}, SpineOpt.var"#496#498"{SpineInterface.Anything, JuMP.GenericModel{Float64}}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#518#519"{SpineInterface.Anything, JuMP.GenericModel{Float64}}, Array{Any, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{Any, 1}, SpineOpt.var"#518#519"{SpineInterface.Anything, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.unique), Base.Iterators.Flatten{Base.Generator{Array{Any, 1}, SpineOpt.var"#518#519"{SpineInterface.Anything, JuMP.GenericModel{Float64}}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1808#1809"{JuMP.GenericModel{Float64}}, Array{Any, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{Any, 1}, SpineOpt.var"#1808#1809"{JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.unique), Base.Iterators.Flatten{Base.Generator{Array{Any, 1}, SpineOpt.var"#1808#1809"{JuMP.GenericModel{Float64}}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1801#1804"{JuMP.GenericModel{Float64}, Base.Dict{Any, Any}, Base.Dict{Any, Any}, Base.Dict{Any, Any}}, Array{Any, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Array{Any, 1}, SpineOpt.var"#1801#1804"{JuMP.GenericModel{Float64}, Base.Dict{Any, Any}, Base.Dict{Any, Any}, Base.Dict{Any, Any}}}})
precompile(Tuple{typeof(SpineOpt.add_constraint_minimum_operating_point!), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1660#1663"{JuMP.GenericModel{Float64}, SpineInterface._StartRef, Base.Dict{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Base.Dict{NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}, Array{Any, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Array{Any, 1}, SpineOpt.var"#1660#1663"{JuMP.GenericModel{Float64}, SpineInterface._StartRef, Base.Dict{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Base.Dict{NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}}})
precompile(Tuple{typeof(SpineOpt.add_constraint_min_down_time!), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1687#1692"{JuMP.GenericModel{Float64}, SpineInterface._StartRef, Base.Dict{Any, Any}, Base.Dict{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Base.Dict{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Base.Dict{Any, Any}}, Array{Any, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Array{Any, 1}, SpineOpt.var"#1687#1692"{JuMP.GenericModel{Float64}, SpineInterface._StartRef, Base.Dict{Any, Any}, Base.Dict{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Base.Dict{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Base.Dict{Any, Any}}}})
precompile(Tuple{typeof(SpineOpt.add_constraint_min_up_time!), JuMP.GenericModel{Float64}})
precompile(Tuple{SpineOpt.var"##constraint_min_up_time_indices#1678", SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, typeof(SpineOpt.constraint_min_up_time_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1672#1675"{JuMP.GenericModel{Float64}, Base.Dict{Any, Any}, Base.Dict{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Base.Dict{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}, Array{Any, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Array{Any, 1}, SpineOpt.var"#1672#1675"{JuMP.GenericModel{Float64}, Base.Dict{Any, Any}, Base.Dict{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Base.Dict{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}}})
precompile(Tuple{typeof(SpineOpt.add_constraint_unit_state_transition!), JuMP.GenericModel{Float64}})
precompile(Tuple{SpineOpt.var"##unit_dynamic_time_indices#487", SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, SpineInterface.Anything, typeof(SpineOpt.unit_dynamic_time_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#490#491"{SpineInterface.Anything, SpineInterface.Anything, JuMP.GenericModel{Float64}}, Array{NamedTuple{(:unit, :t), Tuple{SpineInterface.Object, SpineInterface.TimeSlice}}, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{NamedTuple{(:unit, :t), Tuple{SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#490#491"{SpineInterface.Anything, SpineInterface.Anything, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.unique), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{(:unit, :t), Tuple{SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#490#491"{SpineInterface.Anything, SpineInterface.Anything, JuMP.GenericModel{Float64}}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#489#493", Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#489#493"}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{SpineInterface.TimeSlice, 1}, SpineInterface.TimeSlice, Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#489#493"}, Int64})
precompile(Tuple{Type{NamedTuple{(:unit, :t, :temporal_block), T} where T<:Tuple}, Tuple{SpineInterface.Object, Array{SpineInterface.TimeSlice, 1}, SpineInterface.Anything}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:unit, :t, :temporal_block), Tuple{SpineInterface.Object, Array{SpineInterface.TimeSlice, 1}, SpineInterface.Anything}}, typeof(SpineOpt.unit_time_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#488#492"{SpineInterface.TimeSlice}, Array{NamedTuple{(:unit, :t), Tuple{SpineInterface.Object, SpineInterface.TimeSlice}}, 1}})
precompile(Tuple{typeof(Base.iterate), Array{NamedTuple{(:unit, :t), Tuple{SpineInterface.Object, SpineInterface.TimeSlice}}, 1}})
precompile(Tuple{SpineOpt.var"#488#492"{SpineInterface.TimeSlice}, NamedTuple{(:unit, :t), Tuple{SpineInterface.Object, SpineInterface.TimeSlice}}})
precompile(Tuple{typeof(Base.getindex), Type{NamedTuple{(:unit, :t_before, :t_after), Tuple{SpineInterface.Object, SpineInterface.TimeSlice, SpineInterface.TimeSlice}}}, NamedTuple{(:unit, :t_before, :t_after), Tuple{SpineInterface.Object, SpineInterface.TimeSlice, SpineInterface.TimeSlice}}})
precompile(Tuple{Type{Base.Set{NamedTuple{(:unit, :t_before, :t_after), Tuple{SpineInterface.Object, SpineInterface.TimeSlice, SpineInterface.TimeSlice}}}}, Tuple{NamedTuple{(:unit, :t_before, :t_after), Tuple{SpineInterface.Object, SpineInterface.TimeSlice, SpineInterface.TimeSlice}}}})
precompile(Tuple{typeof(Base._unique_from), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{(:unit, :t), Tuple{SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#490#491"{SpineInterface.Anything, SpineInterface.Anything, JuMP.GenericModel{Float64}}}}, Array{NamedTuple{(:unit, :t_before, :t_after), Tuple{SpineInterface.Object, SpineInterface.TimeSlice, SpineInterface.TimeSlice}}, 1}, Base.Set{NamedTuple{(:unit, :t_before, :t_after), Tuple{SpineInterface.Object, SpineInterface.TimeSlice, SpineInterface.TimeSlice}}}, Tuple{Int64, Base.Generator{Array{NamedTuple{(:unit, :t), Tuple{SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#488#492"{SpineInterface.TimeSlice}}, Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{(:unit, :t), Tuple{SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#490#491"{SpineInterface.Anything, SpineInterface.Anything, JuMP.GenericModel{Float64}}}}, Tuple{Int64, Base.Generator{Array{NamedTuple{(:unit, :t), Tuple{SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#488#492"{SpineInterface.TimeSlice}}, Int64}})
precompile(Tuple{typeof(Base.in!), NamedTuple{(:unit, :t_before, :t_after), Tuple{SpineInterface.Object, SpineInterface.TimeSlice, SpineInterface.TimeSlice}}, Base.Set{NamedTuple{(:unit, :t_before, :t_after), Tuple{SpineInterface.Object, SpineInterface.TimeSlice, SpineInterface.TimeSlice}}}})
precompile(Tuple{typeof(Base.push!), Array{NamedTuple{(:unit, :t_before, :t_after), Tuple{SpineInterface.Object, SpineInterface.TimeSlice, SpineInterface.TimeSlice}}, 1}, NamedTuple{(:unit, :t_before, :t_after), Tuple{SpineInterface.Object, SpineInterface.TimeSlice, SpineInterface.TimeSlice}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1712#1713"{JuMP.GenericModel{Float64}}, Array{NamedTuple{(:unit, :t_before, :t_after), Tuple{SpineInterface.Object, SpineInterface.TimeSlice, SpineInterface.TimeSlice}}, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{NamedTuple{(:unit, :t_before, :t_after), Tuple{SpineInterface.Object, SpineInterface.TimeSlice, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#1712#1713"{JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.unique), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{(:unit, :t_before, :t_after), Tuple{SpineInterface.Object, SpineInterface.TimeSlice, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#1712#1713"{JuMP.GenericModel{Float64}}}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:unit, :t, :temporal_block), Tuple{SpineInterface.Object, Array{SpineInterface.TimeSlice, 1}, SpineInterface.Anything}}, typeof(SpineOpt.units_on_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{SpineOpt.var"##units_on_indices#1107", SpineInterface.Object, SpineInterface.Anything, Array{SpineInterface.TimeSlice, 1}, SpineInterface.Anything, typeof(SpineOpt.units_on_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:unit, :temporal_block, :_compact), Tuple{SpineInterface.Object, SpineInterface.Anything, Bool}}, SpineInterface.RelationshipClass})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{SpineInterface.Object, 1}, SpineInterface.Object, Base.Generator{Array{Symbol, 1}, SpineInterface.var"#208#214"{Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:unit, :temporal_block), Tuple{SpineInterface.Object, SpineInterface.Anything}}}}}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{SpineInterface.Object, 1}, Base.Generator{Array{Symbol, 1}, SpineInterface.var"#208#214"{Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:unit, :temporal_block), Tuple{SpineInterface.Object, SpineInterface.Anything}}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.get!), SpineInterface.var"#209#215"{Bool, Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:unit, :temporal_block), Tuple{SpineInterface.Object, SpineInterface.Anything}}}, SpineInterface.RelationshipClass}, Base.Dict{Any, Any}, Tuple{SpineInterface.Object, SpineInterface.Anything}})
precompile(Tuple{SpineInterface.var"#cond#216"{Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:unit, :temporal_block), Tuple{SpineInterface.Object, SpineInterface.Anything}}}}, NamedTuple{(:unit, :temporal_block), Tuple{SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{typeof(SpineOpt.active_stochastic_paths), JuMP.GenericModel{Float64}, Array{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1711#1714"{SpineInterface.TimeSlice, SpineInterface.TimeSlice, SpineInterface.Object}, Array{Array{SpineInterface.Object, 1}, 1}})
precompile(Tuple{SpineOpt.var"#1711#1714"{SpineInterface.TimeSlice, SpineInterface.TimeSlice, SpineInterface.Object}, Array{SpineInterface.Object, 1}})
precompile(Tuple{typeof(Base.getindex), Type{NamedTuple{(:unit, :stochastic_path, :t_before, :t_after), Tuple{SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice, SpineInterface.TimeSlice}}}, NamedTuple{(:unit, :stochastic_path, :t_before, :t_after), Tuple{SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice, SpineInterface.TimeSlice}}})
precompile(Tuple{Type{Base.Set{NamedTuple{(:unit, :stochastic_path, :t_before, :t_after), Tuple{SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice, SpineInterface.TimeSlice}}}}, Tuple{NamedTuple{(:unit, :stochastic_path, :t_before, :t_after), Tuple{SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice, SpineInterface.TimeSlice}}}})
precompile(Tuple{typeof(Base._unique_from), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{(:unit, :t_before, :t_after), Tuple{SpineInterface.Object, SpineInterface.TimeSlice, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#1712#1713"{JuMP.GenericModel{Float64}}}}, Array{NamedTuple{(:unit, :stochastic_path, :t_before, :t_after), Tuple{SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice, SpineInterface.TimeSlice}}, 1}, Base.Set{NamedTuple{(:unit, :stochastic_path, :t_before, :t_after), Tuple{SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice, SpineInterface.TimeSlice}}}, Tuple{Int64, Base.Generator{Array{Array{SpineInterface.Object, 1}, 1}, SpineOpt.var"#1711#1714"{SpineInterface.TimeSlice, SpineInterface.TimeSlice, SpineInterface.Object}}, Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{(:unit, :t_before, :t_after), Tuple{SpineInterface.Object, SpineInterface.TimeSlice, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#1712#1713"{JuMP.GenericModel{Float64}}}}, Tuple{Int64, Base.Generator{Array{Array{SpineInterface.Object, 1}, 1}, SpineOpt.var"#1711#1714"{SpineInterface.TimeSlice, SpineInterface.TimeSlice, SpineInterface.Object}}, Int64}})
precompile(Tuple{typeof(Base.in!), NamedTuple{(:unit, :stochastic_path, :t_before, :t_after), Tuple{SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice, SpineInterface.TimeSlice}}, Base.Set{NamedTuple{(:unit, :stochastic_path, :t_before, :t_after), Tuple{SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice, SpineInterface.TimeSlice}}}})
precompile(Tuple{typeof(Base.push!), Array{NamedTuple{(:unit, :stochastic_path, :t_before, :t_after), Tuple{SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice, SpineInterface.TimeSlice}}, 1}, NamedTuple{(:unit, :stochastic_path, :t_before, :t_after), Tuple{SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice, SpineInterface.TimeSlice}}})
precompile(Tuple{typeof(Base.isequal), Tuple{SpineInterface.Object, SpineInterface.Anything}, Tuple{SpineInterface.Object, SpineInterface.Object}})
precompile(Tuple{typeof(Base.hashindex), Tuple{SpineInterface.Anything, SpineInterface.Object}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1705#1708"{JuMP.GenericModel{Float64}, Base.Dict{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Base.Dict{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Base.Dict{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}, Array{NamedTuple{(:unit, :stochastic_path, :t_before, :t_after), Tuple{SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice, SpineInterface.TimeSlice}}, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Array{NamedTuple{(:unit, :stochastic_path, :t_before, :t_after), Tuple{SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#1705#1708"{JuMP.GenericModel{Float64}, Base.Dict{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Base.Dict{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Base.Dict{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}}})
precompile(Tuple{Type{NamedTuple{(:unit, :stochastic_scenario, :t, :temporal_block), T} where T<:Tuple}, Tuple{SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice, SpineInterface.Anything}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:unit, :stochastic_scenario, :t, :temporal_block), Tuple{SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice, SpineInterface.Anything}}, typeof(SpineOpt.units_on_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1109#1110"{Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice, JuMP.GenericModel{Float64}}, Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#1109#1110"{Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.unique), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#1109#1110"{Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice, JuMP.GenericModel{Float64}}}}})
precompile(Tuple{SpineOpt.var"#1109#1110"{Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice, JuMP.GenericModel{Float64}}, NamedTuple{(:unit, :temporal_block), Tuple{SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{typeof(Base._unique_from), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#1109#1110"{Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice, JuMP.GenericModel{Float64}}}}, Array{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, Base.Set{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}}, Tuple{Int64, Base.Generator{Array{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#1108#1111"{SpineInterface.Object}}, Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#1109#1110"{Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice, JuMP.GenericModel{Float64}}}}, Tuple{Int64, Base.Generator{Array{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#1108#1111"{SpineInterface.Object}}, Int64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1706#1709"{Base.Dict{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Base.Dict{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Base.Dict{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}, Array{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:init,), Tuple{Int64}}, typeof(SpineOpt.expr_sum), Base.Generator{Array{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#1706#1709"{Base.Dict{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Base.Dict{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Base.Dict{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1707#1710"{Base.Dict{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}, Array{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:init,), Tuple{Int64}}, typeof(SpineOpt.expr_sum), Base.Generator{Array{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#1707#1710"{Base.Dict{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Base.Dict{K, V} where V where K}, Base.Dict{NamedTuple{(:unit, :stochastic_path, :t_before, :t_after), Tuple{SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice, SpineInterface.TimeSlice}}, JuMP.ConstraintRef{JuMP.GenericModel{Float64}, MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.EqualTo{Float64}}, JuMP.ScalarShape}}, Symbol})
precompile(Tuple{typeof(SpineOpt.add_constraint_split_ramps!), JuMP.GenericModel{Float64}})
precompile(Tuple{typeof(Base.vcat), Array{Any, 1}, Array{Any, 1}, Array{Any, 1}, Vararg{Array{Any, 1}}})
precompile(Tuple{typeof(Base.unique!), Array{Any, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1849#1850"{JuMP.GenericModel{Float64}}, Array{Any, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{Any, 1}, SpineOpt.var"#1849#1850"{JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.unique), Base.Iterators.Flatten{Base.Generator{Array{Any, 1}, SpineOpt.var"#1849#1850"{JuMP.GenericModel{Float64}}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1825#1836"{JuMP.GenericModel{Float64}, Base.Dict{Any, Any}, Base.Dict{Any, Any}, Base.Dict{Any, Any}, Base.Dict{Any, Any}, Base.Dict{Any, Any}, Base.Dict{Any, Any}, Base.Dict{NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}, Array{Any, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Array{Any, 1}, SpineOpt.var"#1825#1836"{JuMP.GenericModel{Float64}, Base.Dict{Any, Any}, Base.Dict{Any, Any}, Base.Dict{Any, Any}, Base.Dict{Any, Any}, Base.Dict{Any, Any}, Base.Dict{Any, Any}, Base.Dict{NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}}})
precompile(Tuple{typeof(SpineOpt.add_constraint_ramp_up!), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1872#1873"{JuMP.GenericModel{Float64}, SpineInterface._StartRef, Base.Dict{Any, Any}, Base.Dict{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Base.Dict{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}, Array{Any, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Array{Any, 1}, SpineOpt.var"#1872#1873"{JuMP.GenericModel{Float64}, SpineInterface._StartRef, Base.Dict{Any, Any}, Base.Dict{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Base.Dict{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}}})
precompile(Tuple{typeof(SpineOpt.add_constraint_max_start_up_ramp!), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1880#1881"{JuMP.GenericModel{Float64}, SpineInterface._StartRef, Base.Dict{Any, Any}, Base.Dict{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}, Array{Any, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Array{Any, 1}, SpineOpt.var"#1880#1881"{JuMP.GenericModel{Float64}, SpineInterface._StartRef, Base.Dict{Any, Any}, Base.Dict{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}}})
precompile(Tuple{typeof(SpineOpt.add_constraint_min_start_up_ramp!), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1888#1889"{JuMP.GenericModel{Float64}, SpineInterface._StartRef, Base.Dict{Any, Any}, Base.Dict{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}, Array{Any, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Array{Any, 1}, SpineOpt.var"#1888#1889"{JuMP.GenericModel{Float64}, SpineInterface._StartRef, Base.Dict{Any, Any}, Base.Dict{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}}})
precompile(Tuple{typeof(SpineOpt.add_constraint_max_nonspin_ramp_up!), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1896#1898"{JuMP.GenericModel{Float64}, SpineInterface._StartRef, Base.Dict{Any, Any}, Base.Dict{Any, Any}}, Array{Any, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Array{Any, 1}, SpineOpt.var"#1896#1898"{JuMP.GenericModel{Float64}, SpineInterface._StartRef, Base.Dict{Any, Any}, Base.Dict{Any, Any}}}})
precompile(Tuple{typeof(SpineOpt.add_constraint_min_nonspin_ramp_up!), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1906#1908"{JuMP.GenericModel{Float64}, SpineInterface._StartRef, Base.Dict{Any, Any}, Base.Dict{Any, Any}}, Array{Any, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Array{Any, 1}, SpineOpt.var"#1906#1908"{JuMP.GenericModel{Float64}, SpineInterface._StartRef, Base.Dict{Any, Any}, Base.Dict{Any, Any}}}})
precompile(Tuple{typeof(SpineOpt.add_constraint_ramp_down!), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1916#1919"{JuMP.GenericModel{Float64}, SpineInterface._StartRef, Base.Dict{Any, Any}, Base.Dict{Any, Any}, Base.Dict{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Base.Dict{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Base.Dict{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}, Array{Any, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Array{Any, 1}, SpineOpt.var"#1916#1919"{JuMP.GenericModel{Float64}, SpineInterface._StartRef, Base.Dict{Any, Any}, Base.Dict{Any, Any}, Base.Dict{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Base.Dict{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Base.Dict{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}}})
precompile(Tuple{typeof(SpineOpt.add_constraint_max_shut_down_ramp!), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1928#1929"{JuMP.GenericModel{Float64}, SpineInterface._StartRef, Base.Dict{Any, Any}, Base.Dict{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}, Array{Any, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Array{Any, 1}, SpineOpt.var"#1928#1929"{JuMP.GenericModel{Float64}, SpineInterface._StartRef, Base.Dict{Any, Any}, Base.Dict{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}}})
precompile(Tuple{typeof(SpineOpt.add_constraint_min_shut_down_ramp!), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1936#1937"{JuMP.GenericModel{Float64}, SpineInterface._StartRef, Base.Dict{Any, Any}, Base.Dict{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}, Array{Any, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Array{Any, 1}, SpineOpt.var"#1936#1937"{JuMP.GenericModel{Float64}, SpineInterface._StartRef, Base.Dict{Any, Any}, Base.Dict{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}}})
precompile(Tuple{typeof(SpineOpt.add_constraint_max_nonspin_ramp_down!), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1944#1946"{JuMP.GenericModel{Float64}, SpineInterface._StartRef, Base.Dict{Any, Any}, Base.Dict{Any, Any}}, Array{Any, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Array{Any, 1}, SpineOpt.var"#1944#1946"{JuMP.GenericModel{Float64}, SpineInterface._StartRef, Base.Dict{Any, Any}, Base.Dict{Any, Any}}}})
precompile(Tuple{typeof(SpineOpt.add_constraint_min_nonspin_ramp_down!), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1954#1956"{JuMP.GenericModel{Float64}, SpineInterface._StartRef, Base.Dict{Any, Any}, Base.Dict{Any, Any}}, Array{Any, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Array{Any, 1}, SpineOpt.var"#1954#1956"{JuMP.GenericModel{Float64}, SpineInterface._StartRef, Base.Dict{Any, Any}, Base.Dict{Any, Any}}}})
precompile(Tuple{typeof(SpineOpt.add_constraint_res_minimum_node_state!), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{NamedTuple{(:node, :direction), T} where T<:Tuple}, Tuple{Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SpineInterface.Parameter}}}, SpineInterface.Object}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:node, :direction), Tuple{Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SpineInterface.Parameter}}}, SpineInterface.Object}}, typeof(SpineOpt.unit_flow_time_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{SpineOpt.var"##unit_flow_time_indices#1063", SpineInterface.Anything, Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SpineInterface.Parameter}}}, SpineInterface.Object, SpineInterface.Anything, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, typeof(SpineOpt.unit_flow_time_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{NamedTuple{(:unit, :node, :direction, :temporal_block, :_compact), T} where T<:Tuple}, Tuple{SpineInterface.Anything, Array{Any, 1}, SpineInterface.Object, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, Bool}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:unit, :node, :direction, :temporal_block, :_compact), Tuple{SpineInterface.Anything, Array{Any, 1}, SpineInterface.Object, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, Bool}}, SpineInterface.RelationshipClass})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{SpineInterface.Anything, 1}, SpineInterface.Anything, Base.Generator{Array{Symbol, 1}, SpineInterface.var"#208#214"{Base.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:unit, :node, :direction, :temporal_block), Tuple{SpineInterface.Anything, Array{Any, 1}, SpineInterface.Object, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}}}}}}, Int64})
precompile(Tuple{typeof(SpineInterface._immutable), Array{Any, 1}})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{SpineInterface.Anything, 1}, Tuple{}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Any, 1}, Base.Generator{Array{Symbol, 1}, SpineInterface.var"#208#214"{Base.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:unit, :node, :direction, :temporal_block), Tuple{SpineInterface.Anything, Array{Any, 1}, SpineInterface.Object, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}}}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.get!), SpineInterface.var"#209#215"{Bool, Base.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:unit, :node, :direction, :temporal_block), Tuple{SpineInterface.Anything, Array{Any, 1}, SpineInterface.Object, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}}}}, SpineInterface.RelationshipClass}, Base.Dict{Any, Any}, Tuple{SpineInterface.Anything, Tuple{}, SpineInterface.Object, SpineInterface.Object}})
precompile(Tuple{SpineInterface.var"#cond#216"{Base.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:unit, :node, :direction, :temporal_block), Tuple{SpineInterface.Anything, Array{Any, 1}, SpineInterface.Object, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}}}}}, NamedTuple{(:unit, :node, :direction, :temporal_block), NTuple{4, SpineInterface.Object}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1065#1066"{SpineInterface.Anything, JuMP.GenericModel{Float64}}, Array{Any, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{Any, 1}, SpineOpt.var"#1065#1066"{SpineInterface.Anything, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.unique), Base.Iterators.Flatten{Base.Generator{Array{Any, 1}, SpineOpt.var"#1065#1066"{SpineInterface.Anything, JuMP.GenericModel{Float64}}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1978#1979"{JuMP.GenericModel{Float64}}, Array{Any, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{Any, 1}, SpineOpt.var"#1978#1979"{JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.unique), Base.Iterators.Flatten{Base.Generator{Array{Any, 1}, SpineOpt.var"#1978#1979"{JuMP.GenericModel{Float64}}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1964#1970"{JuMP.GenericModel{Float64}, SpineInterface._StartRef, Base.Dict{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Base.Dict{NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}, Array{Any, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Array{Any, 1}, SpineOpt.var"#1964#1970"{JuMP.GenericModel{Float64}, SpineInterface._StartRef, Base.Dict{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Base.Dict{NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}}})
precompile(Tuple{typeof(SpineOpt.add_constraint_fix_node_pressure_point!), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1991#1992"{JuMP.GenericModel{Float64}, SpineInterface._StartRef, Base.Dict{Any, Any}, Base.Dict{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Base.Dict{Any, Any}}, Array{Any, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{Any, 1}, SpineOpt.var"#1991#1992"{JuMP.GenericModel{Float64}, SpineInterface._StartRef, Base.Dict{Any, Any}, Base.Dict{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Base.Dict{Any, Any}}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Iterators.Flatten{Base.Generator{Array{Any, 1}, SpineOpt.var"#1991#1992"{JuMP.GenericModel{Float64}, SpineInterface._StartRef, Base.Dict{Any, Any}, Base.Dict{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Base.Dict{Any, Any}}}}})
precompile(Tuple{typeof(SpineOpt.add_constraint_connection_unitary_gas_flow!), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#2080#2083"{JuMP.GenericModel{Float64}, Base.Dict{Any, Any}}, Array{Any, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Array{Any, 1}, SpineOpt.var"#2080#2083"{JuMP.GenericModel{Float64}, Base.Dict{Any, Any}}}})
precompile(Tuple{typeof(SpineOpt.add_constraint_compression_ratio!), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#2000#2003"{JuMP.GenericModel{Float64}, SpineInterface._StartRef, Base.Dict{Any, Any}}, Array{Any, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Array{Any, 1}, SpineOpt.var"#2000#2003"{JuMP.GenericModel{Float64}, SpineInterface._StartRef, Base.Dict{Any, Any}}}})
precompile(Tuple{typeof(SpineOpt.add_constraint_storage_line_pack!), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#2012#2013"{JuMP.GenericModel{Float64}, Base.Dict{Any, Any}, Base.Dict{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}, Array{Any, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Array{Any, 1}, SpineOpt.var"#2012#2013"{JuMP.GenericModel{Float64}, Base.Dict{Any, Any}, Base.Dict{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}}})
precompile(Tuple{typeof(SpineOpt.add_constraint_connection_flow_gas_capacity!), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#2020#2021"{JuMP.GenericModel{Float64}, Base.Dict{Any, Any}, Base.Dict{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}, Array{Any, 1}})
precompile(Tuple{typeof(Base.:(/)), MutableArithmetics.Zero, Int64})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Array{Any, 1}, SpineOpt.var"#2020#2021"{JuMP.GenericModel{Float64}, Base.Dict{Any, Any}, Base.Dict{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}}})
precompile(Tuple{typeof(SpineOpt.add_constraint_max_node_pressure!), JuMP.GenericModel{Float64}})
precompile(Tuple{SpineOpt.var"##node_pressure_indices#1163", Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SpineInterface.Parameter}}}, SpineInterface.Anything, SpineInterface.Anything, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, typeof(SpineOpt.node_pressure_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{typeof(Base.intersect), Array{Any, 1}, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}})
precompile(Tuple{Type{NamedTuple{(:node, :stochastic_scenario, :t, :temporal_block), T} where T<:Tuple}, Tuple{Array{Any, 1}, SpineInterface.Anything, SpineInterface.Anything, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:node, :stochastic_scenario, :t, :temporal_block), Tuple{Array{Any, 1}, SpineInterface.Anything, SpineInterface.Anything, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}}}, typeof(SpineOpt.node_stochastic_time_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#469#470"{Array{Any, 1}, SpineInterface.Anything, JuMP.GenericModel{Float64}}, Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#469#470"{Array{Any, 1}, SpineInterface.Anything, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.unique), Base.Iterators.Flatten{Base.Generator{Array{NamedTuple{K, V} where V<:Tuple{Vararg{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}}} where K, 1}, SpineOpt.var"#469#470"{Array{Any, 1}, SpineInterface.Anything, JuMP.GenericModel{Float64}}}}})
precompile(Tuple{SpineOpt.var"#469#470"{Array{Any, 1}, SpineInterface.Anything, JuMP.GenericModel{Float64}}, NamedTuple{(:model, :temporal_block), Tuple{SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:node, :temporal_block, :_compact), Tuple{Array{Any, 1}, SpineInterface.Object, Bool}}, SpineInterface.RelationshipClass})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{}, 1}, Tuple{}, Base.Generator{Array{Symbol, 1}, SpineInterface.var"#208#214"{Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:node, :temporal_block), Tuple{Array{Any, 1}, SpineInterface.Object}}}}}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Any, 1}, Base.Generator{Array{Symbol, 1}, SpineInterface.var"#208#214"{Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:node, :temporal_block), Tuple{Array{Any, 1}, SpineInterface.Object}}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.get!), SpineInterface.var"#209#215"{Bool, Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:node, :temporal_block), Tuple{Array{Any, 1}, SpineInterface.Object}}}, SpineInterface.RelationshipClass}, Base.Dict{Any, Any}, Tuple{Tuple{}, SpineInterface.Object}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#2033#2034"{JuMP.GenericModel{Float64}}, Array{Any, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{Any, 1}, SpineOpt.var"#2033#2034"{JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.unique), Base.Iterators.Flatten{Base.Generator{Array{Any, 1}, SpineOpt.var"#2033#2034"{JuMP.GenericModel{Float64}}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#2028#2030"{JuMP.GenericModel{Float64}, SpineInterface._StartRef, Base.Dict{Any, Any}}, Array{Any, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Array{Any, 1}, SpineOpt.var"#2028#2030"{JuMP.GenericModel{Float64}, SpineInterface._StartRef, Base.Dict{Any, Any}}}})
precompile(Tuple{typeof(SpineOpt.add_constraint_min_node_pressure!), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#2043#2044"{JuMP.GenericModel{Float64}}, Array{Any, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{Any, 1}, SpineOpt.var"#2043#2044"{JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.unique), Base.Iterators.Flatten{Base.Generator{Array{Any, 1}, SpineOpt.var"#2043#2044"{JuMP.GenericModel{Float64}}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#2038#2040"{JuMP.GenericModel{Float64}, SpineInterface._StartRef, Base.Dict{Any, Any}}, Array{Any, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Array{Any, 1}, SpineOpt.var"#2038#2040"{JuMP.GenericModel{Float64}, SpineInterface._StartRef, Base.Dict{Any, Any}}}})
precompile(Tuple{typeof(SpineOpt.add_constraint_node_voltage_angle!), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#2068#2069"{JuMP.GenericModel{Float64}, SpineInterface._StartRef, Base.Dict{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Base.Dict{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}, Array{Any, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Array{Any, 1}, SpineOpt.var"#2068#2069"{JuMP.GenericModel{Float64}, SpineInterface._StartRef, Base.Dict{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Base.Dict{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}}})
precompile(Tuple{typeof(SpineOpt.add_constraint_max_node_voltage_angle!), JuMP.GenericModel{Float64}})
precompile(Tuple{SpineOpt.var"##node_voltage_angle_indices#1166", Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SpineInterface.Parameter}}}, SpineInterface.Anything, SpineInterface.Anything, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, typeof(SpineOpt.node_voltage_angle_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{typeof(Base.intersect), Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SpineInterface.Parameter}}}, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#2048#2050"{JuMP.GenericModel{Float64}, SpineInterface._StartRef, Base.Dict{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}, Array{Any, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Array{Any, 1}, SpineOpt.var"#2048#2050"{JuMP.GenericModel{Float64}, SpineInterface._StartRef, Base.Dict{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}}})
precompile(Tuple{typeof(SpineOpt.add_constraint_min_node_voltage_angle!), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#2058#2060"{JuMP.GenericModel{Float64}, SpineInterface._StartRef, Base.Dict{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}, Array{Any, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Array{Any, 1}, SpineOpt.var"#2058#2060"{JuMP.GenericModel{Float64}, SpineInterface._StartRef, Base.Dict{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}}}})
precompile(Tuple{typeof(SpineOpt.add_constraint_entity_investment_group!), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#2108#2109"{JuMP.GenericModel{Float64}, Base.Dict{Any, Any}, Base.Dict{Any, Any}, Base.Dict{Any, Any}}, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, SpineOpt.var"#2108#2109"{JuMP.GenericModel{Float64}, Base.Dict{Any, Any}, Base.Dict{Any, Any}, Base.Dict{Any, Any}}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Iterators.Flatten{Base.Generator{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, SpineOpt.var"#2108#2109"{JuMP.GenericModel{Float64}, Base.Dict{Any, Any}, Base.Dict{Any, Any}, Base.Dict{Any, Any}}}}})
precompile(Tuple{typeof(Base.iterate), Base.Dict{Symbol, Base.Dict{K, V} where V where K}})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{Symbol, Base.Dict{K, V} where V where K}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{Symbol, Base.Dict{K, V} where V where K}, Int64, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Dict{Any, Any}})
precompile(Tuple{typeof(Base.iterate), Base.Dict{Symbol, Base.Dict{K, V} where V where K}, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Dict{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.ConstraintRef{JuMP.GenericModel{Float64}, MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.LessThan{Float64}}, JuMP.ScalarShape}}})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.ConstraintRef{JuMP.GenericModel{Float64}, MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.LessThan{Float64}}, JuMP.ScalarShape}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.ConstraintRef{JuMP.GenericModel{Float64}, MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.LessThan{Float64}}, JuMP.ScalarShape}}, Int64, Int64})
precompile(Tuple{typeof(Base.string), Symbol, NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}})
precompile(Tuple{typeof(SpineOpt._sanitize_constraint_name), String})
precompile(Tuple{typeof(SpineOpt._set_name), JuMP.ConstraintRef{JuMP.GenericModel{Float64}, MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.LessThan{Float64}}, JuMP.ScalarShape}, String})
precompile(Tuple{typeof(MathOptInterface.set), MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{HiGHS.Optimizer}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.GenericModel{Float64, MathOptInterface.Utilities.ObjectiveContainer{Float64}, MathOptInterface.Utilities.VariablesContainer{Float64}, MathOptInterface.Utilities.ModelFunctionConstraints{Float64}}}}, MathOptInterface.ConstraintName, MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.LessThan{Float64}}, String})
precompile(Tuple{typeof(Base.iterate), Base.Dict{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.ConstraintRef{JuMP.GenericModel{Float64}, MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.LessThan{Float64}}, JuMP.ScalarShape}}, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Dict{NamedTuple{(:unit, :node, :direction, :stochastic_path, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice}}, JuMP.ConstraintRef{JuMP.GenericModel{Float64}, MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.LessThan{Float64}}, JuMP.ScalarShape}}})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{NamedTuple{(:unit, :node, :direction, :stochastic_path, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice}}, JuMP.ConstraintRef{JuMP.GenericModel{Float64}, MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.LessThan{Float64}}, JuMP.ScalarShape}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{NamedTuple{(:unit, :node, :direction, :stochastic_path, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice}}, JuMP.ConstraintRef{JuMP.GenericModel{Float64}, MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.LessThan{Float64}}, JuMP.ScalarShape}}, Int64, Int64})
precompile(Tuple{typeof(Base.string), Symbol, NamedTuple{(:unit, :node, :direction, :stochastic_path, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice}}})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:unit, :node, :direction, :stochastic_path, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice}}})
precompile(Tuple{typeof(Base.typeinfo_eltype), Type})
precompile(Tuple{typeof(Base.iterate), Base.Dict{NamedTuple{(:unit, :node, :direction, :stochastic_path, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice}}, JuMP.ConstraintRef{JuMP.GenericModel{Float64}, MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.LessThan{Float64}}, JuMP.ScalarShape}}, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Dict{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.ConstraintRef{JuMP.GenericModel{Float64}, MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.EqualTo{Float64}}, JuMP.ScalarShape}}})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.ConstraintRef{JuMP.GenericModel{Float64}, MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.EqualTo{Float64}}, JuMP.ScalarShape}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.ConstraintRef{JuMP.GenericModel{Float64}, MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.EqualTo{Float64}}, JuMP.ScalarShape}}, Int64, Int64})
precompile(Tuple{typeof(Base.string), Symbol, NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}})
precompile(Tuple{typeof(SpineOpt._set_name), JuMP.ConstraintRef{JuMP.GenericModel{Float64}, MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.EqualTo{Float64}}, JuMP.ScalarShape}, String})
precompile(Tuple{typeof(MathOptInterface.set), MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{HiGHS.Optimizer}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.GenericModel{Float64, MathOptInterface.Utilities.ObjectiveContainer{Float64}, MathOptInterface.Utilities.VariablesContainer{Float64}, MathOptInterface.Utilities.ModelFunctionConstraints{Float64}}}}, MathOptInterface.ConstraintName, MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.EqualTo{Float64}}, String})
precompile(Tuple{typeof(Base.iterate), Base.Dict{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.ConstraintRef{JuMP.GenericModel{Float64}, MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.EqualTo{Float64}}, JuMP.ScalarShape}}, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Dict{NamedTuple{(:unit, :stochastic_path, :t_before, :t_after), Tuple{SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice, SpineInterface.TimeSlice}}, JuMP.ConstraintRef{JuMP.GenericModel{Float64}, MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.EqualTo{Float64}}, JuMP.ScalarShape}}})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{NamedTuple{(:unit, :stochastic_path, :t_before, :t_after), Tuple{SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice, SpineInterface.TimeSlice}}, JuMP.ConstraintRef{JuMP.GenericModel{Float64}, MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.EqualTo{Float64}}, JuMP.ScalarShape}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{NamedTuple{(:unit, :stochastic_path, :t_before, :t_after), Tuple{SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice, SpineInterface.TimeSlice}}, JuMP.ConstraintRef{JuMP.GenericModel{Float64}, MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.EqualTo{Float64}}, JuMP.ScalarShape}}, Int64, Int64})
precompile(Tuple{typeof(Base.string), Symbol, NamedTuple{(:unit, :stochastic_path, :t_before, :t_after), Tuple{SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice, SpineInterface.TimeSlice}}})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:unit, :stochastic_path, :t_before, :t_after), Tuple{SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice, SpineInterface.TimeSlice}}})
precompile(Tuple{typeof(Base.iterate), Base.Dict{NamedTuple{(:unit, :stochastic_path, :t_before, :t_after), Tuple{SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice, SpineInterface.TimeSlice}}, JuMP.ConstraintRef{JuMP.GenericModel{Float64}, MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.EqualTo{Float64}}, JuMP.ScalarShape}}, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Dict{NamedTuple{(:connection, :node1, :node2, :stochastic_path, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice}}, JuMP.ConstraintRef{JuMP.GenericModel{Float64}, MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.EqualTo{Float64}}, JuMP.ScalarShape}}})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{NamedTuple{(:connection, :node1, :node2, :stochastic_path, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice}}, JuMP.ConstraintRef{JuMP.GenericModel{Float64}, MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.EqualTo{Float64}}, JuMP.ScalarShape}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{NamedTuple{(:connection, :node1, :node2, :stochastic_path, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice}}, JuMP.ConstraintRef{JuMP.GenericModel{Float64}, MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.EqualTo{Float64}}, JuMP.ScalarShape}}, Int64, Int64})
precompile(Tuple{typeof(Base.string), Symbol, NamedTuple{(:connection, :node1, :node2, :stochastic_path, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice}}})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:connection, :node1, :node2, :stochastic_path, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice}}})
precompile(Tuple{typeof(Base.iterate), Base.Dict{NamedTuple{(:connection, :node1, :node2, :stochastic_path, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice}}, JuMP.ConstraintRef{JuMP.GenericModel{Float64}, MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.EqualTo{Float64}}, JuMP.ScalarShape}}, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Dict{NamedTuple{(:connection, :node, :direction, :stochastic_path, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice}}, JuMP.ConstraintRef{JuMP.GenericModel{Float64}, MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.LessThan{Float64}}, JuMP.ScalarShape}}})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{NamedTuple{(:connection, :node, :direction, :stochastic_path, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice}}, JuMP.ConstraintRef{JuMP.GenericModel{Float64}, MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.LessThan{Float64}}, JuMP.ScalarShape}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{NamedTuple{(:connection, :node, :direction, :stochastic_path, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice}}, JuMP.ConstraintRef{JuMP.GenericModel{Float64}, MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.LessThan{Float64}}, JuMP.ScalarShape}}, Int64, Int64})
precompile(Tuple{typeof(Base.string), Symbol, NamedTuple{(:connection, :node, :direction, :stochastic_path, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice}}})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:connection, :node, :direction, :stochastic_path, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice}}})
precompile(Tuple{typeof(Base.iterate), Base.Dict{NamedTuple{(:connection, :node, :direction, :stochastic_path, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice}}, JuMP.ConstraintRef{JuMP.GenericModel{Float64}, MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.LessThan{Float64}}, JuMP.ScalarShape}}, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Dict{NamedTuple{(:node, :stochastic_path, :t_before, :t_after), Tuple{SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice, SpineInterface.TimeSlice}}, JuMP.ConstraintRef{JuMP.GenericModel{Float64}, MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.EqualTo{Float64}}, JuMP.ScalarShape}}})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{NamedTuple{(:node, :stochastic_path, :t_before, :t_after), Tuple{SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice, SpineInterface.TimeSlice}}, JuMP.ConstraintRef{JuMP.GenericModel{Float64}, MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.EqualTo{Float64}}, JuMP.ScalarShape}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{NamedTuple{(:node, :stochastic_path, :t_before, :t_after), Tuple{SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice, SpineInterface.TimeSlice}}, JuMP.ConstraintRef{JuMP.GenericModel{Float64}, MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.EqualTo{Float64}}, JuMP.ScalarShape}}, Int64, Int64})
precompile(Tuple{typeof(Base.string), Symbol, NamedTuple{(:node, :stochastic_path, :t_before, :t_after), Tuple{SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice, SpineInterface.TimeSlice}}})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:node, :stochastic_path, :t_before, :t_after), Tuple{SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice, SpineInterface.TimeSlice}}})
precompile(Tuple{typeof(Base.iterate), Base.Dict{NamedTuple{(:node, :stochastic_path, :t_before, :t_after), Tuple{SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice, SpineInterface.TimeSlice}}, JuMP.ConstraintRef{JuMP.GenericModel{Float64}, MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.EqualTo{Float64}}, JuMP.ScalarShape}}, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Dict{NamedTuple{(:unit, :node1, :node2, :stochastic_path, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice}}, JuMP.ConstraintRef{JuMP.GenericModel{Float64}, MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.EqualTo{Float64}}, JuMP.ScalarShape}}})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{NamedTuple{(:unit, :node1, :node2, :stochastic_path, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice}}, JuMP.ConstraintRef{JuMP.GenericModel{Float64}, MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.EqualTo{Float64}}, JuMP.ScalarShape}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{NamedTuple{(:unit, :node1, :node2, :stochastic_path, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice}}, JuMP.ConstraintRef{JuMP.GenericModel{Float64}, MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.EqualTo{Float64}}, JuMP.ScalarShape}}, Int64, Int64})
precompile(Tuple{typeof(Base.string), Symbol, NamedTuple{(:unit, :node1, :node2, :stochastic_path, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice}}})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:unit, :node1, :node2, :stochastic_path, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice}}})
precompile(Tuple{typeof(Base.iterate), Base.Dict{NamedTuple{(:unit, :node1, :node2, :stochastic_path, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, Array{SpineInterface.Object, 1}, SpineInterface.TimeSlice}}, JuMP.ConstraintRef{JuMP.GenericModel{Float64}, MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.EqualTo{Float64}}, JuMP.ScalarShape}}, Int64})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:alternative_objective,), Tuple{SpineOpt.var"#92#98"}}, typeof(SpineOpt._set_objective!), JuMP.GenericModel{Float64}})
precompile(Tuple{typeof(Base.collect), Array{Any, 1}})
precompile(Tuple{typeof(Base.filter!), SpineOpt.var"#167#168"{Array{Any, 1}}, Array{Any, 1}})
precompile(Tuple{SpineOpt.var"#167#168"{Array{Any, 1}}, SpineInterface.TimeSlice})
precompile(Tuple{typeof(SpineOpt.unit_investment_costs), JuMP.GenericModel{Float64}, Array{Any, 1}})
precompile(Tuple{SpineOpt.var"##units_invested_available_indices#1112", Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SpineInterface.Parameter}}}, SpineInterface.Anything, Array{Any, 1}, SpineInterface.Anything, typeof(SpineOpt.units_invested_available_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{NamedTuple{(:unit, :temporal_block, :_compact), T} where T<:Tuple}, Tuple{Array{Any, 1}, SpineInterface.Anything, Bool}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:unit, :temporal_block, :_compact), Tuple{Array{Any, 1}, SpineInterface.Anything, Bool}}, SpineInterface.RelationshipClass})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{}, 1}, Tuple{}, Base.Generator{Array{Symbol, 1}, SpineInterface.var"#208#214"{Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:unit, :temporal_block), Tuple{Array{Any, 1}, SpineInterface.Anything}}}}}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Any, 1}, Base.Generator{Array{Symbol, 1}, SpineInterface.var"#208#214"{Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:unit, :temporal_block), Tuple{Array{Any, 1}, SpineInterface.Anything}}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.get!), SpineInterface.var"#209#215"{Bool, Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:unit, :temporal_block), Tuple{Array{Any, 1}, SpineInterface.Anything}}}, SpineInterface.RelationshipClass}, Base.Dict{Any, Any}, Tuple{Tuple{}, SpineInterface.Anything}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1114#1115"{SpineInterface.Anything, Array{Any, 1}, JuMP.GenericModel{Float64}}, Array{Any, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{Any, 1}, SpineOpt.var"#1114#1115"{SpineInterface.Anything, Array{Any, 1}, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.unique), Base.Iterators.Flatten{Base.Generator{Array{Any, 1}, SpineOpt.var"#1114#1115"{SpineInterface.Anything, Array{Any, 1}, JuMP.GenericModel{Float64}}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1224#1226"{SpineInterface._StartRef, Base.Dict{Any, Any}, JuMP.GenericModel{Float64}}, Array{Any, 1}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:init,), Tuple{Int64}}, typeof(SpineOpt.expr_sum), Base.Generator{Array{Any, 1}, SpineOpt.var"#1224#1226"{SpineInterface._StartRef, Base.Dict{Any, Any}, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(SpineOpt.connection_investment_costs), JuMP.GenericModel{Float64}, Array{Any, 1}})
precompile(Tuple{SpineOpt.var"##connections_invested_available_indices#1092", Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SpineInterface.Parameter}}}, SpineInterface.Anything, Array{Any, 1}, SpineInterface.Anything, typeof(SpineOpt.connections_invested_available_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{NamedTuple{(:connection, :temporal_block, :_compact), T} where T<:Tuple}, Tuple{Array{Any, 1}, SpineInterface.Anything, Bool}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:connection, :temporal_block, :_compact), Tuple{Array{Any, 1}, SpineInterface.Anything, Bool}}, SpineInterface.RelationshipClass})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{}, 1}, Tuple{}, Base.Generator{Array{Symbol, 1}, SpineInterface.var"#208#214"{Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:connection, :temporal_block), Tuple{Array{Any, 1}, SpineInterface.Anything}}}}}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Any, 1}, Base.Generator{Array{Symbol, 1}, SpineInterface.var"#208#214"{Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:connection, :temporal_block), Tuple{Array{Any, 1}, SpineInterface.Anything}}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.get!), SpineInterface.var"#209#215"{Bool, Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:connection, :temporal_block), Tuple{Array{Any, 1}, SpineInterface.Anything}}}, SpineInterface.RelationshipClass}, Base.Dict{Any, Any}, Tuple{Tuple{}, SpineInterface.Anything}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1094#1095"{SpineInterface.Anything, Array{Any, 1}, JuMP.GenericModel{Float64}}, Array{Any, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{Any, 1}, SpineOpt.var"#1094#1095"{SpineInterface.Anything, Array{Any, 1}, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.unique), Base.Iterators.Flatten{Base.Generator{Array{Any, 1}, SpineOpt.var"#1094#1095"{SpineInterface.Anything, Array{Any, 1}, JuMP.GenericModel{Float64}}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1228#1230"{SpineInterface._StartRef, Base.Dict{Any, Any}, JuMP.GenericModel{Float64}}, Array{Any, 1}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:init,), Tuple{Int64}}, typeof(SpineOpt.expr_sum), Base.Generator{Array{Any, 1}, SpineOpt.var"#1228#1230"{SpineInterface._StartRef, Base.Dict{Any, Any}, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(SpineOpt.storage_investment_costs), JuMP.GenericModel{Float64}, Array{Any, 1}})
precompile(Tuple{SpineOpt.var"##storages_invested_available_indices#1097", Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SpineInterface.Parameter}}}, SpineInterface.Anything, Array{Any, 1}, SpineInterface.Anything, typeof(SpineOpt.storages_invested_available_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{NamedTuple{(:node, :temporal_block, :_compact), T} where T<:Tuple}, Tuple{Array{Any, 1}, SpineInterface.Anything, Bool}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1099#1100"{SpineInterface.Anything, Array{Any, 1}, JuMP.GenericModel{Float64}}, Array{Any, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{Any, 1}, SpineOpt.var"#1099#1100"{SpineInterface.Anything, Array{Any, 1}, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.unique), Base.Iterators.Flatten{Base.Generator{Array{Any, 1}, SpineOpt.var"#1099#1100"{SpineInterface.Anything, Array{Any, 1}, JuMP.GenericModel{Float64}}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1232#1234"{SpineInterface._StartRef, Base.Dict{Any, Any}, JuMP.GenericModel{Float64}}, Array{Any, 1}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:init,), Tuple{Int64}}, typeof(SpineOpt.expr_sum), Base.Generator{Array{Any, 1}, SpineOpt.var"#1232#1234"{SpineInterface._StartRef, Base.Dict{Any, Any}, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(SpineOpt.mp_objective_penalties), JuMP.GenericModel{Float64}, Array{Any, 1}})
precompile(Tuple{typeof(Base.get), Base.Dict{Symbol, Base.Dict{K, V} where V where K}, Symbol, Nothing})
precompile(Tuple{typeof(SpineOpt.variable_om_costs), JuMP.GenericModel{Float64}, Array{Any, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1174#1175"{Array{Any, 1}, SpineInterface._StartRef, Base.Dict{NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, JuMP.GenericModel{Float64}}, Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SpineInterface.Parameter}}}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SpineInterface.Parameter}}}, SpineOpt.var"#1174#1175"{Array{Any, 1}, SpineInterface._StartRef, Base.Dict{NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:init,), Tuple{Int64}}, typeof(SpineOpt.expr_sum), Base.Iterators.Flatten{Base.Generator{Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SpineInterface.Parameter}}}, SpineOpt.var"#1174#1175"{Array{Any, 1}, SpineInterface._StartRef, Base.Dict{NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, JuMP.GenericModel{Float64}}}}})
precompile(Tuple{typeof(SpineOpt.fixed_om_costs), JuMP.GenericModel{Float64}, Array{Any, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1181#1182"{Array{Any, 1}, SpineInterface._StartRef, Base.Dict{Any, Any}, JuMP.GenericModel{Float64}}, Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SpineInterface.Parameter}}}, Tuple{Symbol}, NamedTuple{(:unit,), Tuple{Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SpineInterface.Parameter}}}}}}, SpineInterface.Parameter}}}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SpineInterface.Parameter}}}, Tuple{Symbol}, NamedTuple{(:unit,), Tuple{Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SpineInterface.Parameter}}}}}}, SpineInterface.Parameter}}}, SpineOpt.var"#1181#1182"{Array{Any, 1}, SpineInterface._StartRef, Base.Dict{Any, Any}, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:unit,), Tuple{Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SpineInterface.Parameter}}}}}}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Union{Nothing, Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SpineInterface.Parameter}}}}, 1}}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SpineInterface.Parameter}}}, 1}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:init,), Tuple{Int64}}, typeof(SpineOpt.expr_sum), Base.Iterators.Flatten{Base.Generator{Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SpineInterface.Parameter}}}, Tuple{Symbol}, NamedTuple{(:unit,), Tuple{Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SpineInterface.Parameter}}}}}}, SpineInterface.Parameter}}}, SpineOpt.var"#1181#1182"{Array{Any, 1}, SpineInterface._StartRef, Base.Dict{Any, Any}, JuMP.GenericModel{Float64}}}}})
precompile(Tuple{typeof(Base.get!), SpineInterface.var"#209#215"{Bool, Base.Pairs{Symbol, Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SpineInterface.Parameter}}}, Tuple{Symbol}, NamedTuple{(:unit,), Tuple{Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SpineInterface.Parameter}}}}}}, SpineInterface.RelationshipClass}, Base.Dict{Any, Any}, Tuple{Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SpineInterface.Parameter}}}, Nothing, Nothing}})
precompile(Tuple{SpineInterface.var"#cond#216"{Base.Pairs{Symbol, Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SpineInterface.Parameter}}}, Tuple{Symbol}, NamedTuple{(:unit,), Tuple{Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SpineInterface.Parameter}}}}}}}, NamedTuple{(:unit, :node, :direction), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{typeof(SpineOpt.taxes), JuMP.GenericModel{Float64}, Array{Any, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1188#1198"{Array{Any, 1}, SpineInterface._StartRef, Base.Dict{NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, JuMP.GenericModel{Float64}}, Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SpineInterface.Parameter}}}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SpineInterface.Parameter}}}, SpineOpt.var"#1188#1198"{Array{Any, 1}, SpineInterface._StartRef, Base.Dict{NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:init,), Tuple{Int64}}, typeof(SpineOpt.expr_sum), Base.Iterators.Flatten{Base.Generator{Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SpineInterface.Parameter}}}, SpineOpt.var"#1188#1198"{Array{Any, 1}, SpineInterface._StartRef, Base.Dict{NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, JuMP.GenericModel{Float64}}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1191#1201"{Array{Any, 1}, SpineInterface._StartRef, Base.Dict{NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, JuMP.GenericModel{Float64}}, Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SpineInterface.Parameter}}}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SpineInterface.Parameter}}}, SpineOpt.var"#1191#1201"{Array{Any, 1}, SpineInterface._StartRef, Base.Dict{NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:init,), Tuple{Int64}}, typeof(SpineOpt.expr_sum), Base.Iterators.Flatten{Base.Generator{Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SpineInterface.Parameter}}}, SpineOpt.var"#1191#1201"{Array{Any, 1}, SpineInterface._StartRef, Base.Dict{NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, JuMP.GenericModel{Float64}}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1194#1204"{Array{Any, 1}, SpineInterface._StartRef, Base.Dict{NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, JuMP.GenericModel{Float64}}, Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SpineInterface.Parameter}}}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SpineInterface.Parameter}}}, SpineOpt.var"#1194#1204"{Array{Any, 1}, SpineInterface._StartRef, Base.Dict{NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:init,), Tuple{Int64}}, typeof(SpineOpt.expr_sum), Base.Iterators.Flatten{Base.Generator{Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SpineInterface.Parameter}}}, SpineOpt.var"#1194#1204"{Array{Any, 1}, SpineInterface._StartRef, Base.Dict{NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, JuMP.GenericModel{Float64}}}}})
precompile(Tuple{SpineInterface.ParameterValue{SpineInterface.TimeSeries{Float64}}})
precompile(Tuple{SpineOpt.var"#1194#1204"{Array{Any, 1}, SpineInterface._StartRef, Base.Dict{NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, JuMP.GenericModel{Float64}}, SpineInterface.Object})
precompile(Tuple{Type{NamedTuple{(:node, :direction, :t), T} where T<:Tuple}, Tuple{SpineInterface.Object, SpineInterface.Object, Array{Any, 1}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:node, :direction, :t), Tuple{SpineInterface.Object, SpineInterface.Object, Array{Any, 1}}}, typeof(SpineOpt.unit_flow_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{SpineOpt.var"##unit_flow_indices#1058", SpineInterface.Anything, SpineInterface.Object, SpineInterface.Object, SpineInterface.Anything, Array{Any, 1}, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, typeof(SpineOpt.unit_flow_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{NamedTuple{(:unit, :node, :direction, :temporal_block, :_compact), T} where T<:Tuple}, Tuple{SpineInterface.Anything, Array{SpineInterface.Object, 1}, SpineInterface.Object, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, Bool}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:unit, :node, :direction, :temporal_block, :_compact), Tuple{SpineInterface.Anything, Array{SpineInterface.Object, 1}, SpineInterface.Object, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, Bool}}, SpineInterface.RelationshipClass})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{SpineInterface.Anything, 1}, SpineInterface.Anything, Base.Generator{Array{Symbol, 1}, SpineInterface.var"#208#214"{Base.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:unit, :node, :direction, :temporal_block), Tuple{SpineInterface.Anything, Array{SpineInterface.Object, 1}, SpineInterface.Object, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}}}}}}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Any, 1}, Base.Generator{Array{Symbol, 1}, SpineInterface.var"#208#214"{Base.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:unit, :node, :direction, :temporal_block), Tuple{SpineInterface.Anything, Array{SpineInterface.Object, 1}, SpineInterface.Object, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}}}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.get!), SpineInterface.var"#209#215"{Bool, Base.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:unit, :node, :direction, :temporal_block), Tuple{SpineInterface.Anything, Array{SpineInterface.Object, 1}, SpineInterface.Object, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}}}}, SpineInterface.RelationshipClass}, Base.Dict{Any, Any}, Tuple{SpineInterface.Anything, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object}})
precompile(Tuple{SpineInterface.var"#cond#216"{Base.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:unit, :node, :direction, :temporal_block), Tuple{SpineInterface.Anything, Array{SpineInterface.Object, 1}, SpineInterface.Object, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}}}}}, NamedTuple{(:unit, :node, :direction, :temporal_block), NTuple{4, SpineInterface.Object}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1060#1061"{SpineInterface.Anything, Array{Any, 1}, JuMP.GenericModel{Float64}}, Array{Any, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{Any, 1}, SpineOpt.var"#1060#1061"{SpineInterface.Anything, Array{Any, 1}, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.unique), Base.Iterators.Flatten{Base.Generator{Array{Any, 1}, SpineOpt.var"#1060#1061"{SpineInterface.Anything, Array{Any, 1}, JuMP.GenericModel{Float64}}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1192#1205"{SpineInterface._StartRef, Base.Dict{NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, JuMP.GenericModel{Float64}}, Array{Any, 1}})
precompile(Tuple{typeof(MutableArithmetics.operate!!), typeof(MutableArithmetics.add_mul), JuMP.GenericAffExpr{Float64, JuMP.GenericVariableRef{Float64}}, JuMP.GenericAffExpr{Float64, JuMP.GenericVariableRef{Float64}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1197#1207"{Array{Any, 1}, SpineInterface._StartRef, Base.Dict{NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, JuMP.GenericModel{Float64}}, Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SpineInterface.Parameter}}}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SpineInterface.Parameter}}}, SpineOpt.var"#1197#1207"{Array{Any, 1}, SpineInterface._StartRef, Base.Dict{NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:init,), Tuple{Int64}}, typeof(SpineOpt.expr_sum), Base.Iterators.Flatten{Base.Generator{Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SpineInterface.Parameter}}}, SpineOpt.var"#1197#1207"{Array{Any, 1}, SpineInterface._StartRef, Base.Dict{NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, JuMP.GenericModel{Float64}}}}})
precompile(Tuple{typeof(SpineOpt.fuel_costs), JuMP.GenericModel{Float64}, Array{Any, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1220#1221"{Array{Any, 1}, SpineInterface._StartRef, Base.Dict{NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, JuMP.GenericModel{Float64}}, Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SpineInterface.Parameter}}}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SpineInterface.Parameter}}}, SpineOpt.var"#1220#1221"{Array{Any, 1}, SpineInterface._StartRef, Base.Dict{NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:init,), Tuple{Int64}}, typeof(SpineOpt.expr_sum), Base.Iterators.Flatten{Base.Generator{Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SpineInterface.Parameter}}}, SpineOpt.var"#1220#1221"{Array{Any, 1}, SpineInterface._StartRef, Base.Dict{NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, JuMP.GenericModel{Float64}}}}})
precompile(Tuple{typeof(SpineOpt.start_up_costs), JuMP.GenericModel{Float64}, Array{Any, 1}})
precompile(Tuple{SpineOpt.var"##units_on_indices#1107", Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SpineInterface.Parameter}}}, SpineInterface.Anything, Array{Any, 1}, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, typeof(SpineOpt.units_on_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:unit, :temporal_block, :_compact), Tuple{Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SpineInterface.Parameter}}}, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, Bool}}, SpineInterface.RelationshipClass})
precompile(Tuple{typeof(Base._array_for), Type{Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SpineInterface.Parameter}}}}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SpineInterface.Parameter}}}, 1}, Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SpineInterface.Parameter}}}, Base.Generator{Array{Symbol, 1}, SpineInterface.var"#208#214"{Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:unit, :temporal_block), Tuple{Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SpineInterface.Parameter}}}, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}}}}}}, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SpineInterface.Parameter}}}, 1}, SpineInterface.Object, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Any, 1}, Base.Generator{Array{Symbol, 1}, SpineInterface.var"#208#214"{Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:unit, :temporal_block), Tuple{Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SpineInterface.Parameter}}}, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}}}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.get!), SpineInterface.var"#209#215"{Bool, Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:unit, :temporal_block), Tuple{Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SpineInterface.Parameter}}}, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}}}}, SpineInterface.RelationshipClass}, Base.Dict{Any, Any}, Tuple{Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SpineInterface.Parameter}}}, SpineInterface.Object}})
precompile(Tuple{SpineInterface.var"#cond#216"{Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:unit, :temporal_block), Tuple{Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SpineInterface.Parameter}}}, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}}}}}, NamedTuple{(:unit, :temporal_block), Tuple{SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1109#1110"{SpineInterface.Anything, Array{Any, 1}, JuMP.GenericModel{Float64}}, Array{Any, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{Any, 1}, SpineOpt.var"#1109#1110"{SpineInterface.Anything, Array{Any, 1}, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.unique), Base.Iterators.Flatten{Base.Generator{Array{Any, 1}, SpineOpt.var"#1109#1110"{SpineInterface.Anything, Array{Any, 1}, JuMP.GenericModel{Float64}}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1210#1212"{SpineInterface._StartRef, Base.Dict{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, JuMP.GenericModel{Float64}}, Array{Any, 1}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:init,), Tuple{Int64}}, typeof(SpineOpt.expr_sum), Base.Generator{Array{Any, 1}, SpineOpt.var"#1210#1212"{SpineInterface._StartRef, Base.Dict{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(SpineOpt.shut_down_costs), JuMP.GenericModel{Float64}, Array{Any, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1214#1216"{SpineInterface._StartRef, Base.Dict{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, JuMP.GenericModel{Float64}}, Array{Any, 1}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:init,), Tuple{Int64}}, typeof(SpineOpt.expr_sum), Base.Generator{Array{Any, 1}, SpineOpt.var"#1214#1216"{SpineInterface._StartRef, Base.Dict{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(SpineOpt.objective_penalties), JuMP.GenericModel{Float64}, Array{Any, 1}})
precompile(Tuple{SpineOpt.var"##node_slack_indices#1117", SpineInterface.Anything, SpineInterface.Anything, Array{Any, 1}, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, typeof(SpineOpt.node_slack_indices), JuMP.GenericModel{Float64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1119#1120"{SpineInterface.Anything, Array{Any, 1}, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, JuMP.GenericModel{Float64}}, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, SpineOpt.var"#1119#1120"{SpineInterface.Anything, Array{Any, 1}, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.collect), Type{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}}, Base.Iterators.Flatten{Base.Generator{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, SpineOpt.var"#1119#1120"{SpineInterface.Anything, Array{Any, 1}, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, JuMP.GenericModel{Float64}}}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Flatten{Base.Generator{Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, SpineOpt.var"#1119#1120"{SpineInterface.Anything, Array{Any, 1}, Array{Union{Int64, SpineInterface.Object, SpineInterface.TimeSlice}, 1}, JuMP.GenericModel{Float64}}}}, Tuple{Int64, Base.Generator{Array{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#1118#1121"}, Int64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1236#1238"{SpineInterface._StartRef, Base.Dict{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Base.Dict{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, JuMP.GenericModel{Float64}}, Array{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:init,), Tuple{Int64}}, typeof(SpineOpt.expr_sum), Base.Generator{Array{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, 1}, SpineOpt.var"#1236#1238"{SpineInterface._StartRef, Base.Dict{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Base.Dict{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, JuMP.GenericModel{Float64}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1237#1239", Tuple{SpineInterface.Object}})
precompile(Tuple{typeof(Base.convert), Type{Base.Fix1{Type{Base.MappingRF{F, T} where T where F}, SpineOpt.var"#1237#1239"}}, Base.Fix1{Type{Base.MappingRF{F, T} where T where F}, SpineOpt.var"#1237#1239"}})
precompile(Tuple{typeof(Base.reduce_empty), Base.MappingRF{SpineOpt.var"#1237#1239", Base.BottomRF{typeof(Base.mul_prod)}}, Type{SpineInterface.Object}})
precompile(Tuple{typeof(Base.prod), Base.Generator{Tuple{SpineInterface.Object}, SpineOpt.var"#1237#1239"}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:temporal_block,), Tuple{SpineInterface.Object}}, SpineInterface.Parameter})
precompile(Tuple{typeof(Base.reduce_first), typeof(Base.mul_prod), Int64})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:node, :stochastic_scenario), Tuple{SpineInterface.Object, SpineInterface.Object}}}})
precompile(Tuple{typeof(Base.getindex), SpineInterface.Parameter, NamedTuple{(:node, :stochastic_scenario), Tuple{SpineInterface.Object, SpineInterface.Object}}})
precompile(Tuple{Type{SpineInterface.Call}, SpineInterface.ParameterValue{Float64}, NamedTuple{(), Tuple{}}, Tuple{Symbol, NamedTuple{(:node, :stochastic_scenario), Tuple{SpineInterface.Object, SpineInterface.Object}}}})
precompile(Tuple{typeof(Base.:(*)), JuMP.GenericAffExpr{Float64, JuMP.GenericVariableRef{Float64}}, Float64, Int64, SpineInterface.Call, SpineInterface.Call})
precompile(Tuple{typeof(JuMP.add_to_expression!), JuMP.GenericAffExpr{SpineInterface.Call, JuMP.GenericVariableRef{Float64}}, JuMP.GenericAffExpr{SpineInterface.Call, JuMP.GenericVariableRef{Float64}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1118#1121", Array{Any, 1}})
precompile(Tuple{typeof(SpineOpt.connection_flow_costs), JuMP.GenericModel{Float64}, Array{Any, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1256#1257"{Array{Any, 1}, SpineInterface._StartRef, Base.Dict{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, JuMP.GenericModel{Float64}}, Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SpineInterface.Parameter}}}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SpineInterface.Parameter}}}, SpineOpt.var"#1256#1257"{Array{Any, 1}, SpineInterface._StartRef, Base.Dict{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:init,), Tuple{Int64}}, typeof(SpineOpt.expr_sum), Base.Iterators.Flatten{Base.Generator{Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SpineInterface.Parameter}}}, SpineOpt.var"#1256#1257"{Array{Any, 1}, SpineInterface._StartRef, Base.Dict{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, JuMP.GenericModel{Float64}}}}})
precompile(Tuple{typeof(SpineOpt.renewable_curtailment_costs), JuMP.GenericModel{Float64}, Array{Any, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1248#1249"{Array{Any, 1}, SpineInterface._StartRef, Base.Dict{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Base.Dict{NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, JuMP.GenericModel{Float64}}, Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SpineInterface.Parameter}}}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SpineInterface.Parameter}}}, SpineOpt.var"#1248#1249"{Array{Any, 1}, SpineInterface._StartRef, Base.Dict{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Base.Dict{NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:init,), Tuple{Int64}}, typeof(SpineOpt.expr_sum), Base.Iterators.Flatten{Base.Generator{Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SpineInterface.Parameter}}}, SpineOpt.var"#1248#1249"{Array{Any, 1}, SpineInterface._StartRef, Base.Dict{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Base.Dict{NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, JuMP.GenericModel{Float64}}}}})
precompile(Tuple{typeof(SpineOpt.res_proc_costs), JuMP.GenericModel{Float64}, Array{Any, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1262#1263"{Array{Any, 1}, SpineInterface._StartRef, Base.Dict{NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, JuMP.GenericModel{Float64}}, Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SpineInterface.Parameter}}}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SpineInterface.Parameter}}}, SpineOpt.var"#1262#1263"{Array{Any, 1}, SpineInterface._StartRef, Base.Dict{NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:init,), Tuple{Int64}}, typeof(SpineOpt.expr_sum), Base.Iterators.Flatten{Base.Generator{Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SpineInterface.Parameter}}}, SpineOpt.var"#1262#1263"{Array{Any, 1}, SpineInterface._StartRef, Base.Dict{NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, JuMP.GenericModel{Float64}}}}})
precompile(Tuple{typeof(SpineOpt.ramp_costs), JuMP.GenericModel{Float64}, Array{Any, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1268#1272"{Array{Any, 1}, Dates.DateTime, Base.Dict{Any, Any}, JuMP.GenericModel{Float64}}, Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SpineInterface.Parameter}}}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SpineInterface.Parameter}}}, SpineOpt.var"#1268#1272"{Array{Any, 1}, Dates.DateTime, Base.Dict{Any, Any}, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:init,), Tuple{Int64}}, typeof(SpineOpt.expr_sum), Base.Iterators.Flatten{Base.Generator{Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SpineInterface.Parameter}}}, SpineOpt.var"#1268#1272"{Array{Any, 1}, Dates.DateTime, Base.Dict{Any, Any}, JuMP.GenericModel{Float64}}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1271#1275"{Array{Any, 1}, Dates.DateTime, Base.Dict{Any, Any}, JuMP.GenericModel{Float64}}, Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SpineInterface.Parameter}}}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SpineInterface.Parameter}}}, SpineOpt.var"#1271#1275"{Array{Any, 1}, Dates.DateTime, Base.Dict{Any, Any}, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:init,), Tuple{Int64}}, typeof(SpineOpt.expr_sum), Base.Iterators.Flatten{Base.Generator{Base.Iterators.Flatten{Base.Generator{Array{Union{SpineInterface.ObjectClass, SpineInterface.RelationshipClass}, 1}, SpineInterface.var"#244#245"{Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SpineInterface.Parameter}}}, SpineOpt.var"#1271#1275"{Array{Any, 1}, Dates.DateTime, Base.Dict{Any, Any}, JuMP.GenericModel{Float64}}}}})
precompile(Tuple{typeof(SpineOpt.units_on_costs), JuMP.GenericModel{Float64}, Array{Any, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#1278#1280"{SpineInterface._StartRef, Base.Dict{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, JuMP.GenericModel{Float64}}, Array{Any, 1}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:init,), Tuple{Int64}}, typeof(SpineOpt.expr_sum), Base.Generator{Array{Any, 1}, SpineOpt.var"#1278#1280"{SpineInterface._StartRef, Base.Dict{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.values), Base.Dict{Symbol, Any}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#161#164", Base.ValueIterator{Base.Dict{Symbol, Any}}})
precompile(Tuple{typeof(Base.convert), Type{Base.Fix1{Type{Base.MappingRF{F, T} where T where F}, SpineOpt.var"#161#164"}}, Base.Fix1{Type{Base.MappingRF{F, T} where T where F}, SpineOpt.var"#161#164"}})
precompile(Tuple{typeof(Base.reduce_empty), Base.MappingRF{SpineOpt.var"#161#164", Base.BottomRF{typeof(Base.add_sum)}}, Type{Any}})
precompile(Tuple{typeof(Base.sum), Base.Generator{Base.ValueIterator{Base.Dict{Symbol, Any}}, SpineOpt.var"#161#164"}})
precompile(Tuple{SpineOpt.var"#161#164", Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.reduce_first), typeof(Base.add_sum), Int64})
precompile(Tuple{SpineOpt.var"#161#164", Tuple{JuMP.GenericAffExpr{Float64, JuMP.GenericVariableRef{Float64}}, JuMP.GenericAffExpr{Float64, JuMP.GenericVariableRef{Float64}}}})
precompile(Tuple{Base.BottomRF{typeof(Base.add_sum)}, Int64, JuMP.GenericAffExpr{Float64, JuMP.GenericVariableRef{Float64}}})
precompile(Tuple{Base.BottomRF{typeof(Base.add_sum)}, JuMP.GenericAffExpr{Float64, JuMP.GenericVariableRef{Float64}}, JuMP.GenericAffExpr{Float64, JuMP.GenericVariableRef{Float64}}})
precompile(Tuple{SpineOpt.var"#161#164", Tuple{JuMP.GenericAffExpr{SpineInterface.Call, JuMP.GenericVariableRef{Float64}}, JuMP.GenericAffExpr{Float64, JuMP.GenericVariableRef{Float64}}}})
precompile(Tuple{Base.BottomRF{typeof(Base.add_sum)}, JuMP.GenericAffExpr{Float64, JuMP.GenericVariableRef{Float64}}, JuMP.GenericAffExpr{SpineInterface.Call, JuMP.GenericVariableRef{Float64}}})
precompile(Tuple{Base.BottomRF{typeof(Base.add_sum)}, JuMP.GenericAffExpr{SpineInterface.Call, JuMP.GenericVariableRef{Float64}}, JuMP.GenericAffExpr{Float64, JuMP.GenericVariableRef{Float64}}})
precompile(Tuple{typeof(Base.iszero), JuMP.GenericAffExpr{SpineInterface.Call, JuMP.GenericVariableRef{Float64}}})
precompile(Tuple{typeof(JuMP.set_objective), JuMP.GenericModel{Float64}, MathOptInterface.OptimizationSense, JuMP.GenericAffExpr{SpineInterface.Call, JuMP.GenericVariableRef{Float64}}})
precompile(Tuple{Type{OrderedCollections.OrderedDict{JuMP.GenericVariableRef{Float64}, Float64}}, Base.Generator{OrderedCollections.OrderedDict{JuMP.GenericVariableRef{Float64}, SpineInterface.Call}, SpineInterface.var"#379#380"{JuMP.GenericModel{Float64}}}})
precompile(Tuple{typeof(Base.iterate), Base.KeySet{Any, Base.Dict{Any, Any}}})
precompile(Tuple{typeof(Base.get!), Base.Dict{Symbol, Union{Nothing, Base.Dict{K, V} where V where K}}, Symbol, Base.Dict{NamedTuple{names, T} where T<:Tuple where names, Base.Dict{K, V} where V where K}})
precompile(Tuple{typeof(Base.iterate), Base.KeySet{Any, Base.Dict{Any, Any}}, Int64})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:rev,), Tuple{Bool}}, typeof(SpineOpt.roll_temporal_structure!), JuMP.GenericModel{Float64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.:(-)), Dates.Hour})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(-)), Tuple{Base.Broadcast.Extruded{Array{Dates.Period, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{Dates.Hour}})
precompile(Tuple{typeof(Base.setindex!), Array{Dates.Hour, 1}, Dates.Hour, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Dates.Hour, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(-)), Tuple{Base.Broadcast.Extruded{Array{Dates.Period, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{Type{Dates.CompoundPeriod}, Array{Dates.Hour, 1}})
precompile(Tuple{typeof(Base.pop!), Base.Dict{Any, Any}, Dates.Millisecond})
precompile(Tuple{typeof(Base.:(-)), Dates.Millisecond, Dates.CompoundPeriod})
precompile(Tuple{typeof(Base.:(+)), Dates.CompoundPeriod, Dates.Millisecond})
precompile(Tuple{typeof(Base.mapreduce_first), typeof(Dates.toms), Function, Dates.Hour})
precompile(Tuple{typeof(Base.:(<)), Float64, Int64})
precompile(Tuple{SpineInterface.var"#285#286"{SpineInterface.Call, SpineInterface._VariableFixValueUpdate}})
precompile(Tuple{SpineInterface._VariableFixValueUpdate, Float64})
precompile(Tuple{SpineInterface.var"#285#286"{SpineInterface.Call, SpineInterface._RHSUpdate}})
precompile(Tuple{SpineInterface._RHSUpdate, Float64})
precompile(Tuple{typeof(JuMP.set_normalized_rhs), JuMP.ConstraintRef{JuMP.GenericModel{Float64}, MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.EqualTo{Float64}}, JuMP.ScalarShape}, Float64})
precompile(Tuple{typeof(MathOptInterface.set), MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{HiGHS.Optimizer}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.GenericModel{Float64, MathOptInterface.Utilities.ObjectiveContainer{Float64}, MathOptInterface.Utilities.VariablesContainer{Float64}, MathOptInterface.Utilities.ModelFunctionConstraints{Float64}}}}, MathOptInterface.ConstraintSet, MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.EqualTo{Float64}}, MathOptInterface.EqualTo{Float64}})
precompile(Tuple{typeof(JuMP._moi_has_lower_bound), MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{HiGHS.Optimizer}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.GenericModel{Float64, MathOptInterface.Utilities.ObjectiveContainer{Float64}, MathOptInterface.Utilities.VariablesContainer{Float64}, MathOptInterface.Utilities.ModelFunctionConstraints{Float64}}}}, JuMP.GenericVariableRef{Float64}})
precompile(Tuple{typeof(MathOptInterface.get), MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{HiGHS.Optimizer}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.GenericModel{Float64, MathOptInterface.Utilities.ObjectiveContainer{Float64}, MathOptInterface.Utilities.VariablesContainer{Float64}, MathOptInterface.Utilities.ModelFunctionConstraints{Float64}}}}, MathOptInterface.ConstraintSet, MathOptInterface.ConstraintIndex{MathOptInterface.VariableIndex, MathOptInterface.GreaterThan{Float64}}})
precompile(Tuple{typeof(Base.getproperty), MathOptInterface.GreaterThan{Float64}, Symbol})
precompile(Tuple{typeof(Base.getproperty), SpineInterface.SpineInterfaceExt, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{JuMP.GenericVariableRef{Float64}, Any}, Any, JuMP.GenericVariableRef{Float64}})
precompile(Tuple{typeof(Base.cconvert), Type, Float64})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Float64}, Float64})
precompile(Tuple{typeof(MathOptInterface.delete), MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{HiGHS.Optimizer}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.GenericModel{Float64, MathOptInterface.Utilities.ObjectiveContainer{Float64}, MathOptInterface.Utilities.VariablesContainer{Float64}, MathOptInterface.Utilities.ModelFunctionConstraints{Float64}}}}, MathOptInterface.ConstraintIndex{MathOptInterface.VariableIndex, MathOptInterface.GreaterThan{Float64}}})
precompile(Tuple{typeof(JuMP._moi_has_upper_bound), MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{HiGHS.Optimizer}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.GenericModel{Float64, MathOptInterface.Utilities.ObjectiveContainer{Float64}, MathOptInterface.Utilities.VariablesContainer{Float64}, MathOptInterface.Utilities.ModelFunctionConstraints{Float64}}}}, JuMP.GenericVariableRef{Float64}})
precompile(Tuple{typeof(JuMP._moi_fix), MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{HiGHS.Optimizer}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.GenericModel{Float64, MathOptInterface.Utilities.ObjectiveContainer{Float64}, MathOptInterface.Utilities.VariablesContainer{Float64}, MathOptInterface.Utilities.ModelFunctionConstraints{Float64}}}}, JuMP.GenericVariableRef{Float64}, Float64, Bool})
precompile(Tuple{typeof(Base.iterate), Base.Dict{NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Int64, Int64})
precompile(Tuple{typeof(SpineOpt._base_name), Symbol, NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}})
precompile(Tuple{typeof(SpineOpt._set_name), JuMP.GenericVariableRef{Float64}, String})
precompile(Tuple{typeof(Base.iterate), Base.Dict{NamedTuple{(:unit, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Dict{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Int64, Int64})
precompile(Tuple{typeof(SpineOpt._base_name), Symbol, NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}})
precompile(Tuple{typeof(Base.join), Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, String})
precompile(Tuple{typeof(Base.iterate), Base.Dict{NamedTuple{(:unit, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Dict{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Int64, Int64})
precompile(Tuple{typeof(SpineOpt._base_name), Symbol, NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}})
precompile(Tuple{typeof(Base.iterate), Base.Dict{NamedTuple{(:node, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Dict{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Int64, Int64})
precompile(Tuple{typeof(SpineOpt._base_name), Symbol, NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}})
precompile(Tuple{typeof(Base.iterate), Base.Dict{NamedTuple{(:connection, :node, :direction, :stochastic_scenario, :t), Tuple{SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.Object, SpineInterface.TimeSlice}}, JuMP.GenericVariableRef{Float64}}, Int64})
precompile(Tuple{typeof(Base.keys), Base.Dict{Symbol, Union{Nothing, Base.Dict{K, V} where V where K}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Type, Base.KeySet{Symbol, Base.Dict{Symbol, Union{Nothing, Base.Dict{K, V} where V where K}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, Type{String}, Tuple{Array{Symbol, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{String}, Tuple{Array{Symbol, 1}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#170#171", Array{String, 1}})
precompile(Tuple{typeof(Base.any), Base.Generator{Array{String, 1}, SpineOpt.var"#170#171"}})
precompile(Tuple{typeof(Base.string), String, SpineInterface.Object, String})
precompile(Tuple{typeof(MathOptInterface.optimize!), MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{HiGHS.Optimizer}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.GenericModel{Float64, MathOptInterface.Utilities.ObjectiveContainer{Float64}, MathOptInterface.Utilities.VariablesContainer{Float64}, MathOptInterface.Utilities.ModelFunctionConstraints{Float64}}}}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.ForwardOrdering, Tuple{Bool, Float64, Bool}, Tuple{Bool, Float64, Bool}})
precompile(Tuple{typeof(MathOptInterface.Utilities._pass_attribute), MathOptInterface.Bridges.LazyBridgeOptimizer{HiGHS.Optimizer}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.GenericModel{Float64, MathOptInterface.Utilities.ObjectiveContainer{Float64}, MathOptInterface.Utilities.VariablesContainer{Float64}, MathOptInterface.Utilities.ModelFunctionConstraints{Float64}}}, MathOptInterface.Utilities.IndexMap, Array{MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.EqualTo{Float64}}, 1}, MathOptInterface.ConstraintName})
precompile(Tuple{typeof(MathOptInterface.Utilities._pass_attribute), MathOptInterface.Bridges.LazyBridgeOptimizer{HiGHS.Optimizer}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.GenericModel{Float64, MathOptInterface.Utilities.ObjectiveContainer{Float64}, MathOptInterface.Utilities.VariablesContainer{Float64}, MathOptInterface.Utilities.ModelFunctionConstraints{Float64}}}, MathOptInterface.Utilities.IndexMap, Array{MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.LessThan{Float64}}, 1}, MathOptInterface.ConstraintName})
precompile(Tuple{typeof(MathOptInterface.compute_conflict!), MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{HiGHS.Optimizer}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.GenericModel{Float64, MathOptInterface.Utilities.ObjectiveContainer{Float64}, MathOptInterface.Utilities.VariablesContainer{Float64}, MathOptInterface.Utilities.ModelFunctionConstraints{Float64}}}}})
precompile(Tuple{typeof(Base.getproperty), ArgumentError, Symbol})
precompile(Tuple{typeof(Base.displaysize), Base.PipeEndpoint})
precompile(Tuple{typeof(Logging.default_metafmt), Base.CoreLogging.LogLevel, Vararg{Any, 5}})
precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, Base.GenericIOBuffer{Array{UInt8, 1}}, Base.PipeEndpoint})
precompile(Tuple{typeof(Base.write), Base.PipeEndpoint, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.lock), Base.ReentrantLock})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.wait), Tuple{Array{Any, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.wait), Tuple{Array{Any, 1}}}})
precompile(Tuple{typeof(Base.unlock), Base.ReentrantLock})
precompile(Tuple{typeof(SpineOpt._output_keys), Base.Dict{Any, Any}})
precompile(Tuple{SpineOpt.var"#216#217", Array{Any, 1}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Flatten{Base.Generator{Array{Any, 1}, SpineOpt.var"#215#218"}}, Tuple{}})
precompile(Tuple{SpineOpt.var"#215#218", Tuple{Symbol, Array{Tuple{Symbol, Bool}, 1}}})
precompile(Tuple{typeof(Base.iterate), Array{Tuple{Symbol, Bool}, 1}})
precompile(Tuple{typeof(Base.getindex), Type{Tuple{Symbol, Bool}}, Tuple{Symbol, Bool}})
precompile(Tuple{Type{Base.Set{Tuple{Symbol, Bool}}}, Tuple{Tuple{Symbol, Bool}}})
precompile(Tuple{typeof(Base._unique_from), Base.Iterators.Flatten{Base.Generator{Base.ValueIterator{Base.Dict{Any, Any}}, SpineOpt.var"#216#217"}}, Array{Tuple{Symbol, Bool}, 1}, Base.Set{Tuple{Symbol, Bool}}, Tuple{Int64, Base.Iterators.Flatten{Base.Generator{Array{Any, 1}, SpineOpt.var"#215#218"}}, Tuple{Int64, Base.Generator{Array{Tuple{Symbol, Bool}, 1}, typeof(Base.identity)}, Int64}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Flatten{Base.Generator{Base.ValueIterator{Base.Dict{Any, Any}}, SpineOpt.var"#216#217"}}, Tuple{Int64, Base.Iterators.Flatten{Base.Generator{Array{Any, 1}, SpineOpt.var"#215#218"}}, Tuple{Int64, Base.Generator{Array{Tuple{Symbol, Bool}, 1}, typeof(Base.identity)}, Int64}}})
precompile(Tuple{typeof(Base.in!), Tuple{Symbol, Bool}, Base.Set{Tuple{Symbol, Bool}}})
precompile(Tuple{typeof(Base.push!), Array{Tuple{Symbol, Bool}, 1}, Tuple{Symbol, Bool}})
precompile(Tuple{typeof(Base.getindex), Array{Tuple{Symbol, Bool}, 1}, Int64})
precompile(Tuple{typeof(Base.get), Base.Dict{Symbol, Union{Nothing, Base.Dict{K, V} where V where K}}, Symbol, Nothing})
precompile(Tuple{typeof(Base.haskey), Base.Dict{Any, Any}, Tuple{Symbol, Bool}})
precompile(Tuple{typeof(SpineOpt._output_value_by_entity), Base.Dict{NamedTuple{names, T} where T<:Tuple where names, Base.Dict{K, V} where V where K}, Bool, typeof(SpineOpt.output_value)})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Any, Tuple{Symbol, Bool}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:alternative, :log_level), Tuple{String, Int64}}, typeof(SpineOpt.write_report), Base.Dict{Any, Any}, String, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Symbol, Array{Tuple{Symbol, Bool}, 1}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Symbol, Array{Tuple{Symbol, Bool}, 1}}, Int64, Int64})
precompile(Tuple{typeof(Base.get), Base.Dict{Any, Any}, Tuple{Symbol, Bool}, Nothing})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpineOpt.var"#230#232", Base.Dict{Any, Any}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Base.Dict{Any, Any}, SpineOpt.var"#230#232"}})
precompile(Tuple{typeof(Base.iterate), Array{Tuple{Symbol, Bool}, 1}, Int64})
precompile(Tuple{Type{NamedTuple{(:report, :alternative, :on_conflict), T} where T<:Tuple}, Tuple{String, String, String}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:report, :alternative, :on_conflict), Tuple{String, String, String}}, typeof(SpineInterface.write_parameters), Base.Dict{Any, Any}, String})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:for_object, :report, :alternative), Tuple{Bool, String, String}}, typeof(SpineInterface._merge_parameter_data!), Base.Dict{Symbol, Any}, Symbol, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Base.push!), Base.Set{String}, String})
precompile(Tuple{typeof(Base._unique!), typeof(Base.identity), Array{Any, 1}, Base.Set{String}, Int64, Int64})
precompile(Tuple{typeof(Base.:(∉)), String, Base.Set{String}})
precompile(Tuple{typeof(Base._array_for), Type{String}, Base.HasLength, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{String, 1}, String, Base.Generator{Base.Dict{Any, Any}, SpineInterface.var"#137#138"}, Int64})
precompile(Tuple{Type{Pair{A, B} where B where A}, String, Array{Any, 1}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{String}, Type{Array{Any, 1}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Array{Any, 1}}, Array{Any, 1}, String})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Array{Any, 1}}, Base.Generator{Base.Dict{Symbol, Any}, SpineInterface.var"#177#178"}, Int64})
precompile(Tuple{typeof(Base.empty), Base.Dict{String, Array{Any, 1}}, Type{String}, Type{Any}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{String, Any}, Base.Dict{String, Array{Any, 1}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Any}, Base.Generator{Base.Dict{Symbol, Any}, SpineInterface.var"#177#178"}, Int64})
precompile(Tuple{typeof(SpineInterface._run_server_request), URIs.URI, String, Tuple{Base.Dict{String, Any}, String}})
precompile(Tuple{typeof(JSON.Writer.show_element), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, SpineInterface._TailSerialization, Tuple{Base.Dict{String, Any}, String}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, SpineInterface._TailSerialization, String, Array{Any, 1}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, SpineInterface._TailSerialization, String, String})
precompile(Tuple{typeof(JSON.Writer.show_element), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, SpineInterface._TailSerialization, Tuple{String, String}})
precompile(Tuple{typeof(SpineInterface._process_db_answer), Array{Any, 1}, Nothing})
precompile(Tuple{typeof(Dates.coarserperiod), Type{Dates.Millisecond}})
precompile(Tuple{typeof(Base.push!), Array{Dates.Period, 1}, Dates.Millisecond})
precompile(Tuple{typeof(Dates.coarserperiod), Type{Dates.Second}})
precompile(Tuple{typeof(Base.push!), Array{Dates.Period, 1}, Dates.Second})
precompile(Tuple{typeof(Dates.coarserperiod), Type{Dates.Minute}})
precompile(Tuple{typeof(Base.push!), Array{Dates.Period, 1}, Dates.Minute})
precompile(Tuple{typeof(Dates.tons), Dates.Second})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{Base.ComposedFunction{typeof(Dates.tons), typeof(Base.oneunit)}, Base.Order.ReverseOrdering{Base.Order.ForwardOrdering}}, Dates.Second, Dates.Minute})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{Base.ComposedFunction{typeof(Dates.tons), typeof(Base.oneunit)}, Base.Order.ReverseOrdering{Base.Order.ForwardOrdering}}, Dates.Millisecond, Dates.Second})
precompile(Tuple{typeof(Base.iszero), Dates.Second})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Dates.CompoundPeriod})
precompile(Tuple{typeof(Base.string), Dates.Minute})
precompile(Tuple{typeof(Base.string), Dates.Second})
precompile(Tuple{typeof(Base.string), Dates.Millisecond})
precompile(Tuple{Base.var"##open#409", Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), Main.var"#3#4"{Base.Dict{Base.PkgId, Module}, Base.Dict{Base.PkgId, Module}}, String, Vararg{String}})
precompile(Tuple{typeof(Base.join), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{Module, 1}, String})
